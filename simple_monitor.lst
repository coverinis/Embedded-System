
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
08006c14 l    d  .rodata	00000000 .rodata
08017330 l    d  .init_array	00000000 .init_array
08017338 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000a3c l    d  .bss	00000000 .bss
20001c84 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
08017d78 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08004ec8 l       .text	00000000 LoopCopyDataInit
08004ec0 l       .text	00000000 CopyDataInit
08004edc l       .text	00000000 LoopFillZerobss
08004ed6 l       .text	00000000 FillZerobss
08004eee l       .text	00000000 LoopForever
08004f08 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08006bfc l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000a3c l       .bss	00000000 completed.8122
08017338 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000a40 l       .bss	00000000 object.8127
08017334 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sc_asm.o
080001e4 l     F .text	00000000 busy_delay
080001e8 l       .text	00000000 delay_loop
080001fa l       .text	00000000 loop_demo
08000224 l       .text	00000000 loop_demo_exit
08000204 l       .text	00000000 loop_led
08000220 l       .text	00000000 loop_led_exit
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sc_hook.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000004 l     O .data	00000004 buf.5804
20000008 l     O .data	00000004 printPrompt.5805
08006f64 l     O .rodata	00000006 __FUNCTION__.5819
20000a58 l     O .bss	00000004 count.5802
20000a5c l     O .bss	00000004 saved.5803
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5233
20000a60 l     O .bss	00000004 address.5232
00000000 l    df *ABS*	00000000 syscall.c
20000a64 l     O .bss	00000004 heap_end.5843
00000000 l    df *ABS*	00000000 terminal.c
080009a4 l     F .text	00000080 USBD_CDC_DataIn
20000a68 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
00000000 l    df *ABS*	00000000 printf_stdarg.c
080010bc l     F .text	00000028 printchar
080010e4 l     F .text	00000086 prints
0800116a l     F .text	000000a6 printi
08001210 l     F .text	00000120 print
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000b8c l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08002ef0 l     F .text	0000002a I2C_TransferConfig
08002f1c l     F .text	00000090 I2C_IsAcknowledgeFailed
08002fac l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
08003014 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08003068 l     F .text	00000064 I2C_RequestMemoryWrite
080030cc l     F .text	00000062 I2C_RequestMemoryRead
0800312e l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
08003442 l     F .text	0000008c SPI_WaitFlagStateUntilTimeout
080034ce l     F .text	0000009c SPI_WaitFifoStateUntilTimeout
0800356a l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000b90 l     O .bss	00000001 cfgidx.10117
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08003f28 l     F .text	00000012 USBD_CDC_DataIn
08003f3a l     F .text	00000028 USBD_CDC_EP0_RxReady
08003f64 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08003f70 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08003f7c l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08003f94 l     F .text	0000002e USBD_CDC_DataOut
08003fc2 l     F .text	0000005a USBD_CDC_Setup
0800401c l     F .text	0000003a USBD_CDC_DeInit
08004056 l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000b94 l     O .bss	00000230 mem.10338
00000000 l    df *ABS*	00000000 usbd_desc.c
08004398 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08004470 l     F .text	00000004 CDC_Itf_DeInit
08004474 l     F .text	00000020 CDC_Itf_Receive
08004494 l     F .text	00000018 CDC_Itf_Init
080044ac l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
08004504 l     F .text	00000080 SPIx_Init
08004584 l     F .text	00000040 SPIx_WriteRead
080045c4 l     F .text	0000006c I2Cx_Init
20000dc4 l     O .bss	00000060 SpiHandle
20000e24 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000e5c l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000e60 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08005494 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005640 l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/softfp/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/softfp/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000200 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
0801733c l       .fini_array	00000000 __fini_array_end
20000a3c l       .bss	00000000 __bss_start__
20001c84 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
08017338 l       .fini_array	00000000 __fini_array_start
08017338 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08017330 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08017330 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08017330 l       .init_array	00000000 __preinit_array_start
08004f08  w    F .text	00000002 RTC_Alarm_IRQHandler
080121cc g     O .rodata	00000010 RTC_BKP19R_fields
0801717c g     O .rodata	00000010 APBAHBPrescTable
08008340 g     O .rodata	00000058 TIM2_SR_fields
0800f854 g     O .rodata	00000108 CAN_F10R1_fields
0801304c g     O .rodata	00000010 TIM16_DMAR_fields
08005004 g     F .text	00000014 putchar
08004f08  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08011dbc g     O .rodata	00000010 I2C1_RXDR_fields
08004a90 g     F .text	0000001e LSM303DLHC_AccFilterCmd
08004f08  w    F .text	00000002 TIM8_CC_IRQHandler
0801239c g     O .rodata	00000038 TIM6_CR1_fields
08007f7c g     O .rodata	00000050 I2C1_ICR_fields
0800099c g     F .text	00000004 _isatty_r
20000e98 g     O .bss	00000050 input_b
0801208c g     O .rodata	00000010 TIM2_PSC_fields
08008b98 g     O .rodata	00000030 TIM17_CCMR1_Output_fields
080051c8 g     F .text	000000ba strcpy
0801262c g     O .rodata	00000058 COMP_COMP5_CSR_fields
0800e0d8 g     O .rodata	00000010 I2C1_TXDR_fields
08005018 g     F .text	00000064 _puts_r
08004438 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800a190 g     O .rodata	00000108 CAN_F19R1_fields
08000d48 g     F .text	0000003c DecodeWriteRegister
08002da2 g     F .text	000000c8 HAL_PCD_EP_ClrStall
0800f4a8 g     O .rodata	00000010 TIM16_CCR1_fields
08004f08  w    F .text	00000002 DebugMon_Handler
080009a0 g     F .text	00000004 _lseek_r
0800e908 g     O .rodata	00000028 FPU_MVFR1_fields
08004230 g     F .text	0000001a HAL_PCD_ResetCallback
08002e9e g     F .text	0000002e PCD_WritePMA
080132fc g     O .rodata	00000108 CAN_F22R1_fields
08008580 g     O .rodata	000000e8 CAN_FA1R_fields
20000f38 g     O .bss	00000224 hUSBDDevice
0800a3a0 g     O .rodata	00000050 TIM2_SMCR_fields
08017d90 g     O .parsetable	0000000c CmdTestE
08008b40 g     O .rodata	00000028 NVIC_IPR1_fields
0800e5d8 g     O .rodata	00000108 CAN_F14R1_fields
0800f844 g     O .rodata	00000010 TIM8_PSC_fields
0800d8d8 g     O .rodata	00000038 TIM15_EGR_fields
08000a24 g     F .text	00000054 CmdStats
08004d84 g     F .text	0000002e L3GD20_FilterConfig
08002e6a g     F .text	00000034 HAL_PCDEx_PMAConfig
08010288 g     O .rodata	000000fc TIM2_registers
08011a70 g     O .rodata	00000060 TIM15_DIER_fields
08009414 g     O .rodata	00000010 DMA1_CMAR3_fields
08009c28 g     O .rodata	00000108 GPIOA_BSRR_fields
08016ccc g     O .rodata	00000068 DMA1_CCR7_fields
08002424 g     F .text	000001b0 HAL_PCD_EP_Close
0800ea88 g     O .rodata	00000010 TSC_IOG6CR_fields
08009424 g     O .rodata	00000030 ADC1_SQR1_fields
080092e4 g     O .rodata	000000e8 CAN_FS1R_fields
0800f3e0 g     O .rodata	00000038 TIM1_CCMR2_Input_fields
08007b3c g     O .rodata	00000018 RTC_SHIFTR_fields
08001330 g     F .text	0000001c printf
08004d08 g     F .text	00000040 L3GD20_EnableIT
08012224 g     O .rodata	00000030 CAN_TI1R_fields
08003966 g     F .text	00000016 USBD_SetClassConfig
0800f000 g     O .rodata	00000028 NVIC_IPR14_fields
08004f08  w    F .text	00000002 TIM1_CC_IRQHandler
08001dd0 g     F .text	00000060 HAL_NVIC_SetPriority
0800a978 g     O .rodata	00000150 ADC1_registers
08004218 g     F .text	00000010 HAL_PCD_DataInStageCallback
080121dc g     O .rodata	00000020 TIM2_CR2_fields
0800ef30 g     O .rodata	00000010 Flash_WRPR_fields
08006860 g     F .text	00000020 __sseek
08005730 g     F .text	0000000a __sinit
08009ee0 g     O .rodata	00000068 DMA1_CCR2_fields
08006888 g     F .text	000000a8 __swbuf_r
08004f08  w    F .text	00000002 HardFault_Handler
08008740 g     O .rodata	00000108 TSC_IOHCR_fields
0800df88 g     O .rodata	00000028 CRC_CR_fields
08008720 g     O .rodata	00000010 NVIC_ISER0_fields
080063bc g     F .text	00000002 __malloc_unlock
08010d9c g     O .rodata	00000010 TIM15_ARR_fields
08012c8c g     O .rodata	00000010 RTC_BKP24R_fields
0800e4e0 g     O .rodata	00000010 TIM1_CCR3_fields
08016d4c g     O .rodata	00000010 TIM1_DMAR_fields
08009ba0 g     O .rodata	00000010 TIM15_CCR1_fields
08004f08  w    F .text	00000002 USB_HP_IRQHandler
08012064 g     O .rodata	00000018 USART1_RTOR_fields
0800c5ac g     O .rodata	00000078 RCC_AHBENR_fields
0800fd58 g     O .rodata	00000020 TIM2_CNT_fields
08010c84 g     O .rodata	00000090 I2C1_registers
08000540 g     F .text	0000000e SysTick_Handler
0800ce5c g     O .rodata	00000010 RTC_WPR_fields
08012d1c g     O .rodata	00000010 RTC_SSR_fields
08002008 g     F .text	0000000a HAL_GPIO_WritePin
0800e7e0 g     O .rodata	00000010 TSC_IOG2CR_fields
08004134 g     F .text	00000026 USBD_CDC_ReceivePacket
08004f08  w    F .text	00000002 PVD_IRQHandler
08008730 g     O .rodata	00000010 DMA1_CPAR7_fields
08004a56 g     F .text	0000001c LSM303DLHC_AccRebootCmd
0800fd78 g     O .rodata	00000018 TIM6_CNT_fields
08010bcc g     O .rodata	00000080 TIM1_DIER_fields
08004228 g     F .text	00000008 HAL_PCD_SOFCallback
0800d968 g     O .rodata	00000010 NVIC_ICPR0_fields
080062f0 g     F .text	000000c6 memmove
08004f08  w    F .text	00000002 TAMP_STAMP_IRQHandler
08004774 g     F .text	00000068 GYRO_IO_Init
08012af4 g     O .rodata	00000028 NVIC_IPR2_fields
0801733c g       *ABS*	00000000 _sidata
08001cf0 g     F .text	00000038 HAL_RCC_GetHCLKFreq
08004f08  w    F .text	00000002 PendSV_Handler
08017d84 g     O .parsetable	0000000c CmdButtonE
08011120 g     O .rodata	00000010 NVIC_ICPR1_fields
08004f08  w    F .text	00000002 NMI_Handler
08001e30 g     F .text	00000018 HAL_NVIC_EnableIRQ
08017330 g       .init_array	00000000 __exidx_end
080052f0 g     F .text	00000064 __strtok_r
08004f08  w    F .text	00000002 EXTI3_IRQHandler
08001c84 g     F .text	0000006c HAL_RCC_GetSysClockFreq
080046b4 g     F .text	0000001c BSP_LED_Off
080169f4 g     O .rodata	00000010 DMA1_CNDTR5_fields
0800c934 g     O .rodata	000000a0 TIM8_CCER_fields
0800d1bc g     O .rodata	00000108 CAN_F8R2_fields
08017e08 g       .parsetable	00000000 _parsetable_end
080118d8 g     O .rodata	00000050 RCC_AHBRSTR_fields
08004f0c g     F .text	0000000c __errno
08008668 g     O .rodata	00000010 RTC_BKP6R_fields
08008c8c g     O .rodata	00000030 CAN_TI2R_fields
08003b68 g     F .text	00000218 USBD_StdDevReq
08003180 g     F .text	00000090 HAL_I2C_Init
08010f14 g     O .rodata	00000010 NVIC_ISER2_fields
08017df0 g     O .parsetable	0000000c CmdWE
08003210  w    F .text	00000002 HAL_I2C_MspDeInit
0800bcec g     O .rodata	00000028 CAN_RDH0R_fields
0800e488 g     O .rodata	00000028 FPU_FPDSCR_fields
08004380 g     F .text	0000000c USBD_VCP_DeviceDescriptor
08001d28  w    F .text	00000002 HAL_MspInit
0800a078 g     O .rodata	00000108 CAN_F0R2_fields
08007a84 g     O .rodata	00000010 TSC_IOG8CR_fields
08004318 g     F .text	00000026 USBD_LL_IsStallEP
08012524 g     O .rodata	00000108 CAN_F0R1_fields
0800d2c4 g     O .rodata	00000028 TIM15_SMCR_fields
080042cc g     F .text	0000000e USBD_LL_Start
080048cc g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
08004990 g     F .text	00000030 BSP_ACCELERO_Init
0800395c g     F .text	0000000a USBD_Start
08000992 g     F .text	0000000a _fstat_r
08002012 g     F .text	00000008 HAL_GPIO_TogglePin
08011270 g     O .rodata	00000050 TIM8_CR1_fields
0800f208 g     O .rodata	00000010 Flash_AR_fields
0800b330 g     O .rodata	00000108 CAN_F2R1_fields
0800e160 g     O .rodata	00000060 COMP_COMP4_CSR_fields
080097fc g     O .rodata	00000048 GPIOB_AFRH_fields
08006c14 g       .text	00000000 _etext
0800e118 g     O .rodata	00000018 EXTI_PR2_fields
0800f040 g     O .rodata	00000030 USB_FS_FNR_fields
20000a3c g       .bss	00000000 _sbss
0800dea8 g     O .rodata	00000060 COMP_registers
08011130 g     O .rodata	00000108 CAN_F4R2_fields
0800437c g     F .text	00000002 USBD_static_free
0800d8c8 g     O .rodata	00000010 DMA1_CMAR1_fields
0800b0b4 g     O .rodata	00000068 TIM2_DIER_fields
0800bf0c g     O .rodata	00000010 TSC_IOG1CR_fields
08013004 g     O .rodata	00000028 TIM17_CCER_fields
08012dfc g     O .rodata	00000010 TIM8_RCR_fields
0800f630 g     O .rodata	00000018 TIM16_CNT_fields
0800aeac g     O .rodata	00000108 GPIOB_BSRR_fields
0800c3cc g     O .rodata	00000108 CAN_F16R2_fields
08009e70 g     O .rodata	00000020 ADC1_OFR1_fields
08011ad0 g     O .rodata	00000108 CAN_F24R2_fields
0800b680 g     O .rodata	00000010 RTC_BKP23R_fields
0800eca8 g     O .rodata	00000010 TIM15_CCR2_fields
08008ffc g     O .rodata	000000a0 ADC1_CFGR_fields
08008aa8 g     O .rodata	00000010 RTC_BKP13R_fields
0800394e g     F .text	0000000e USBD_RegisterClass
0800c634 g     O .rodata	00000108 CAN_F20R1_fields
0800c4d4 g     O .rodata	00000068 USART1_ICR_fields
08017010 g     O .rodata	00000108 CAN_F25R2_fields
0801302c g     O .rodata	00000010 TSC_IOG4CR_fields
0800c73c g     O .rodata	00000108 CAN_F27R2_fields
08016f80 g     O .rodata	00000080 TIM8_SR_fields
08007f24 g     O .rodata	00000058 USB_FS_ISTR_fields
08010d6c g     O .rodata	00000010 DMA1_CMAR2_fields
08009a1c g     O .rodata	00000010 RTC_BKP26R_fields
0800d938 g     O .rodata	00000030 ADC1_SQR2_fields
0800ce6c g     O .rodata	00000018 TIM17_CNT_fields
080098cc g     O .rodata	00000010 WWDG_SR_fields
08001e74 g     F .text	00000188 HAL_GPIO_Init
0800b23c g     O .rodata	0000009c EXTI_registers
08003b0a g     F .text	00000006 USBD_LL_SetSpeed
2000017c g     O .data	00000004 BUTTON_PORT
080049c0 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800b660 g     O .rodata	00000010 NVIC_ICTR_fields
08008950 g     O .rodata	00000010 TIM6_ARR_fields
0800bd24 g     O .rodata	000000b8 CAN_TSR_fields
08000850 g     F .text	000000b4 DumpBuffer
0800d134 g     O .rodata	00000088 GPIOA_IDR_fields
080079a4 g     O .rodata	00000058 USB_FS_USB_EP3R_fields
0800424c g     F .text	00000002 HAL_PCD_ResumeCallback
08000268 g     F .text	00000134 memcpy
0801209c g     O .rodata	00000108 CAN_F7R2_fields
08011c88 g     O .rodata	00000018 TIM1_CNT_fields
080047dc g     F .text	00000044 GYRO_IO_Write
0800508c g     F .text	000000f8 setvbuf
0800039c g     F .text	0000005c CmdLED
0800b4d0 g     O .rodata	00000080 TIM1_SR_fields
08009f48 g     O .rodata	00000028 NVIC_IPR13_fields
08008b68 g     O .rodata	00000010 TIM15_PSC_fields
08003db0 g     F .text	000000b2 USBD_StdEPReq
08005634 g     F .text	0000000c _cleanup_r
0800fa14 g     O .rodata	00000048 GPIOA_AFRH_fields
08010f6c g     O .rodata	00000018 DAC_DHR12RD_fields
08011310 g     O .rodata	00000060 COMP_COMP2_CSR_fields
08010f84 g     O .rodata	00000080 TIM8_DIER_fields
08016d34 g     O .rodata	00000018 ADC1_DIFSEL_fields
080046ec g     F .text	00000074 BSP_PB_Init
08004f08  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08004f08  w    F .text	00000002 EXTI0_IRQHandler
08012714 g     O .rodata	00000018 TIM8_OR_fields
08004f08  w    F .text	00000002 I2C2_EV_IRQHandler
08008c4c g     O .rodata	00000028 CAN_TDH0R_fields
0800b448 g     O .rodata	00000058 USB_FS_USB_EP4R_fields
0800e0e8 g     O .rodata	00000030 WWDG_registers
08007d04 g     O .rodata	00000010 TIM17_RCR_fields
0800507c g     F .text	00000010 puts
08003efc g     F .text	00000016 USBD_CtlSendStatus
08004f08  w    F .text	00000002 FPU_IRQHandler
08001d90  w    F .text	0000001a HAL_Delay
08003d80 g     F .text	00000030 USBD_StdItfReq
0800b438 g     O .rodata	00000010 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
08011ca0 g     O .rodata	000000e4 TIM15_registers
080026d8 g     F .text	00000182 HAL_PCD_EP_Transmit
08000244 g     F .text	00000012 my_Tick
0800e380 g     O .rodata	00000108 CAN_F3R1_fields
08003b28 g     F .text	00000028 USBD_ParseSetupRequest
0800f378 g     O .rodata	00000018 TIM2_CCR1_fields
0800c1f4 g     O .rodata	00000018 DAC_SWTRIGR_fields
08004f08  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800ad4c g     O .rodata	00000108 CAN_F13R1_fields
08005d28 g     F .text	00000010 malloc
0800d6a0 g     O .rodata	00000010 IWDG_RLR_fields
08002ecc g     F .text	00000022 PCD_ReadPMA
08000420 g     F .text	00000054 CmdGyro
08012cdc g     O .rodata	00000018 CAN_FMR_fields
08016dc4 g     O .rodata	0000003c OPAMP_registers
08010afc g     O .rodata	00000010 DMA1_CNDTR4_fields
08012484 g     O .rodata	00000010 NVIC_IABR1_fields
0801235c g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
08011e0c g     O .rodata	000000d8 EXTI_PR1_fields
08004f08  w    F .text	00000002 UsageFault_Handler
0801062c g     O .rodata	00000028 TIM8_CCR5_fields
08004f08  w    F .text	00000002 ADC1_2_IRQHandler
20000e6c g     O .bss	00000004 __malloc_top_pad
20000ee8 g     O .bss	00000050 input
08011370 g     O .rodata	00000108 CAN_F4R1_fields
0800f028 g     O .rodata	00000018 ADC1_TR3_fields
0800b550 g     O .rodata	00000010 DMA1_CPAR2_fields
080098dc g     O .rodata	00000050 TIM16_DIER_fields
08001ffc g     F .text	0000000c HAL_GPIO_ReadPin
0800e0b8 g     O .rodata	00000010 NVIC_ICER2_fields
0800547c g     F .text	00000018 strtoul
200013d8 g     O .bss	00000004 BuffLength
080098bc g     O .rodata	00000010 TIM8_CCR1_fields
200013dc g     O .bss	0000006c UartHandle
080128dc g     O .rodata	00000108 CAN_F9R2_fields
08010278 g     O .rodata	00000010 DAC_DHR12L2_fields
080059bc g     F .text	00000318 __sfvwrite_r
08003b10 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
08004f08  w    F .text	00000002 SPI1_IRQHandler
0800e4f0 g     O .rodata	00000030 CAN_TI0R_fields
08004f08  w    F .text	00000002 CAN_SCE_IRQHandler
08012a4c g     O .rodata	00000050 ADC1_SMPR2_fields
0800f540 g     O .rodata	00000028 NVIC_IPR4_fields
08000958 g     F .text	00000034 _sbrk_r
08008a80 g     O .rodata	00000028 NVIC_IPR18_fields
0800415c g     F .text	0000009c HAL_PCD_MspInit
080104a4 g     O .rodata	00000018 TIM6_DIER_fields
0800964c g     O .rodata	00000068 TIM1_CCMR1_Output_fields
080168c4 g     O .rodata	000000b8 USART1_ISR_fields
08004f08  w    F .text	00000002 TIM6_DAC_IRQHandler
0800a470 g     O .rodata	00000070 I2C1_CR2_fields
0800e7d0 g     O .rodata	00000010 TIM8_CCR2_fields
08002d00 g     F .text	000000a2 HAL_PCD_EP_SetStall
08000b40 g     F .text	0000000a _read_r
08007aec g     O .rodata	00000050 TIM1_SMCR_fields
0800e9e8 g     O .rodata	00000038 CAN_ESR_fields
08003924 g     F .text	0000002a USBD_Init
08011498 g     O .rodata	00000088 GPIOB_BRR_fields
20001160 g     O .bss	00000178 hpcd
08006a98 g     F .text	00000084 _fclose_r
0800f4b8 g     O .rodata	00000020 ADC1_OFR2_fields
08008bc8 g     O .rodata	00000018 TIM2_ARR_fields
08004868 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000e68 g     O .bss	00000004 __malloc_max_sbrked_mem
080130a4 g     O .rodata	00000108 CAN_F9R1_fields
0800f218 g     O .rodata	00000040 RTC_DR_fields
08011bf0 g     O .rodata	00000010 TIM1_CCR1_fields
08001e48 g     F .text	0000002c HAL_SYSTICK_Config
080109e4 g     O .rodata	00000010 Flash_OPTKEYR_fields
0800baec g     O .rodata	00000020 ADC1_OFR4_fields
2000115c g     O .bss	00000004 USBDDataIn
08004f08  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
0800c034 g     O .rodata	00000108 CAN_F25R1_fields
08012e3c g     O .rodata	00000020 SPI1_I2SPR_fields
08010534 g     O .rodata	00000010 ADC1_JDR1_fields
08011110 g     O .rodata	00000010 IWDG_KR_fields
080123d4 g     O .rodata	00000058 USB_FS_USB_EP0R_fields
08004914 g     F .text	0000003c COMPASSACCELERO_IO_Write
0800e7f0 g     O .rodata	00000108 CAN_F23R2_fields
0800e550 g     O .rodata	00000048 CRC_registers
0800aca4 g     O .rodata	000000a8 USART1_CR1_fields
0800b6c0 g     O .rodata	00000264 RTC_registers
0800be04 g     O .rodata	00000108 CAN_F5R2_fields
0800aac8 g     O .rodata	00000030 TIM17_CR2_fields
08017330 g       .init_array	00000000 __exidx_start
0800a380 g     O .rodata	00000020 TIM16_CCMR1_Input_fields
08008f6c g     O .rodata	00000010 Flash_KEYR_fields
08004c16 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0800eeb8 g     O .rodata	00000068 TIM8_CCMR2_Output_fields
080097cc g     O .rodata	00000030 PWR_CSR_fields
08011a58 g     O .rodata	00000018 RTC_ALRMASSR_fields
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080121a4 g     O .rodata	00000028 SYSCFG_EXTICR4_fields
0800afcc g     O .rodata	00000010 NVIC_IABR0_fields
08017328 g     O .rodata	00000004 _global_impure_ptr
0800b17c g     O .rodata	00000048 FPU_MVFR0_fields
08010c5c g     O .rodata	00000010 TIM16_RCR_fields
08006418 g     F .text	000003ec _realloc_r
08004f18 g     F .text	00000050 __libc_init_array
08003eea g     F .text	00000012 USBD_CtlContinueRx
0801207c g     O .rodata	00000010 RTC_BKP12R_fields
08008450 g     O .rodata	00000018 USART1_GTPR_fields
080020ec g     F .text	00000338 HAL_PCD_EP_Open
08004f08  w    F .text	00000002 DMA2_Channel2_IRQHandler
08004f08  w    F .text	00000002 DMA1_Channel4_IRQHandler
080096c4 g     O .rodata	00000018 TIM1_OR_fields
080079fc g     O .rodata	00000088 GPIOB_PUPDR_fields
0800285a g     F .text	000004a6 HAL_PCD_IRQHandler
080005b8 g     F .text	00000020 CmdR
08012d2c g     O .rodata	00000010 TIM1_CCR4_fields
0800d890 g     O .rodata	00000028 CAN_TDL1R_fields
080112e8 g     O .rodata	00000028 NVIC_IPR7_fields
08004db2 g     F .text	0000002e L3GD20_FilterCmd
08011dcc g     O .rodata	00000010 TIM17_DMAR_fields
08003212 g     F .text	0000002e HAL_I2C_DeInit
0801048c g     O .rodata	00000018 TIM15_CNT_fields
080035ae g     F .text	000000a6 HAL_SPI_Init
0800a638 g     O .rodata	00000010 RTC_BKP10R_fields
0800b11c g     O .rodata	00000050 CAN_MSR_fields
0800f0d0 g     O .rodata	000000a8 RCC_registers
08006bfc g     F .text	00000000 _init
0800bddc g     O .rodata	00000028 CAN_TDL0R_fields
0800e4b0 g     O .rodata	00000010 DAC_DHR8R2_fields
0800fa5c g     O .rodata	00000098 RCC_APB1RSTR_fields
08004a14 g     F .text	00000010 BSP_GYRO_GetXYZ
0800a180 g     O .rodata	00000010 RTC_BKP0R_fields
0800fe08 g     O .rodata	00000438 CAN_registers
08017d78 g       .parsetable	00000000 _parsetable_start
0800bc5c g     O .rodata	00000068 DMA1_CCR5_fields
0800b320 g     O .rodata	00000010 RTC_BKP8R_fields
0800a8a0 g     O .rodata	000000d8 TSC_registers
0800e1c0 g     O .rodata	00000038 TIM2_CCMR2_Input_fields
080042fc g     F .text	0000000e USBD_LL_StallEP
0800929c g     O .rodata	00000010 NVIC_ICER1_fields
08011ddc g     O .rodata	00000030 TIM16_EGR_fields
08017dcc g     O .parsetable	0000000c CmdRE
080035ac  w    F .text	00000002 HAL_SPI_MspInit
08010384 g     O .rodata	00000108 CAN_F8R1_fields
08004f08  w    F .text	00000002 USART3_IRQHandler
0800d760 g     O .rodata	00000108 CAN_F21R1_fields
0800ae54 g     O .rodata	00000058 RCC_CSR_fields
080043c0 g     F .text	00000040 USBD_VCP_SerialStrDescriptor
0800dcd0 g     O .rodata	00000088 GPIOA_OTYPER_fields
0801305c g     O .rodata	00000018 DAC_DHR12LD_fields
08009d30 g     O .rodata	00000038 TIM16_SR_fields
0800faf4 g     O .rodata	00000144 TIM1_registers
08005744 g     F .text	0000002c __libc_fini_array
080126d4 g     O .rodata	00000040 ADC1_JSQR_fields
20001c84 g       .bss	00000000 _ebss
0800134c g     F .text	00000030 CmdTest
08004950 g     F .text	00000040 COMPASSACCELERO_IO_Read
200001d0 g     O .data	0000002c L3gd20Drv
0800e220 g     O .rodata	00000058 FPU_CPACR_fields
08004f08  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800e6f8 g     O .rodata	00000028 CAN_TDL2R_fields
08003338 g     F .text	00000104 HAL_I2C_Mem_Read
080093cc g     O .rodata	00000048 GPIOA_AFRL_fields
08004eb8  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
08016b84 g     O .rodata	00000010 RTC_BKP29R_fields
080049d0 g     F .text	00000044 BSP_GYRO_Init
08009154 g     O .rodata	00000028 NVIC_IPR0_fields
0800d9a8 g     O .rodata	00000088 GPIOA_ODR_fields
0800b560 g     O .rodata	00000028 NVIC_IPR15_fields
080096b4 g     O .rodata	00000010 TIM1_CCR2_fields
0800ab2c g     O .rodata	000000d8 EXTI_RTSR1_fields
0800bc4c g     O .rodata	00000010 DAC_DOR2_fields
0800d8b8 g     O .rodata	00000010 CRC_DR_fields
080091b4 g     O .rodata	00000088 GPIOB_OSPEEDR_fields
08017dc0 g     O .parsetable	0000000c CmdLEDE
08004f08  w    F .text	00000002 UART5_IRQHandler
08000e10 g     F .text	0000003c DecodePeripheral
08011d94 g     O .rodata	00000028 SYSCFG_EXTICR1_fields
08007e1c g     O .rodata	00000108 CAN_F11R2_fields
08004f08  w    F .text	00000002 ADC3_IRQHandler
0800d6b0 g     O .rodata	00000040 RTC_TSTR_fields
0800e998 g     O .rodata	00000050 TIM2_CR1_fields
08001d50 g     F .text	00000024 HAL_Init
0800d37c g     O .rodata	00000108 CAN_F1R2_fields
080063c0 g     F .text	00000058 _putc_r
08003eca g     F .text	00000020 USBD_CtlPrepareRx
0800cf0c g     O .rodata	00000010 RTC_BKP17R_fields
0800fc38 g     O .rodata	00000028 CAN_RDL1R_fields
0800a658 g     O .rodata	00000108 CAN_F23R1_fields
08003656 g     F .text	0000002e HAL_SPI_DeInit
08004f08  w    F .text	00000002 TIM4_IRQHandler
0800bb34 g     O .rodata	00000108 CAN_F18R1_fields
08012d3c g     O .rodata	000000a8 USB_FS_registers
08012ff4 g     O .rodata	00000010 TIM8_CCR3_fields
080109f4 g     O .rodata	00000108 CAN_F13R2_fields
08006de6 g     O .rodata	00000008 LEDs
0800f178 g     O .rodata	00000038 TIM2_CCMR1_Input_fields
08017000 g     O .rodata	00000010 DAC_DHR12R1_fields
080132bc g     O .rodata	00000030 I2C1_OAR1_fields
08004374 g     F .text	00000008 USBD_static_malloc
080092bc g     O .rodata	00000028 CAN_RF0R_fields
08004f08  w    F .text	00000002 CAN_RX1_IRQHandler
08004f08  w    F .text	00000002 DMA2_Channel1_IRQHandler
080092ac g     O .rodata	00000010 RTC_BKP7R_fields
0800dd58 g     O .rodata	00000018 ADC1_TR1_fields
08012c7c g     O .rodata	00000010 DMA1_CNDTR7_fields
08004106 g     F .text	0000002e USBD_CDC_TransmitPacket
20000180 g     O .data	00000004 I2cxTimeout
0800bc3c g     O .rodata	00000010 TSC_IOG5CR_fields
0800c59c g     O .rodata	00000010 DAC_DHR12R2_fields
0800e4d0 g     O .rodata	00000010 RTC_BKP18R_fields
0800022c g     F .text	00000016 mytest
0800a648 g     O .rodata	00000010 DMA1_CMAR6_fields
0800c564 g     O .rodata	00000038 TIM15_CCMR1_Input_fields
08000474 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08003f12 g     F .text	00000016 USBD_CtlReceiveStatus
0800ba4c g     O .rodata	00000018 TIM2_CCR4_fields
20001c84 g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800b1c4 g     O .rodata	00000078 SPI1_CR1_fields
08004f08  w    F .text	00000002 I2C1_EV_IRQHandler
0800fd90 g     O .rodata	00000078 SPI1_registers
080042da g     F .text	00000014 USBD_LL_OpenEP
0800f4d8 g     O .rodata	00000018 TIM8_DCR_fields
08000e90 g     F .text	00000048 DecodePrintRegisters
0800dbd8 g     O .rodata	00000070 USB_FS_USB_CNTR_fields
0800c164 g     O .rodata	00000090 USART1_registers
08004d48 g     F .text	0000003c L3GD20_DisableIT
080096dc g     O .rodata	00000010 USART1_TDR_fields
0800f96c g     O .rodata	00000080 RCC_APB1ENR_fields
08003654  w    F .text	00000002 HAL_SPI_MspDeInit
080132ec g     O .rodata	00000010 DMA1_CNDTR2_fields
08011004 g     O .rodata	00000078 CAN_IER_fields
08012494 g     O .rodata	00000068 DMA1_CCR1_fields
080128cc g     O .rodata	00000010 NVIC_ICER0_fields
0800d738 g     O .rodata	00000010 NVIC_ISER1_fields
08003a44 g     F .text	00000088 USBD_LL_DataInStage
08016b74 g     O .rodata	00000010 RTC_BKP31R_fields
0800db88 g     O .rodata	00000050 TIM1_EGR_fields
08011c20 g     O .rodata	00000068 TIM2_CCMR1_Output_fields
08010dac g     O .rodata	00000018 DAC_SR_fields
0800ed78 g     O .rodata	00000018 TIM2_CCR2_fields
08004250 g     F .text	0000007c USBD_LL_Init
08011260 g     O .rodata	00000010 RTC_BKP3R_fields
08004698 g     F .text	0000001c BSP_LED_On
08004c32 g     F .text	00000032 L3GD20_Init
08004f08  w    F .text	00000002 DMA1_Channel6_IRQHandler
08003b50 g     F .text	00000016 USBD_CtlError
080001f4 g     F .text	00000036 sc_led_demo
2000005c g     O .data	00000038 USBD_CDC
0800397c g     F .text	0000000e USBD_ClrClassConfig
0801697c g     O .rodata	00000010 RTC_BKP5R_fields
08004f08  w    F .text	00000002 UART4_IRQHandler
08004f08  w    F .text	00000002 DMA2_Channel4_IRQHandler
080040dc g     F .text	0000000e USBD_CDC_RegisterInterface
0800573c g     F .text	00000002 __sfp_lock_acquire
0800625c g     F .text	00000092 memchr
0800580c g     F .text	000001b0 _free_r
08004f08  w    F .text	00000002 TIM3_IRQHandler
08004f08  w    F .text	00000002 RCC_IRQHandler
08008318 g     O .rodata	00000028 RTC_CALR_fields
0800b16c g     O .rodata	00000010 DAC_DHR12L1_fields
08008418 g     O .rodata	00000038 TIM17_SR_fields
0800dab8 g     O .rodata	00000088 GPIOB_OTYPER_fields
08004f08  w    F .text	00000002 DMA1_Channel1_IRQHandler
08011f6c g     O .rodata	00000010 RTC_BKP9R_fields
08012e5c g     O .rodata	00000108 CAN_F14R2_fields
08004206 g     F .text	00000012 HAL_PCD_DataOutStageCallback
08004f08 g       .text	00000002 Default_Handler
20000a38 g     O .data	00000004 __malloc_sbrk_base
0800441c g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800f418 g     O .rodata	00000090 GPIOA_LCKR_fields
0800c324 g     O .rodata	00000098 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
08012f64 g     O .rodata	00000090 GPIOA_registers
0800ba2c g     O .rodata	00000010 NVIC_ISPR2_fields
08004f08  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
080104cc g     O .rodata	00000068 TIM2_CCMR2_Output_fields
080095ac g     O .rodata	00000090 GPIOB_LCKR_fields
08008f7c g     O .rodata	00000080 TIM8_CR2_fields
080026c8 g     F .text	00000010 HAL_PCD_EP_GetRxCount
08008ab8 g     O .rodata	00000038 CAN_BTR_fields
0801698c g     O .rodata	00000068 DMA1_CCR4_fields
08009b78 g     O .rodata	00000028 NVIC_IPR10_fields
0800c3bc g     O .rodata	00000010 TIM17_ARR_fields
0800c20c g     O .rodata	00000108 CAN_F12R2_fields
080107ac g     O .rodata	00000030 USART1_RQR_fields
0800f080 g     O .rodata	00000050 TIM17_DIER_fields
08007c8c g     O .rodata	00000010 RTC_BKP22R_fields
080107dc g     O .rodata	00000028 CAN_TDH2R_fields
0800df20 g     O .rodata	00000010 TIM1_RCR_fields
0800430a g     F .text	0000000e USBD_LL_ClearStallEP
08016f58 g     O .rodata	00000028 NVIC_IPR5_fields
08009a2c g     O .rodata	00000060 Flash_OBR_fields
08004f08  w    F .text	00000002 EXTI15_10_IRQHandler
0800a3f0 g     O .rodata	00000020 CAN_TDT1R_fields
08004de0 g     F .text	000000d8 L3GD20_ReadXYZAngRate
0800eae0 g     O .rodata	00000040 RTC_TR_fields
0800f608 g     O .rodata	00000028 NVIC_IPR17_fields
080069f4 g     F .text	000000a4 __register_exitproc
080099bc g     O .rodata	00000060 Flash_CR_fields
0800b5f0 g     O .rodata	00000060 SPI1_SR_fields
0800b2d8 g     O .rodata	00000048 USB_FS_DADDR_fields
0800bcd4 g     O .rodata	00000018 EXTI_SWIER2_fields
080020c0 g     F .text	0000002c HAL_PCD_SetAddress
0800d910 g     O .rodata	00000028 NVIC_IPR19_fields
0800c844 g     O .rodata	00000010 TIM6_SR_fields
08008478 g     O .rodata	00000108 CAN_F1R1_fields
08010974 g     O .rodata	00000060 DES_registers
08011488 g     O .rodata	00000010 TIM17_PSC_fields
08008398 g     O .rodata	00000028 SYSCFG_EXTICR2_fields
0800cd54 g     O .rodata	00000010 SPI1_CRCPR_fields
08004a72 g     F .text	0000001e LSM303DLHC_AccFilterConfig
080019b8 g     F .text	000002cc HAL_RCC_ClockConfig
08001dac g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
2000000c g     O .data	00000004 Commands
080129e4 g     O .rodata	00000018 ADC1_TR2_fields
20000e70 g     O .bss	00000028 __malloc_current_mallinfo
08004b94 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
0800e540 g     O .rodata	00000010 RTC_TSSSR_fields
080006dc g     F .text	0000012c TaskInput
0800c024 g     O .rodata	00000010 TIM6_CR2_fields
08010b74 g     O .rodata	00000058 RCC_CR_fields
0800dd70 g     O .rodata	000000e8 CAN_FM1R_fields
0800e8f8 g     O .rodata	00000010 TIM1_CCR6_fields
0800f568 g     O .rodata	000000a0 USART1_CR2_fields
0801069c g     O .rodata	00000068 TIM1_BDTR_fields
08005184 g     F .text	00000044 strcasecmp
080081c8 g     O .rodata	00000010 IWDG_WINR_fields
0800de58 g     O .rodata	00000050 ADC1_SMPR1_fields
08004820 g     F .text	00000048 GYRO_IO_Read
0800025c g     F .text	00000004 my_Init
0800b690 g     O .rodata	00000020 I2C1_OAR2_fields
0801272c g     O .rodata	00000108 CAN_F26R1_fields
08005354 g     F .text	00000128 _strtoul_r
0800ef20 g     O .rodata	00000010 CRC_POL_fields
08016b94 g     O .rodata	00000010 DMA1_CMAR4_fields
08004f08  w    F .text	00000002 TIM7_IRQHandler
08004cac g     F .text	0000005c L3GD20_INT1InterruptConfig
0800424a g     F .text	00000002 HAL_PCD_SuspendCallback
08010814 g     O .rodata	00000010 DMA1_CPAR3_fields
0800c624 g     O .rodata	00000010 RTC_BKP14R_fields
08003f88 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
0800098c g     F .text	00000006 _close_r
080078dc g     O .rodata	00000010 SPI1_DR_fields
08008f3c g     O .rodata	00000020 RCC_CFGR2_fields
08008a68 g     O .rodata	00000018 TIM15_DCR_fields
08008b78 g     O .rodata	00000020 Flash_ACR_fields
08016cac g     O .rodata	00000010 CRC_IDR_fields
200001a4 g     O .data	0000002c Lsm303dlhcDrv
0800ba3c g     O .rodata	00000010 DMA1_CPAR5_fields
08012254 g     O .rodata	00000108 CAN_F18R2_fields
08010654 g     O .rodata	00000048 IWDG_registers
080052e0 g     F .text	00000010 strtok
08017db4 g     O .parsetable	0000000c CmdGyroE
0800955c g     O .rodata	00000010 IWDG_PR_fields
0800ec80 g     O .rodata	00000028 NVIC_IPR11_fields
0800df30 g     O .rodata	00000058 COMP_COMP7_CSR_fields
080082e0 g     O .rodata	00000028 CAN_RF1R_fields
08000a78 g     F .text	0000007c TerminalInit
08006930 g     F .text	000000c4 __swsetup_r
0800ab1c g     O .rodata	00000010 TIM8_ARR_fields
08004f08  w    F .text	00000002 EXTI9_5_IRQHandler
0800391e g     F .text	00000006 HAL_SPI_GetState
0800a788 g     O .rodata	00000010 ADC1_DR_fields
08004f08  w    F .text	00000002 RTC_WKUP_IRQHandler
08016b5c g     O .rodata	00000018 USART1_BRR_fields
0801242c g     O .rodata	00000058 TIM15_CCMR1_Output_fields
2000062c g     O .data	00000408 __malloc_av_
0800f2d8 g     O .rodata	00000090 SYSCFG_CFGR1_fields
08000b4a g     F .text	00000010 TerminalReadNonBlock
08013084 g     O .rodata	00000020 CAN_TDT0R_fields
08000904 g     F .text	00000054 CmdDump
08006804 g     F .text	00000022 __sread
0800d978 g     O .rodata	00000030 TIM16_CCMR1_Output_fields
08010d7c g     O .rodata	00000020 WWDG_CFR_fields
08011638 g     O .rodata	000002a0 Peripherals
08011ee4 g     O .rodata	00000088 GPIOB_ODR_fields
08001d84  w    F .text	0000000c HAL_GetTick
0800ef40 g     O .rodata	00000058 USB_FS_USB_EP5R_fields
0800bf1c g     O .rodata	00000108 CAN_F11R1_fields
080063b8 g     F .text	00000002 __malloc_lock
08010804 g     O .rodata	00000010 NVIC_ISPR0_fields
0800923c g     O .rodata	00000060 ADC1_ISR_fields
08009844 g     O .rodata	00000050 FPU_FPCCR_fields
08012de4 g     O .rodata	00000018 TSC_ICR_fields
08004aae g     F .text	000000e6 LSM303DLHC_AccReadXYZ
08009ed0 g     O .rodata	00000010 NVIC_IABR2_fields
08005608 g     F .text	0000002c _fflush_r
08000b5a g     F .text	00000012 TerminalReadAnyNonBlock
08004400 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
08013404 g     O .rodata	00000088 GPIOA_PUPDR_fields
08004f08  w    F .text	00000002 SPI2_IRQHandler
080112c0 g     O .rodata	00000010 RTC_BKP21R_fields
080171fd g     O .rodata	00000012 hUSBDDeviceDesc
08007c5c g     O .rodata	00000030 RTC_TSDR_fields
08000cfc g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08010e2c g     O .rodata	00000050 RCC_CFGR3_fields
08004f68 g     F .text	0000009a memset
08004f08  w    F .text	00000002 MemManage_Handler
080004ac g     F .text	00000094 main
08010824 g     O .rodata	00000108 TSC_IOSCR_fields
08007768 g     O .rodata	00000174 DMA1_registers
08004760 g     F .text	00000014 BSP_PB_GetState
0800ecc8 g     O .rodata	00000028 SYSCFG_EXTICR3_fields
20000e64 g     O .bss	00000004 __malloc_max_total_mem
08017dd8 g     O .parsetable	0000000c scA2E
0800b650 g     O .rodata	00000010 ADC1_JDR3_fields
0800ec70 g     O .rodata	00000010 SPI1_TXCRCR_fields
08003684 g     F .text	0000029a HAL_SPI_TransmitReceive
20000178 g     O .data	00000004 SpixTimeout
08017d78 g       *ABS*	00000000 _siccmram
08016d6c g     O .rodata	00000058 COMP_COMP3_CSR_fields
0800c90c g     O .rodata	00000028 NVIC_IPR9_fields
0800cb98 g     O .rodata	0000003c DBGMCU_registers
08011238 g     O .rodata	00000028 NVIC_IPR16_fields
0800b924 g     O .rodata	00000108 CAN_F2R2_fields
08004f08  w    F .text	00000002 SVC_Handler
08006880 g     F .text	00000008 __sclose
08004f08  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800a298 g     O .rodata	000000e8 DMA1_IFCR_fields
080090cc g     O .rodata	00000088 TSC_IOGCSR_fields
08000c8c g     F .text	00000070 TerminalInputBufferWrite
0801303c g     O .rodata	00000010 DMA1_CPAR1_fields
0800afb4 g     O .rodata	00000018 DES_UID0_fields
08005d38 g     F .text	00000524 _malloc_r
0800ea98 g     O .rodata	00000048 GPIOB_AFRL_fields
08008cbc g     O .rodata	00000060 ADC1_IER_fields
0800963c g     O .rodata	00000010 DAC_DHR8R1_fields
08010240 g     O .rodata	00000038 TIM1_CCMR1_Input_fields
08008e34 g     O .rodata	00000108 TSC_IOASCR_fields
0800a760 g     O .rodata	00000028 NVIC_IPR20_fields
08003acc g     F .text	0000003e USBD_LL_Reset
0800fc60 g     O .rodata	00000020 CAN_RDT1R_fields
0800ce84 g     O .rodata	00000088 GPIOA_BRR_fields
08011530 g     O .rodata	00000108 CAN_F20R2_fields
0800df08 g     O .rodata	00000018 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08004368 g     F .text	0000000c USBD_LL_GetRxDataSize
08004f08  w    F .text	00000002 DMA1_Channel5_IRQHandler
08004a24 g     F .text	00000020 LSM303DLHC_AccInit
08004f08  w    F .text	00000002 USB_LP_IRQHandler
20001448 g     O .bss	00000800 UserRxBuffer
0800ec28 g     O .rodata	00000048 SPI1_I2SCFGR_fields
080171ac g     O .rodata	00000004 USBD_LangIDDesc
08009454 g     O .rodata	00000108 CAN_F15R2_fields
08004f08  w    F .text	00000002 EXTI4_IRQHandler
08010d14 g     O .rodata	00000058 USB_FS_USB_EP2R_fields
20000184 g     O .data	00000020 LED_PORT
0800807c g     O .rodata	00000010 TIM8_CCR6_fields
08004bd0 g     F .text	00000046 LSM303DLHC_AccClickITEnable
080039e4 g     F .text	00000060 USBD_LL_DataOutStage
0800c314 g     O .rodata	00000010 RTC_BKP4R_fields
08005770 g     F .text	0000009c _malloc_trim_r
08011d84 g     O .rodata	00000010 TSC_IOG7CR_fields
08008308 g     O .rodata	00000010 RTC_BKP16R_fields
0800db40 g     O .rodata	00000030 DBGMCU_CR_fields
0800e520 g     O .rodata	00000020 CAN_RDT0R_fields
08009a8c g     O .rodata	00000010 ADC1_AWD2CR_fields
08012834 g     O .rodata	00000010 DMA1_CMAR5_fields
0800c13c g     O .rodata	00000028 CAN_RDL0R_fields
080134f4 g     O .rodata	00000010 DMA1_CPAR4_fields
0801107c g     O .rodata	0000006c TIM6_registers
080003f8 g     F .text	00000028 CmdAccel
0800e210 g     O .rodata	00000010 RTC_BKP11R_fields
0800343c g     F .text	00000006 HAL_I2C_GetState
0800137c g     F .text	00000068 SystemInit
0800f4f0 g     O .rodata	00000050 TIM16_BDTR_fields
0800dc58 g     O .rodata	00000078 RTC_ALRMBR_fields
0800e6e0 g     O .rodata	00000018 TIM2_DCR_fields
0801349c g     O .rodata	00000058 ADC1_CR_fields
08006c08 g     F .text	00000000 _fini
0800059c g     F .text	0000001c CmdW
080020b4 g     F .text	0000000c HAL_PCD_Start
08004f08  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800cbd4 g     O .rodata	00000028 EXTI_EMR2_fields
08004a44 g     F .text	00000012 LSM303DLHC_AccReadID
080091a4 g     O .rodata	00000010 RTC_WUTR_fields
0800ecb8 g     O .rodata	00000010 DMA1_CPAR6_fields
080126c4 g     O .rodata	00000010 CRC_INIT_fields
08007fdc g     O .rodata	00000090 RTC_ISR_fields
08008c74 g     O .rodata	00000018 TIM1_DCR_fields
080086e0 g     O .rodata	00000040 PWR_CR_fields
0800afdc g     O .rodata	00000038 TIM2_EGR_fields
080054a8 g     F .text	0000000c atexit
08012844 g     O .rodata	00000088 OPAMP_OPAMP1_CR_fields
08009a9c g     O .rodata	00000054 FPU_registers
08008d2c g     O .rodata	00000108 EXTI_IMR1_fields
08000c54 g     F .text	00000038 _write_r
08009754 g     O .rodata	00000018 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08012c9c g     O .rodata	00000030 ADC1_SQR3_fields
08004f08  w    F .text	00000002 DMA1_Channel3_IRQHandler
08013234 g     O .rodata	00000088 DBGMCU_APB1FZ_fields
0800e930 g     O .rodata	00000068 SPI1_CR2_fields
08012d04 g     O .rodata	00000018 ADC1_CALFACT_fields
08011478 g     O .rodata	00000010 RTC_BKP28R_fields
08001d2a  w    F .text	00000024 HAL_InitTick
0800992c g     O .rodata	00000028 TIM1_CCR5_fields
0800433e g     F .text	0000000e USBD_LL_SetUSBAddress
080124fc g     O .rodata	00000028 NVIC_IPR12_fields
08017210 g     O .rodata	00000010 LED_PIN
20000628 g     O .data	00000004 _impure_ptr
0800e130 g     O .rodata	00000020 CAN_TDT2R_fields
080109d4 g     O .rodata	00000010 ADC1_JDR4_fields
0801092c g     O .rodata	00000048 TIM15_CR2_fields
080054b4 g     F .text	00000154 __sflush_r
08008678 g     O .rodata	00000068 RCC_CFGR_fields
08001d74  w    F .text	00000010 HAL_IncTick
0800909c g     O .rodata	00000030 TIM17_EGR_fields
080042ee g     F .text	0000000e USBD_LL_CloseEP
08004f08  w    F .text	00000002 ADC4_IRQHandler
08010704 g     O .rodata	000000a8 RTC_CR_fields
08003eb8 g     F .text	00000012 USBD_CtlContinueSendData
08011f7c g     O .rodata	000000e8 DMA1_ISR_fields
08009d68 g     O .rodata	00000108 CAN_F6R1_fields
08004c64 g     F .text	0000001c L3GD20_ReadID
08004f08  w    F .text	00000002 WWDG_IRQHandler
0800317e  w    F .text	00000002 HAL_I2C_MspInit
08007d14 g     O .rodata	00000108 EXTI_EMR1_fields
0800c53c g     O .rodata	00000028 NVIC_IPR6_fields
08013504 g     O .rodata	00000018 TIM2_CCR3_fields
08010dc4 g     O .rodata	00000068 DMA1_CCR6_fields
0800da30 g     O .rodata	00000088 GPIOA_MODER_fields
08010e8c g     O .rodata	00000088 OPAMP_OPAMP2_CR_fields
0800f258 g     O .rodata	00000080 TIM1_CR2_fields
0800b4b8 g     O .rodata	00000018 RTC_PRER_fields
0800434c g     F .text	0000000e USBD_LL_Transmit
08004f08  w    F .text	00000002 TIM2_IRQHandler
08000258 g     F .text	00000004 my_Loop
08012684 g     O .rodata	00000028 TIM16_CCER_fields
0800201a g     F .text	0000009a HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
0800d748 g     O .rodata	00000018 DES_UID1_fields
08017da8 g     O .parsetable	0000000c CmdDecodeE
0800a530 g     O .rodata	00000108 CAN_F26R2_fields
20000000 g       .data	00000000 myTickCount
0800ed90 g     O .rodata	00000108 CAN_F6R2_fields
0800a798 g     O .rodata	00000108 CAN_F16R1_fields
0800806c g     O .rodata	00000010 RTC_BKP27R_fields
0800e1f8 g     O .rodata	00000018 EXTI_RTSR2_fields
08012e0c g     O .rodata	00000030 TIM16_CR2_fields
08009bb0 g     O .rodata	00000078 RTC_ALRMAR_fields
08011100 g     O .rodata	00000010 TIM1_ARR_fields
08003e62 g     F .text	0000003a USBD_GetString
080046d0 g     F .text	0000001c BSP_LED_Toggle
08009f70 g     O .rodata	00000108 CAN_F22R2_fields
08007b54 g     O .rodata	00000108 CAN_F24R1_fields
080041f8 g     F .text	0000000e HAL_PCD_SetupStageCallback
08016ba4 g     O .rodata	00000108 CAN_F5R1_fields
08004f08  w    F .text	00000002 COMP7_IRQHandler
20007fff g       *ABS*	00000000 _estack
080005d8 g     F .text	00000104 parse
0800f95c g     O .rodata	00000010 RTC_BKP2R_fields
08004f08  w    F .text	00000002 COMP1_2_3_IRQHandler
0800eb20 g     O .rodata	00000108 CAN_F17R1_fields
08004f08  w    F .text	00000002 EXTI1_IRQHandler
08009954 g     O .rodata	00000068 TIM8_BDTR_fields
0800f1b0 g     O .rodata	00000058 USB_FS_USB_EP1R_fields
080078ec g     O .rodata	000000b8 ADC1_2_CSR_fields
0800f070 g     O .rodata	00000010 FPU_FPCAR_fields
20000a3c g       .data	00000000 _edata
0800d484 g     O .rodata	00000144 TIM8_registers
0800b670 g     O .rodata	00000010 RTC_BKP30R_fields
0800ee98 g     O .rodata	00000020 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0800e598 g     O .rodata	00000040 TIM16_CR1_fields
08016e00 g     O .rodata	00000108 CAN_F17R2_fields
08009e90 g     O .rodata	00000040 TIM15_CR1_fields
08000ed8 g     F .text	000001e4 CmdDecode
0800e150 g     O .rodata	00000010 TIM15_RCR_fields
0800ba64 g     O .rodata	00000088 GPIOB_IDR_fields
08007a94 g     O .rodata	00000058 TIM1_CCMR3_Output_fields
0800dc48 g     O .rodata	00000010 TIM8_DMAR_fields
08008be0 g     O .rodata	0000006c Flash_registers
0800cd64 g     O .rodata	00000018 TIM16_DCR_fields
08016b14 g     O .rodata	00000048 RCC_APB2RSTR_fields
08000808 g     F .text	00000028 fetch_uint32_arg
080110e8 g     O .rodata	00000018 RTC_ALRMBSSR_fields
08010f24 g     O .rodata	00000048 SYSCFG_RCR_fields
08004f08  w    F .text	00000002 USART2_IRQHandler
08012a0c g     O .rodata	00000040 TIM17_CR1_fields
0800f670 g     O .rodata	000001d4 NVIC_registers
08004f08  w    F .text	00000002 COMP4_5_6_IRQHandler
08006828 g     F .text	00000038 __swrite
080013e4 g     F .text	000005d4 HAL_RCC_OscConfig
20000a34 g     O .data	00000004 __malloc_trim_threshold
0800e0c8 g     O .rodata	00000010 TIM17_CCR1_fields
0800ac74 g     O .rodata	00000030 I2C1_TIMINGR_fields
08011520 g     O .rodata	00000010 USB_FS_BTABLE_fields
0800c8e4 g     O .rodata	00000028 CAN_TDH1R_fields
0800e720 g     O .rodata	000000b0 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08003e9c g     F .text	0000001c USBD_CtlSendData
08011950 g     O .rodata	00000108 CAN_F15R1_fields
08010c6c g     O .rodata	00000018 ADC1_2_CDR_fields
08005cd4 g     F .text	00000052 _fwalk_reent
0800bd14 g     O .rodata	00000010 TIM6_PSC_fields
080104bc g     O .rodata	00000010 RTC_BKP15R_fields
0800aaf8 g     O .rodata	00000024 PWR_registers
08011928 g     O .rodata	00000028 Flash_SR_fields
08013074 g     O .rodata	00000010 ADC1_JDR2_fields
0800d880 g     O .rodata	00000010 RTC_BKP20R_fields
200001fc g     O .data	00000004 __ctype_ptr__
0800bcc4 g     O .rodata	00000010 DMA1_CNDTR6_fields
080081d8 g     O .rodata	00000108 CAN_F19R2_fields
08004f08  w    F .text	00000002 I2C2_ER_IRQHandler
0800cd7c g     O .rodata	00000048 ADC1_2_CCR_fields
08004f08  w    F .text	00000002 DMA1_Channel2_IRQHandler
08008114 g     O .rodata	000000b4 DAC_registers
080131ac g     O .rodata	00000088 GPIOA_OSPEEDR_fields
08016adc g     O .rodata	00000038 TIM8_CCMR2_Input_fields
08005740 g     F .text	00000002 __sfp_lock_release
0800808c g     O .rodata	00000050 TIM17_BDTR_fields
0800f648 g     O .rodata	00000028 CAN_RDH1R_fields
0800ea20 g     O .rodata	00000068 TIM2_CCER_fields
080126ac g     O .rodata	00000018 DAC_DHR8RD_fields
08000830 g     F .text	00000020 fetch_string_arg
08004630 g     F .text	00000068 BSP_LED_Init
0800d024 g     O .rodata	00000088 GPIOB_MODER_fields
08017d9c g     O .parsetable	0000000c CmdDumpE
0801719c g     O .rodata	00000010 PLLMULFactorTable
0800b014 g     O .rodata	000000a0 USART1_CR3_fields
08000d84 g     F .text	00000040 DecodeField
080121fc g     O .rodata	00000028 CAN_RI0R_fields
08004f08  w    F .text	00000002 TIM8_BRK_IRQHandler
08009894 g     O .rodata	00000028 DBGMCU_APB2FZ_fields
08008f5c g     O .rodata	00000010 TIM1_PSC_fields
08000e4c g     F .text	00000044 DecodePrintPeripherals
0800cdc4 g     O .rodata	00000040 TIM15_CCER_fields
08017220 g     O .rodata	00000101 _ctype_
0800f368 g     O .rodata	00000010 DMA1_CMAR7_fields
08000550 g     F .text	0000004c scA2
0800bb0c g     O .rodata	00000028 CAN_RI1R_fields
08012b1c g     O .rodata	00000030 SYSCFG_CFGR2_fields
0800c854 g     O .rodata	00000090 RCC_CIR_fields
08017de4 g     O .parsetable	0000000c CmdStatsE
08004f08  w    F .text	00000002 FLASH_IRQHandler
0800cb88 g     O .rodata	00000010 TIM15_DMAR_fields
08012b4c g     O .rodata	00000018 EXTI_FTSR2_fields
0800cc4c g     O .rodata	00000108 CAN_F10R2_fields
0800ac4c g     O .rodata	00000028 NVIC_IPR3_fields
08012cf4 g     O .rodata	00000010 DMA1_CNDTR1_fields
0800957c g     O .rodata	00000030 I2C1_TIMEOUTR_fields
08008af0 g     O .rodata	00000050 TIM15_BDTR_fields
0800438c g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
200012d8 g     O .bss	00000100 USBD_StrDesc
08000b6c g     F .text	000000e8 TerminalOutputBufferWrite
08004f08  w    F .text	00000002 BusFault_Handler
08004f08  w    F .text	00000002 USART1_IRQHandler
0800ce04 g     O .rodata	00000058 COMP_COMP1_CSR_fields
08016f08 g     O .rodata	00000050 TIM8_EGR_fields
08006b1c g     F .text	000000e0 __smakebuf_r
0800d6f0 g     O .rodata	00000048 TIM15_SR_fields
08005284 g     F .text	0000005c strlen
0800ac04 g     O .rodata	00000048 RCC_APB2ENR_fields
08004f08  w    F .text	00000002 SPI3_IRQHandler
20001c48 g     O .bss	0000003c TimHandle
0800ef98 g     O .rodata	00000068 DMA1_CCR3_fields
0800a4e0 g     O .rodata	00000050 TIM1_CR1_fields
08011c00 g     O .rodata	00000020 IWDG_SR_fields
08012a9c g     O .rodata	00000058 USB_FS_USB_EP6R_fields
0800fc80 g     O .rodata	000000d8 TIM16_registers
08002eee  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0800cabc g     O .rodata	000000cc TIM17_registers
08003240 g     F .text	000000f8 HAL_I2C_Mem_Write
080076c8 g     O .rodata	000000a0 TIM1_CCER_fields
0800e278 g     O .rodata	00000108 CAN_F3R2_fields
08009af0 g     O .rodata	00000088 DAC_CR_fields
08004f08  w    F .text	00000002 I2C1_ER_IRQHandler
080096fc g     O .rodata	00000058 USB_FS_USB_EP7R_fields
0800d2ec g     O .rodata	00000090 I2C1_ISR_fields
08007c9c g     O .rodata	00000068 TIM1_CCMR2_Output_fields
0800917c g     O .rodata	00000028 NVIC_IPR8_fields
0801718c g     O .rodata	00000010 PredivFactorTable
08012b64 g     O .rodata	00000010 TSC_IOG3CR_fields
0800435a g     F .text	0000000e USBD_LL_PrepareReceive
0800b6b0 g     O .rodata	00000010 DMA1_CNDTR3_fields
08004c80 g     F .text	0000002c L3GD20_RebootCmd
08008848 g     O .rodata	00000108 CAN_F27R1_fields
0800db70 g     O .rodata	00000018 TSC_IER_fields
0800c9d4 g     O .rodata	000000e8 CAN_FFA1R_fields
0800b4a0 g     O .rodata	00000018 TIM8_CNT_fields
080129fc g     O .rodata	00000010 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08012ccc g     O .rodata	00000010 RTC_BKP25R_fields
0800dfb0 g     O .rodata	00000108 TSC_IOCCR_fields
0800ecf0 g     O .rodata	00000088 OPAMP_OPAMP3_CR_fields
080040fa g     F .text	0000000c USBD_CDC_SetRxBuffer
08016a04 g     O .rodata	000000d8 EXTI_SWIER1_fields
08007fcc g     O .rodata	00000010 TIM16_ARR_fields
0800d868 g     O .rodata	00000018 DBGMCU_IDCODE_fields
0800f9ec g     O .rodata	00000028 EXTI_IMR2_fields
08010e7c g     O .rodata	00000010 TIM6_EGR_fields
0800f3d0 g     O .rodata	00000010 SPI1_RXCRCR_fields
08016d5c g     O .rodata	00000010 I2C1_PECR_fields
080025d4 g     F .text	000000f4 HAL_PCD_EP_Receive
080168a4 g     O .rodata	00000020 ADC1_OFR3_fields
0800a410 g     O .rodata	00000060 COMP_COMP6_CSR_fields
0800e4c0 g     O .rodata	00000010 RTC_BKP1R_fields
08010b0c g     O .rodata	00000068 TIM8_CCMR1_Output_fields
0801059c g     O .rodata	00000090 GPIOB_registers
08000dc4 g     F .text	0000004c DecodeRegister
0800cbfc g     O .rodata	00000050 TIM8_SMCR_fields
08000d08 g     F .text	00000040 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
080083c0 g     O .rodata	00000058 CAN_MCR_fields
08008468 g     O .rodata	00000010 DAC_DOR1_fields
08000af4 g     F .text	0000004c TerminalRead
0800b588 g     O .rodata	00000068 TSC_CR_fields
0800956c g     O .rodata	00000010 TIM2_DMAR_fields
080080dc g     O .rodata	00000038 TIM8_CCMR1_Input_fields
08004bb2 g     F .text	0000001e LSM303DLHC_AccIT1Enable
08008960 g     O .rodata	00000108 CAN_F12R1_fields
08004f08  w    F .text	00000002 USBWakeUp_IRQHandler
08016cbc g     O .rodata	00000010 TIM16_PSC_fields
08010c4c g     O .rodata	00000010 USART1_RDR_fields
0800f390 g     O .rodata	00000040 RCC_BDCR_fields
080112d0 g     O .rodata	00000018 TIM17_DCR_fields
0801348c g     O .rodata	00000010 NVIC_ISPR1_fields
08008d1c g     O .rodata	00000010 NVIC_ICPR2_fields
08017d78 g     O .parsetable	0000000c CmdAccelE
08012b74 g     O .rodata	00000108 CAN_F21R2_fields
0801238c g     O .rodata	00000010 DES_UID2_fields
080040ea g     F .text	00000010 USBD_CDC_SetTxBuffer
0800976c g     O .rodata	00000060 SYSCFG_registers
0800d0ac g     O .rodata	00000088 OPAMP_OPAMP4_CR_fields
08004f08  w    F .text	00000002 DMA2_Channel3_IRQHandler
0800d5c8 g     O .rodata	000000d8 EXTI_FTSR1_fields
08004454 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
0800cf1c g     O .rodata	00000108 CAN_F7R1_fields
0800398a g     F .text	0000005a USBD_LL_SetupStage
080004a0 g     F .text	0000000a Error_Handler
08011bd8 g     O .rodata	00000018 WWDG_CR_fields
08004f08  w    F .text	00000002 EXTI2_TSC_IRQHandler
080096ec g     O .rodata	00000010 NVIC_STIR_fields
08004f08  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08010544 g     O .rodata	00000058 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000a3c 	.word	0x20000a3c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bfc 	.word	0x08006bfc

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08006bfc 	.word	0x08006bfc
 80001d8:	20000a40 	.word	0x20000a40
 80001dc:	20000a3c 	.word	0x20000a3c
 80001e0:	00000000 	.word	0x00000000

080001e4 <busy_delay>:
@ Returns: r0
@

@ Here is the actual function
busy_delay:
    push {r4}
 80001e4:	b410      	push	{r4}
    mov r4, r0
 80001e6:	4604      	mov	r4, r0

080001e8 <delay_loop>:

delay_loop:
    subs r4, r4, #1
 80001e8:	3c01      	subs	r4, #1
    bgt delay_loop
 80001ea:	dcfd      	bgt.n	80001e8 <delay_loop>
    mov r0, #0                      @ Return zero (always successful)
 80001ec:	f04f 0000 	mov.w	r0, #0
    pop {r4}
 80001f0:	bc10      	pop	{r4}
    bx lr                           @ Return (Branch eXchange) to the address held in the link register (lr)
 80001f2:	4770      	bx	lr

080001f4 <sc_led_demo>:
@ Returns: void
@

@ Here is the actual function
sc_led_demo:
    push {r4-r7,lr}
 80001f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    mov  r4, r0             @Count value
 80001f6:	4604      	mov	r4, r0
    mov  r5, r1             @Delay value
 80001f8:	460d      	mov	r5, r1

080001fa <loop_demo>:

loop_demo:
    cbz  r4, loop_demo_exit @IF counter is zero exit loop_demo
 80001fa:	b19c      	cbz	r4, 8000224 <loop_demo_exit>
    mov  r6, #0             @LED value
 80001fc:	f04f 0600 	mov.w	r6, #0
    mov  r7, #8
 8000200:	f04f 0708 	mov.w	r7, #8

08000204 <loop_led>:

loop_led:
    cbz  r7, loop_led_exit  @IF counter is zero exit loop_led
 8000204:	b167      	cbz	r7, 8000220 <loop_led_exit>

    mov  r0, r6             @Input LED value
 8000206:	4630      	mov	r0, r6
    bl   BSP_LED_Toggle     @call LED toggle
 8000208:	f004 fa62 	bl	80046d0 <BSP_LED_Toggle>

    mov  r0, r5             @Input delay amount
 800020c:	4628      	mov	r0, r5
    bl   busy_delay         @call the delay function
 800020e:	f7ff ffe9 	bl	80001e4 <busy_delay>

    mov  r0, r6             @Input LED value
 8000212:	4630      	mov	r0, r6
    bl   BSP_LED_Toggle     @call LED toggle
 8000214:	f004 fa5c 	bl	80046d0 <BSP_LED_Toggle>

    subs r7, #1             @decrement loop counter
 8000218:	3f01      	subs	r7, #1
    add  r6, #1             @increment light
 800021a:	f106 0601 	add.w	r6, r6, #1
    b    loop_led           @branch to begining of loop
 800021e:	e7f1      	b.n	8000204 <loop_led>

08000220 <loop_led_exit>:

loop_led_exit:
    subs r4, #1             @decrement the demo loop counter
 8000220:	3c01      	subs	r4, #1
    b loop_demo             @branch back to begining of loop
 8000222:	e7ea      	b.n	80001fa <loop_demo>

08000224 <loop_demo_exit>:
loop_demo_exit:
    pop {r4-r7,lr}          @restore Link Register
 8000224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bx lr                   @ Return (Branch eXchange) to the address in the link register (lr)
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop

0800022c <mytest>:
@@ Function Header Block
    .align  2               @ Code alignment - 2^n alignment (n=2)
                            @ This causes the assembler to use 4 byte alignment

    .syntax unified         @ Sets the instruction set to the new unified ARM + THUMB
                            @ instructions. The default is divided (separate instruction sets)
 800022c:	b500      	push	{lr}

 800022e:	b402      	push	{r1}
    .global mytest          @ Make the symbol name for the function visible to the linker
 8000230:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}

 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <my_Init+0x4>)
    .code   16              @ 16bit THUMB code (BOTH .code and .thumb_func are required)
 8000234:	f004 fa4c 	bl	80046d0 <BSP_LED_Toggle>
    .thumb_func             @ Specifies that the following symbol is the name of a THUMB
 8000238:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
                            @ encoded function. Necessary for interlinking between ARM and THUMB code.
 800023a:	490a      	ldr	r1, [pc, #40]	; (8000264 <my_Init+0x8>)

 800023c:	6808      	ldr	r0, [r1, #0]
    .type   mytest, %function   @ Declares that mytest symbol is a function (not strictly required)
 800023e:	bc02      	pop	{r1}

 8000240:	bd00      	pop	{pc}
 8000242:	bf00      	nop

08000244 <my_Tick>:
mytest:

    push {r4-r7, lr}                @ Put aside registers we want to restore later

    mov  r0, #1                     @ r0 holds our argument for the LED toggle function
                                    @ So pass it a value
 8000244:	b500      	push	{lr}

 8000246:	b403      	push	{r0, r1}
    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
    
 8000248:	4906      	ldr	r1, [pc, #24]	; (8000264 <my_Init+0x8>)
    ldr  r1, =myTickCount
 800024a:	6808      	ldr	r0, [r1, #0]
    ldr  r0, [r1]
 800024c:	f100 0001 	add.w	r0, r0, #1

 8000250:	6008      	str	r0, [r1, #0]
    pop  {r4-r7, lr}                @ Bring all the register values back
 8000252:	bc03      	pop	{r0, r1}

 8000254:	bd00      	pop	{pc}
 8000256:	bf00      	nop

08000258 <my_Loop>:
    .global my_Tick             @@ Expose my_Tick to the linker
    .code   16                  @@ - 16bit THUMB code (BOTH are required!)
    .thumb_func                 @@ /

    .type   my_Tick, %function  @@ - symbol type (not req)

 8000258:	b500      	push	{lr}
@@ Declaration : void my_Tick( void )
 800025a:	bd00      	pop	{pc}

0800025c <my_Init>:
    ldr  r0, [r1]           @@ Load r0 with the address pointed at by r1 (myTickCount address)
    add  r0, r0, #1         @@ Increment r0
    str  r0, [r1]           @@ Store the current r0 value back to the address pointed at by r1

    pop {lr}

 800025c:	b500      	push	{lr}
    bx lr                  @@ Return to the address stored in lr
 800025e:	bd00      	pop	{pc}

    .syntax unified         @ Sets the instruction set to the new unified ARM + THUMB
                            @ instructions. The default is divided (separate instruction sets)

    .global mytest          @ Make the symbol name for the function visible to the linker

 8000260:	00000000 	.word	0x00000000
    .code   16              @ 16bit THUMB code (BOTH .code and .thumb_func are required)
    .thumb_func             @ Specifies that the following symbol is the name of a THUMB
                            @ encoded function. Necessary for interlinking between ARM and THUMB code.
 8000264:	20000000 	.word	0x20000000

08000268 <memcpy>:
 8000268:	4684      	mov	ip, r0
 800026a:	ea41 0300 	orr.w	r3, r1, r0
 800026e:	f013 0303 	ands.w	r3, r3, #3
 8000272:	d16d      	bne.n	8000350 <memcpy+0xe8>
 8000274:	3a40      	subs	r2, #64	; 0x40
 8000276:	d341      	bcc.n	80002fc <memcpy+0x94>
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	3a40      	subs	r2, #64	; 0x40
 80002fa:	d2bd      	bcs.n	8000278 <memcpy+0x10>
 80002fc:	3230      	adds	r2, #48	; 0x30
 80002fe:	d311      	bcc.n	8000324 <memcpy+0xbc>
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	3a10      	subs	r2, #16
 8000322:	d2ed      	bcs.n	8000300 <memcpy+0x98>
 8000324:	320c      	adds	r2, #12
 8000326:	d305      	bcc.n	8000334 <memcpy+0xcc>
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	3a04      	subs	r2, #4
 8000332:	d2f9      	bcs.n	8000328 <memcpy+0xc0>
 8000334:	3204      	adds	r2, #4
 8000336:	d008      	beq.n	800034a <memcpy+0xe2>
 8000338:	07d2      	lsls	r2, r2, #31
 800033a:	bf1c      	itt	ne
 800033c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000340:	f800 3b01 	strbne.w	r3, [r0], #1
 8000344:	d301      	bcc.n	800034a <memcpy+0xe2>
 8000346:	880b      	ldrh	r3, [r1, #0]
 8000348:	8003      	strh	r3, [r0, #0]
 800034a:	4660      	mov	r0, ip
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	2a08      	cmp	r2, #8
 8000352:	d313      	bcc.n	800037c <memcpy+0x114>
 8000354:	078b      	lsls	r3, r1, #30
 8000356:	d08d      	beq.n	8000274 <memcpy+0xc>
 8000358:	f010 0303 	ands.w	r3, r0, #3
 800035c:	d08a      	beq.n	8000274 <memcpy+0xc>
 800035e:	f1c3 0304 	rsb	r3, r3, #4
 8000362:	1ad2      	subs	r2, r2, r3
 8000364:	07db      	lsls	r3, r3, #31
 8000366:	bf1c      	itt	ne
 8000368:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800036c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000370:	d380      	bcc.n	8000274 <memcpy+0xc>
 8000372:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000376:	f820 3b02 	strh.w	r3, [r0], #2
 800037a:	e77b      	b.n	8000274 <memcpy+0xc>
 800037c:	3a04      	subs	r2, #4
 800037e:	d3d9      	bcc.n	8000334 <memcpy+0xcc>
 8000380:	3a01      	subs	r2, #1
 8000382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000386:	f800 3b01 	strb.w	r3, [r0], #1
 800038a:	d2f9      	bcs.n	8000380 <memcpy+0x118>
 800038c:	780b      	ldrb	r3, [r1, #0]
 800038e:	7003      	strb	r3, [r0, #0]
 8000390:	784b      	ldrb	r3, [r1, #1]
 8000392:	7043      	strb	r3, [r0, #1]
 8000394:	788b      	ldrb	r3, [r1, #2]
 8000396:	7083      	strb	r3, [r0, #2]
 8000398:	4660      	mov	r0, ip
 800039a:	4770      	bx	lr

0800039c <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 800039c:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 800039e:	b9f8      	cbnz	r0, 80003e0 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 80003a0:	4668      	mov	r0, sp
 80003a2:	f000 fa31 	bl	8000808 <fetch_uint32_arg>
  if(rc) {
 80003a6:	b108      	cbz	r0, 80003ac <CmdLED+0x10>
    printf("Missing LED index\n");
 80003a8:	480f      	ldr	r0, [pc, #60]	; (80003e8 <CmdLED+0x4c>)
 80003aa:	e004      	b.n	80003b6 <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 80003ac:	a801      	add	r0, sp, #4
 80003ae:	f000 fa2b 	bl	8000808 <fetch_uint32_arg>
  if(rc) {
 80003b2:	b118      	cbz	r0, 80003bc <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <CmdLED+0x50>)
 80003b6:	f004 fe61 	bl	800507c <puts>
    return;
 80003ba:	e011      	b.n	80003e0 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 80003bc:	9900      	ldr	r1, [sp, #0]
 80003be:	1ecb      	subs	r3, r1, #3
 80003c0:	2b07      	cmp	r3, #7
 80003c2:	d903      	bls.n	80003cc <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 80003c4:	480a      	ldr	r0, [pc, #40]	; (80003f0 <CmdLED+0x54>)
 80003c6:	f000 ffb3 	bl	8001330 <printf>
	   (unsigned int)led);
    return;
 80003ca:	e009      	b.n	80003e0 <CmdLED+0x44>
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 80003ce:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 80003d0:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 80003d2:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 80003d4:	b111      	cbz	r1, 80003dc <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80003d6:	f004 f95f 	bl	8004698 <BSP_LED_On>
 80003da:	e001      	b.n	80003e0 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 80003dc:	f004 f96a 	bl	80046b4 <BSP_LED_Off>
  }

} 
 80003e0:	b003      	add	sp, #12
 80003e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e6:	bf00      	nop
 80003e8:	08006c14 	.word	0x08006c14
 80003ec:	08006c26 	.word	0x08006c26
 80003f0:	08006c4f 	.word	0x08006c4f
 80003f4:	08006de6 	.word	0x08006de6

080003f8 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80003f8:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80003fa:	b958      	cbnz	r0, 8000414 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80003fc:	4668      	mov	r0, sp
 80003fe:	f004 fadf 	bl	80049c0 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <CmdAccel+0x24>)
 8000404:	f9bd 1000 	ldrsh.w	r1, [sp]
 8000408:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800040c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8000410:	f000 ff8e 	bl	8001330 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8000414:	b003      	add	sp, #12
 8000416:	f85d fb04 	ldr.w	pc, [sp], #4
 800041a:	bf00      	nop
 800041c:	08006c7c 	.word	0x08006c7c

08000420 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8000422:	b9f8      	cbnz	r0, 8000464 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8000424:	a801      	add	r0, sp, #4
 8000426:	f004 faf5 	bl	8004a14 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800042a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800046c <CmdGyro+0x4c>
 800042e:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 8000432:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 8000436:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 800043a:	480d      	ldr	r0, [pc, #52]	; (8000470 <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800043c:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 8000440:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 8000444:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8000448:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800044c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000454:	ee16 1a90 	vmov	r1, s13
 8000458:	ee17 2a10 	vmov	r2, s14
 800045c:	ee17 3a90 	vmov	r3, s15
 8000460:	f000 ff66 	bl	8001330 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8000464:	b005      	add	sp, #20
 8000466:	f85d fb04 	ldr.w	pc, [sp], #4
 800046a:	bf00      	nop
 800046c:	43800000 	.word	0x43800000
 8000470:	08006caf 	.word	0x08006caf

08000474 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8000474:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8000476:	b958      	cbnz	r0, 8000490 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8000478:	f004 f972 	bl	8004760 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <CmdButton+0x20>)
 800047e:	4906      	ldr	r1, [pc, #24]	; (8000498 <CmdButton+0x24>)
 8000480:	2800      	cmp	r0, #0
 8000482:	bf18      	it	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8000488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 800048c:	f000 bf50 	b.w	8001330 <printf>
 8000490:	bd08      	pop	{r3, pc}
 8000492:	bf00      	nop
 8000494:	08006cde 	.word	0x08006cde
 8000498:	08006ce6 	.word	0x08006ce6
 800049c:	08006cef 	.word	0x08006cef

080004a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 80004a2:	2003      	movs	r0, #3
 80004a4:	f004 f8f8 	bl	8004698 <BSP_LED_On>
  /* Infinite loop */
  while(1)
  {
  }
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(int argc, char **argv)
{
 80004ac:	b510      	push	{r4, lr}
 80004ae:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b0:	2301      	movs	r3, #1
 80004b2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80004c2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ca:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80004cc:	f000 ff8a 	bl	80013e4 <HAL_RCC_OscConfig>
 80004d0:	bb10      	cbnz	r0, 8000518 <main+0x6c>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80004d2:	230f      	movs	r3, #15
 80004d4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004dc:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80004de:	4621      	mov	r1, r4
 80004e0:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80004e4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80004e6:	f001 fa67 	bl	80019b8 <HAL_RCC_ClockConfig>
 80004ea:	4604      	mov	r4, r0
 80004ec:	b9a0      	cbnz	r0, 8000518 <main+0x6c>
  uint32_t i;
  uint8_t accelRc, gyroRc;
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 80004ee:	f001 fc2f 	bl	8001d50 <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 80004f2:	f000 fac1 	bl	8000a78 <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <main+0x88>)
 80004f8:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 80004fa:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80004fc:	f004 f898 	bl	8004630 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 8000500:	2c08      	cmp	r4, #8
 8000502:	d1f8      	bne.n	80004f6 <main+0x4a>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000504:	2000      	movs	r0, #0
 8000506:	4601      	mov	r1, r0
 8000508:	f004 f8f0 	bl	80046ec <BSP_PB_Init>

  /* Initialize the Accelerometer */
  accelRc = BSP_ACCELERO_Init();
 800050c:	f004 fa40 	bl	8004990 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8000510:	b120      	cbz	r0, 800051c <main+0x70>
    printf("Failed to initialize acceleromter\n");
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0x8c>)
 8000514:	f004 fdb2 	bl	800507c <puts>
    Error_Handler();
 8000518:	f7ff ffc2 	bl	80004a0 <Error_Handler>
  }

  /* Initialize the Gyroscope */
  gyroRc = BSP_GYRO_Init();
 800051c:	f004 fa58 	bl	80049d0 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8000520:	b108      	cbz	r0, 8000526 <main+0x7a>
    printf("Failed to initialize Gyroscope\n");
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x90>)
 8000524:	e7f6      	b.n	8000514 <main+0x68>
    Error_Handler();
  }

  my_Init();
 8000526:	f7ff fe99 	bl	800025c <my_Init>

  while(1) {
    TaskInput();
 800052a:	f000 f8d7 	bl	80006dc <TaskInput>
    my_Loop();
 800052e:	f7ff fe93 	bl	8000258 <my_Loop>
  }
 8000532:	e7fa      	b.n	800052a <main+0x7e>
 8000534:	08006de6 	.word	0x08006de6
 8000538:	08006d08 	.word	0x08006d08
 800053c:	08006d2a 	.word	0x08006d2a

08000540 <SysTick_Handler>:
  {
  }
}

void SysTick_Handler(void)
{
 8000540:	b508      	push	{r3, lr}
    HAL_IncTick();
 8000542:	f001 fc17 	bl	8001d74 <HAL_IncTick>
    my_Tick();
}
 8000546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void SysTick_Handler(void)
{
    HAL_IncTick();
    my_Tick();
 800054a:	f7ff be7b 	b.w	8000244 <my_Tick>
	...

08000550 <scA2>:
 * PARAMETERS  : int action : take in command for help
 * RETURNS     : void
 */

void scA2(int action)
{
 8000550:	b513      	push	{r0, r1, r4, lr}
 8000552:	4604      	mov	r4, r0
  uint32_t delay;
  uint32_t count;

  //Get first user argument
  int fetch_status;
  fetch_status = fetch_uint32_arg(&count);
 8000554:	a801      	add	r0, sp, #4
 8000556:	f000 f957 	bl	8000808 <fetch_uint32_arg>

  //check for the input
  if(fetch_status) {
 800055a:	b108      	cbz	r0, 8000560 <scA2+0x10>
    // Use a default count value
    count = 0x2;
 800055c:	2302      	movs	r3, #2
 800055e:	9301      	str	r3, [sp, #4]
  }

  //Get seconed user argument
  fetch_status = fetch_uint32_arg(&delay);
 8000560:	4668      	mov	r0, sp
 8000562:	f000 f951 	bl	8000808 <fetch_uint32_arg>

  //Check for arguments input
  if(fetch_status) {
 8000566:	b110      	cbz	r0, 800056e <scA2+0x1e>
    // Use a default delay value
    delay = 0xFFFFFF;
 8000568:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800056c:	9300      	str	r3, [sp, #0]
  }

  if(action==CMD_SHORT_HELP) return;
 800056e:	2c01      	cmp	r4, #1
 8000570:	d00e      	beq.n	8000590 <scA2+0x40>
  if(action==CMD_LONG_HELP) {
 8000572:	2c02      	cmp	r4, #2
 8000574:	d103      	bne.n	800057e <scA2+0x2e>
    printf("LED Demo\n\n"
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <scA2+0x44>)
 8000578:	f004 fd80 	bl	800507c <puts>
	   "Assignment 2 function\n"
	   );

    return;
 800057c:	e008      	b.n	8000590 <scA2+0x40>
  }
  printf("Count: %d Delay: %d\n",(int)count, (int)delay);
 800057e:	9901      	ldr	r1, [sp, #4]
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <scA2+0x48>)
 8000582:	9a00      	ldr	r2, [sp, #0]
 8000584:	f000 fed4 	bl	8001330 <printf>
  sc_led_demo(count,delay);
 8000588:	9801      	ldr	r0, [sp, #4]
 800058a:	9900      	ldr	r1, [sp, #0]
 800058c:	f7ff fe32 	bl	80001f4 <sc_led_demo>
}
 8000590:	b002      	add	sp, #8
 8000592:	bd10      	pop	{r4, pc}
 8000594:	08006dee 	.word	0x08006dee
 8000598:	08006e0e 	.word	0x08006e0e

0800059c <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 800059c:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 800059e:	b940      	cbnz	r0, 80005b2 <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80005a0:	4668      	mov	r0, sp
 80005a2:	f000 f931 	bl	8000808 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80005a6:	a801      	add	r0, sp, #4
 80005a8:	f000 f92e 	bl	8000808 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80005ac:	9b00      	ldr	r3, [sp, #0]
 80005ae:	9a01      	ldr	r2, [sp, #4]
 80005b0:	601a      	str	r2, [r3, #0]
}
 80005b2:	b003      	add	sp, #12
 80005b4:	f85d fb04 	ldr.w	pc, [sp], #4

080005b8 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 80005b8:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 80005ba:	b938      	cbnz	r0, 80005cc <CmdR+0x14>

  fetch_uint32_arg(&addr);
 80005bc:	a801      	add	r0, sp, #4
 80005be:	f000 f923 	bl	8000808 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 80005c2:	9901      	ldr	r1, [sp, #4]
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <CmdR+0x1c>)
 80005c6:	680a      	ldr	r2, [r1, #0]
 80005c8:	f000 feb2 	bl	8001330 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 80005cc:	b003      	add	sp, #12
 80005ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80005d2:	bf00      	nop
 80005d4:	08006e35 	.word	0x08006e35

080005d8 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80005d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005dc:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80005de:	b908      	cbnz	r0, 80005e4 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80005e0:	4833      	ldr	r0, [pc, #204]	; (80006b0 <parse+0xd8>)
 80005e2:	e020      	b.n	8000626 <parse+0x4e>
    return -1;
  }

  if(len==0) {
 80005e4:	b909      	cbnz	r1, 80005ea <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 80005e6:	4833      	ldr	r0, [pc, #204]	; (80006b4 <parse+0xdc>)
 80005e8:	e01d      	b.n	8000626 <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 80005ea:	b122      	cbz	r2, 80005f6 <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <parse+0xe0>)
 80005ee:	1e4c      	subs	r4, r1, #1
 80005f0:	681e      	ldr	r6, [r3, #0]
 80005f2:	4603      	mov	r3, r0
 80005f4:	e00a      	b.n	800060c <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 80005f6:	4831      	ldr	r0, [pc, #196]	; (80006bc <parse+0xe4>)
 80005f8:	e015      	b.n	8000626 <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80005fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80005fe:	2a00      	cmp	r2, #0
 8000600:	d04d      	beq.n	800069e <parse+0xc6>
 8000602:	4432      	add	r2, r6
 8000604:	3c01      	subs	r4, #1
 8000606:	7852      	ldrb	r2, [r2, #1]
 8000608:	0712      	lsls	r2, r2, #28
 800060a:	d54b      	bpl.n	80006a4 <parse+0xcc>
 800060c:	1c67      	adds	r7, r4, #1
 800060e:	4618      	mov	r0, r3
 8000610:	4621      	mov	r1, r4
 8000612:	d1f2      	bne.n	80005fa <parse+0x22>
  if((i==0) || (*buf==0)) {
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d047      	beq.n	80006aa <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 800061a:	4929      	ldr	r1, [pc, #164]	; (80006c0 <parse+0xe8>)
 800061c:	f004 fe60 	bl	80052e0 <strtok>
  if(p==NULL) {
 8000620:	4606      	mov	r6, r0
 8000622:	b910      	cbnz	r0, 800062a <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8000624:	4827      	ldr	r0, [pc, #156]	; (80006c4 <parse+0xec>)
 8000626:	4928      	ldr	r1, [pc, #160]	; (80006c8 <parse+0xf0>)
 8000628:	e037      	b.n	800069a <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 800062a:	4928      	ldr	r1, [pc, #160]	; (80006cc <parse+0xf4>)
 800062c:	f004 fdaa 	bl	8005184 <strcasecmp>
 8000630:	4604      	mov	r4, r0
 8000632:	b9a0      	cbnz	r0, 800065e <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8000634:	4922      	ldr	r1, [pc, #136]	; (80006c0 <parse+0xe8>)
 8000636:	f004 fe53 	bl	80052e0 <strtok>
    if(p == NULL) {
 800063a:	4606      	mov	r6, r0
 800063c:	b990      	cbnz	r0, 8000664 <parse+0x8c>
 800063e:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8000640:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8000644:	b389      	cbz	r1, 80006aa <parse+0xd2>
	if(t->help != NULL) {
 8000646:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800064a:	b11a      	cbz	r2, 8000654 <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800064c:	4820      	ldr	r0, [pc, #128]	; (80006d0 <parse+0xf8>)
 800064e:	f000 fe6f 	bl	8001330 <printf>
 8000652:	e7f4      	b.n	800063e <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8000654:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8000658:	2001      	movs	r0, #1
 800065a:	4798      	blx	r3
 800065c:	e7ef      	b.n	800063e <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 800065e:	f04f 0800 	mov.w	r8, #0
 8000662:	e009      	b.n	8000678 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 8000664:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8000668:	e006      	b.n	8000678 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 800066a:	4630      	mov	r0, r6
 800066c:	4639      	mov	r1, r7
 800066e:	f004 fd89 	bl	8005184 <strcasecmp>
 8000672:	4604      	mov	r4, r0
 8000674:	b120      	cbz	r0, 8000680 <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8000676:	350c      	adds	r5, #12
 8000678:	682f      	ldr	r7, [r5, #0]
 800067a:	2f00      	cmp	r7, #0
 800067c:	d1f5      	bne.n	800066a <parse+0x92>
 800067e:	e00a      	b.n	8000696 <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8000680:	f1b8 0f00 	cmp.w	r8, #0
 8000684:	d003      	beq.n	800068e <parse+0xb6>
	printf("%s:\n",t->cmdname);
 8000686:	4813      	ldr	r0, [pc, #76]	; (80006d4 <parse+0xfc>)
 8000688:	4639      	mov	r1, r7
 800068a:	f000 fe51 	bl	8001330 <printf>
      }
      t->func(arg);
 800068e:	686b      	ldr	r3, [r5, #4]
 8000690:	4640      	mov	r0, r8
 8000692:	4798      	blx	r3
      return 0;
 8000694:	e009      	b.n	80006aa <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8000696:	4810      	ldr	r0, [pc, #64]	; (80006d8 <parse+0x100>)
 8000698:	4631      	mov	r1, r6
 800069a:	f000 fe49 	bl	8001330 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 800069e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80006a2:	e002      	b.n	80006aa <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 80006a4:	2900      	cmp	r1, #0
 80006a6:	d1b8      	bne.n	800061a <parse+0x42>
 80006a8:	e7f9      	b.n	800069e <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 80006aa:	4620      	mov	r0, r4
 80006ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006b0:	08006e80 	.word	0x08006e80
 80006b4:	08006ea1 	.word	0x08006ea1
 80006b8:	200001fc 	.word	0x200001fc
 80006bc:	08006eb1 	.word	0x08006eb1
 80006c0:	08006ed4 	.word	0x08006ed4
 80006c4:	08006edb 	.word	0x08006edb
 80006c8:	08006f64 	.word	0x08006f64
 80006cc:	08006f0b 	.word	0x08006f0b
 80006d0:	08006f10 	.word	0x08006f10
 80006d4:	08006f1c 	.word	0x08006f1c
 80006d8:	08006f21 	.word	0x08006f21

080006dc <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 80006dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 80006de:	4d3f      	ldr	r5, [pc, #252]	; (80007dc <TaskInput+0x100>)
 80006e0:	682b      	ldr	r3, [r5, #0]
 80006e2:	b123      	cbz	r3, 80006ee <TaskInput+0x12>
    printf("ARMON>");
 80006e4:	483e      	ldr	r0, [pc, #248]	; (80007e0 <TaskInput+0x104>)
 80006e6:	f000 fe23 	bl	8001330 <printf>
    printPrompt = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 80006ee:	f10d 0007 	add.w	r0, sp, #7
 80006f2:	f000 fa32 	bl	8000b5a <TerminalReadAnyNonBlock>
  if(rc) {
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d16e      	bne.n	80007d8 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 80006fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d001      	beq.n	8000706 <TaskInput+0x2a>
 8000702:	2b7f      	cmp	r3, #127	; 0x7f
 8000704:	d10d      	bne.n	8000722 <TaskInput+0x46>
 8000706:	4c37      	ldr	r4, [pc, #220]	; (80007e4 <TaskInput+0x108>)
 8000708:	6822      	ldr	r2, [r4, #0]
 800070a:	b152      	cbz	r2, 8000722 <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 800070c:	4836      	ldr	r0, [pc, #216]	; (80007e8 <TaskInput+0x10c>)
 800070e:	f000 fe0f 	bl	8001330 <printf>
    buf--;     /* Then remove it from the buffer */
 8000712:	4a36      	ldr	r2, [pc, #216]	; (80007ec <TaskInput+0x110>)
 8000714:	6813      	ldr	r3, [r2, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	6023      	str	r3, [r4, #0]
 8000720:	e05a      	b.n	80007d8 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 8000722:	2b21      	cmp	r3, #33	; 0x21
 8000724:	d115      	bne.n	8000752 <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <TaskInput+0x114>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d054      	beq.n	80007d8 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 800072e:	4c31      	ldr	r4, [pc, #196]	; (80007f4 <TaskInput+0x118>)
 8000730:	4931      	ldr	r1, [pc, #196]	; (80007f8 <TaskInput+0x11c>)
 8000732:	4620      	mov	r0, r4
 8000734:	f004 fd48 	bl	80051c8 <strcpy>
      printf("%s",input);
 8000738:	4621      	mov	r1, r4
 800073a:	4830      	ldr	r0, [pc, #192]	; (80007fc <TaskInput+0x120>)
 800073c:	f000 fdf8 	bl	8001330 <printf>
      count = strlen(input);
 8000740:	4620      	mov	r0, r4
 8000742:	f004 fd9f 	bl	8005284 <strlen>
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <TaskInput+0x108>)
 8000748:	6018      	str	r0, [r3, #0]
      buf = input+count;
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <TaskInput+0x110>)
 800074c:	4404      	add	r4, r0
 800074e:	601c      	str	r4, [r3, #0]
      goto parseme;
 8000750:	e025      	b.n	800079e <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 8000752:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <TaskInput+0x124>)
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	441a      	add	r2, r3
 8000758:	7852      	ldrb	r2, [r2, #1]
 800075a:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 800075e:	d012      	beq.n	8000786 <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 8000760:	4920      	ldr	r1, [pc, #128]	; (80007e4 <TaskInput+0x108>)
 8000762:	680a      	ldr	r2, [r1, #0]
 8000764:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 8000766:	bf9f      	itttt	ls
 8000768:	4c20      	ldrls	r4, [pc, #128]	; (80007ec <TaskInput+0x110>)
 800076a:	6820      	ldrls	r0, [r4, #0]
 800076c:	7003      	strbls	r3, [r0, #0]
 800076e:	1c45      	addls	r5, r0, #1
      count++;
 8000770:	bf97      	itett	ls
 8000772:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 8000774:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 8000776:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 800077a:	6025      	strls	r5, [r4, #0]
      count++;
 800077c:	bf98      	it	ls
 800077e:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 8000780:	f004 fc40 	bl	8005004 <putchar>
 8000784:	e028      	b.n	80007d8 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8000786:	2b0d      	cmp	r3, #13
 8000788:	d126      	bne.n	80007d8 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800078c:	481a      	ldr	r0, [pc, #104]	; (80007f8 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800078e:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8000790:	4918      	ldr	r1, [pc, #96]	; (80007f4 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8000792:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8000794:	f004 fd18 	bl	80051c8 <strcpy>
    saved = 1;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <TaskInput+0x114>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 800079e:	200a      	movs	r0, #10
 80007a0:	4c12      	ldr	r4, [pc, #72]	; (80007ec <TaskInput+0x110>)
 80007a2:	f004 fc2f 	bl	8005004 <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <TaskInput+0x108>)
 80007a8:	6820      	ldr	r0, [r4, #0]
 80007aa:	681e      	ldr	r6, [r3, #0]
 80007ac:	4602      	mov	r2, r0
 80007ae:	1a31      	subs	r1, r6, r0
 80007b0:	4411      	add	r1, r2
 80007b2:	294f      	cmp	r1, #79	; 0x4f
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	d802      	bhi.n	80007c0 <TaskInput+0xe4>
 80007ba:	f802 1b01 	strb.w	r1, [r2], #1
 80007be:	e7f6      	b.n	80007ae <TaskInput+0xd2>
    count = 0;
 80007c0:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 80007c2:	4e0c      	ldr	r6, [pc, #48]	; (80007f4 <TaskInput+0x118>)
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <TaskInput+0x128>)
 80007c6:	6022      	str	r2, [r4, #0]
 80007c8:	4630      	mov	r0, r6
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	2150      	movs	r1, #80	; 0x50
 80007ce:	f7ff ff03 	bl	80005d8 <parse>
    buf = input;
    printPrompt = 1;
 80007d2:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 80007d4:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 80007d6:	602b      	str	r3, [r5, #0]
  }
}
 80007d8:	b002      	add	sp, #8
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	20000008 	.word	0x20000008
 80007e0:	08006f56 	.word	0x08006f56
 80007e4:	20000a58 	.word	0x20000a58
 80007e8:	08006f5d 	.word	0x08006f5d
 80007ec:	20000004 	.word	0x20000004
 80007f0:	20000a5c 	.word	0x20000a5c
 80007f4:	20000ee8 	.word	0x20000ee8
 80007f8:	20000e98 	.word	0x20000e98
 80007fc:	08006f61 	.word	0x08006f61
 8000800:	200001fc 	.word	0x200001fc
 8000804:	2000000c 	.word	0x2000000c

08000808 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8000808:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800080a:	4908      	ldr	r1, [pc, #32]	; (800082c <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 800080c:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 800080e:	2000      	movs	r0, #0
 8000810:	f004 fd66 	bl	80052e0 <strtok>
  if(p == NULL) {
 8000814:	b130      	cbz	r0, 8000824 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8000816:	2100      	movs	r1, #0
 8000818:	460a      	mov	r2, r1
 800081a:	f004 fe2f 	bl	800547c <strtoul>
 800081e:	6020      	str	r0, [r4, #0]
  return 0;
 8000820:	2000      	movs	r0, #0
 8000822:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8000824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 8000828:	bd10      	pop	{r4, pc}
 800082a:	bf00      	nop
 800082c:	08006ed4 	.word	0x08006ed4

08000830 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8000830:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8000832:	4906      	ldr	r1, [pc, #24]	; (800084c <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8000834:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 8000836:	2000      	movs	r0, #0
 8000838:	f004 fd52 	bl	80052e0 <strtok>
  if(p == NULL) {
 800083c:	b110      	cbz	r0, 8000844 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800083e:	6020      	str	r0, [r4, #0]
  return 0;
 8000840:	2000      	movs	r0, #0
 8000842:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8000844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 8000848:	bd10      	pop	{r4, pc}
 800084a:	bf00      	nop
 800084c:	08006ed4 	.word	0x08006ed4

08000850 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8000850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000854:	4680      	mov	r8, r0
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 800085a:	460d      	mov	r5, r1
 800085c:	2900      	cmp	r1, #0
 800085e:	d044      	beq.n	80008ea <DumpBuffer+0x9a>
 8000860:	ac03      	add	r4, sp, #12
 8000862:	eb00 0901 	add.w	r9, r0, r1
 8000866:	4606      	mov	r6, r0
 8000868:	4627      	mov	r7, r4
 800086a:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 800086e:	454e      	cmp	r6, r9
 8000870:	4431      	add	r1, r6
 8000872:	ebc8 0306 	rsb	r3, r8, r6
 8000876:	d025      	beq.n	80008c4 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 8000878:	f013 0b0f 	ands.w	fp, r3, #15
 800087c:	d103      	bne.n	8000886 <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <DumpBuffer+0xa0>)
 8000880:	f000 fd56 	bl	8001330 <printf>
      bufp = buf;
 8000884:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8000888:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 800088c:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800088e:	481a      	ldr	r0, [pc, #104]	; (80008f8 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8000890:	440b      	add	r3, r1
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8000898:	bf08      	it	eq
 800089a:	222e      	moveq	r2, #46	; 0x2e
 800089c:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 80008a0:	bf14      	ite	ne
 80008a2:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 80008a4:	7022      	strbeq	r2, [r4, #0]
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 80008aa:	f000 fd41 	bl	8001330 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 80008ae:	f1bb 0f0f 	cmp.w	fp, #15
 80008b2:	9b01      	ldr	r3, [sp, #4]
 80008b4:	d1d9      	bne.n	800086a <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 80008ba:	4639      	mov	r1, r7
 80008bc:	480f      	ldr	r0, [pc, #60]	; (80008fc <DumpBuffer+0xac>)
 80008be:	f000 fd37 	bl	8001330 <printf>
 80008c2:	e7d2      	b.n	800086a <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80008c4:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 80008c6:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80008ca:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 80008cc:	d00d      	beq.n	80008ea <DumpBuffer+0x9a>
 80008ce:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80008d0:	f1c5 0310 	rsb	r3, r5, #16
 80008d4:	429c      	cmp	r4, r3
 80008d6:	d204      	bcs.n	80008e2 <DumpBuffer+0x92>
      printf("   ");
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <DumpBuffer+0xb0>)
 80008da:	f000 fd29 	bl	8001330 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80008de:	3401      	adds	r4, #1
 80008e0:	e7f6      	b.n	80008d0 <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <DumpBuffer+0xac>)
 80008e4:	4639      	mov	r1, r7
 80008e6:	f000 fd23 	bl	8001330 <printf>
  }



}
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008f0:	08006f6a 	.word	0x08006f6a
 80008f4:	200001fc 	.word	0x200001fc
 80008f8:	08006f70 	.word	0x08006f70
 80008fc:	08006f76 	.word	0x08006f76
 8000900:	08006f7c 	.word	0x08006f7c

08000904 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8000904:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 8000906:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8000908:	d01d      	beq.n	8000946 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 800090a:	2802      	cmp	r0, #2
 800090c:	4c0e      	ldr	r4, [pc, #56]	; (8000948 <CmdDump+0x44>)
 800090e:	4d0f      	ldr	r5, [pc, #60]	; (800094c <CmdDump+0x48>)
 8000910:	d109      	bne.n	8000926 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <CmdDump+0x4c>)
 8000914:	f004 fbb2 	bl	800507c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8000918:	6821      	ldr	r1, [r4, #0]
 800091a:	682a      	ldr	r2, [r5, #0]
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 800091e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8000922:	f000 bd05 	b.w	8001330 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 8000926:	4620      	mov	r0, r4
 8000928:	f7ff ff6e 	bl	8000808 <fetch_uint32_arg>
  if(rc == 0) {
 800092c:	b910      	cbnz	r0, 8000934 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 800092e:	4628      	mov	r0, r5
 8000930:	f7ff ff6a 	bl	8000808 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 8000934:	6820      	ldr	r0, [r4, #0]
 8000936:	6829      	ldr	r1, [r5, #0]
 8000938:	4602      	mov	r2, r0
 800093a:	f7ff ff89 	bl	8000850 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	682a      	ldr	r2, [r5, #0]
 8000942:	4413      	add	r3, r2
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	20000a60 	.word	0x20000a60
 800094c:	20000010 	.word	0x20000010
 8000950:	08006f80 	.word	0x08006f80
 8000954:	08007118 	.word	0x08007118

08000958 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8000958:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <_sbrk_r+0x2c>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	b90a      	cbnz	r2, 8000964 <_sbrk_r+0xc>
                heap_end = &end;
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <_sbrk_r+0x30>)
 8000962:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8000964:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8000966:	466b      	mov	r3, sp
 8000968:	4401      	add	r1, r0
 800096a:	4299      	cmp	r1, r3
 800096c:	d906      	bls.n	800097c <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800096e:	f004 facd 	bl	8004f0c <__errno>
 8000972:	230c      	movs	r3, #12
 8000974:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8000976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800097a:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 800097c:	4b01      	ldr	r3, [pc, #4]	; (8000984 <_sbrk_r+0x2c>)
 800097e:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8000980:	bd08      	pop	{r3, pc}
 8000982:	bf00      	nop
 8000984:	20000a64 	.word	0x20000a64
 8000988:	20001c84 	.word	0x20001c84

0800098c <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 800098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000990:	4770      	bx	lr

08000992 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	6053      	str	r3, [r2, #4]
        return 0;
}
 8000998:	2000      	movs	r0, #0
 800099a:	4770      	bx	lr

0800099c <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800099c:	2001      	movs	r0, #1
 800099e:	4770      	bx	lr

080009a0 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 80009a0:	2000      	movs	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80009a6:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80009a8:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80009aa:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80009ac:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <USBD_CDC_DataIn+0x78>)
 80009b0:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80009b2:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 80009b4:	d12d      	bne.n	8000a12 <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <USBD_CDC_DataIn+0x7c>)
 80009b8:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 80009bc:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 80009c0:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 80009c2:	fa12 f181 	uxtah	r1, r2, r1
 80009c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80009ca:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 80009ce:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 80009d2:	1a8a      	subs	r2, r1, r2
 80009d4:	b292      	uxth	r2, r2
 80009d6:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 80009da:	2200      	movs	r2, #0
 80009dc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 80009e0:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 80009e4:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 80009e8:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 80009ea:	b289      	uxth	r1, r1
 80009ec:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 80009ee:	b182      	cbz	r2, 8000a12 <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 80009f0:	188b      	adds	r3, r1, r2
 80009f2:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 80009f4:	bf88      	it	hi
 80009f6:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80009fa:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80009fc:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80009fe:	3186      	adds	r1, #134	; 0x86
 8000a00:	462a      	mov	r2, r5
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <USBD_CDC_DataIn+0x78>)
 8000a04:	f003 fb71 	bl	80040ea <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <USBD_CDC_DataIn+0x78>)
 8000a0a:	f003 fb7c 	bl	8004106 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8000a0e:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8000a12:	4630      	mov	r0, r6
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	bf00      	nop
 8000a18:	2000115c 	.word	0x2000115c
 8000a1c:	20000f38 	.word	0x20000f38
 8000a20:	20000a68 	.word	0x20000a68

08000a24 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8000a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8000a28:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8000a2a:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8000a2c:	b9e8      	cbnz	r0, 8000a6a <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8000a32:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8000a34:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8000a38:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 8000a3c:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 8000a40:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 8000a44:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8000a48:	2214      	movs	r2, #20
 8000a4a:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8000a4e:	f004 fa8b 	bl	8004f68 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000a52:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <CmdStats+0x50>)
 8000a56:	f8cd 9000 	str.w	r9, [sp]
 8000a5a:	f8cd 8004 	str.w	r8, [sp, #4]
 8000a5e:	9702      	str	r7, [sp, #8]
 8000a60:	4621      	mov	r1, r4
 8000a62:	4632      	mov	r2, r6
 8000a64:	462b      	mov	r3, r5
 8000a66:	f000 fc63 	bl	8001330 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8000a6a:	b005      	add	sp, #20
 8000a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a70:	20000a68 	.word	0x20000a68
 8000a74:	08007166 	.word	0x08007166

08000a78 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8000a78:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 8000a7a:	4c17      	ldr	r4, [pc, #92]	; (8000ad8 <TerminalInit+0x60>)
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	2100      	movs	r1, #0
 8000a80:	6858      	ldr	r0, [r3, #4]
 8000a82:	2202      	movs	r2, #2
 8000a84:	460b      	mov	r3, r1
 8000a86:	f004 fb01 	bl	800508c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	6898      	ldr	r0, [r3, #8]
 8000a90:	2202      	movs	r2, #2
 8000a92:	460b      	mov	r3, r1
 8000a94:	f004 fafa 	bl	800508c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8000a98:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8000a9a:	4c10      	ldr	r4, [pc, #64]	; (8000adc <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 8000a9c:	68d8      	ldr	r0, [r3, #12]
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	f004 faf2 	bl	800508c <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <TerminalInit+0x68>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f002 ff39 	bl	8003924 <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8000ab2:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <TerminalInit+0x6c>)
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <TerminalInit+0x70>)
 8000ab6:	694a      	ldr	r2, [r1, #20]
 8000ab8:	601a      	str	r2, [r3, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8000aba:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <TerminalInit+0x74>)
 8000abe:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8000ac0:	f002 ff45 	bl	800394e <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	490a      	ldr	r1, [pc, #40]	; (8000af0 <TerminalInit+0x78>)
 8000ac8:	f003 fb08 	bl	80040dc <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000acc:	4620      	mov	r0, r4
#endif

}
 8000ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000ad2:	f002 bf43 	b.w	800395c <USBD_Start>
 8000ad6:	bf00      	nop
 8000ad8:	20000628 	.word	0x20000628
 8000adc:	20000f38 	.word	0x20000f38
 8000ae0:	20000128 	.word	0x20000128
 8000ae4:	2000005c 	.word	0x2000005c
 8000ae8:	2000115c 	.word	0x2000115c
 8000aec:	080009a5 	.word	0x080009a5
 8000af0:	20000168 	.word	0x20000168

08000af4 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
 8000af8:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8000afa:	460e      	mov	r6, r1
 8000afc:	4f0f      	ldr	r7, [pc, #60]	; (8000b3c <TerminalRead+0x48>)
 8000afe:	f44f 7592 	mov.w	r5, #292	; 0x124
 8000b02:	4345      	muls	r5, r0
 8000b04:	197c      	adds	r4, r7, r5
 8000b06:	3480      	adds	r4, #128	; 0x80
 8000b08:	88a3      	ldrh	r3, [r4, #4]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	ebc1 0e06 	rsb	lr, r1, r6
 8000b10:	b183      	cbz	r3, 8000b34 <TerminalRead+0x40>
 8000b12:	4296      	cmp	r6, r2
 8000b14:	d00e      	beq.n	8000b34 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 8000b16:	8863      	ldrh	r3, [r4, #2]
 8000b18:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000b1a:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000b1c:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000b1e:	5d7d      	ldrb	r5, [r7, r5]
 8000b20:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b28:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 8000b2a:	88a3      	ldrh	r3, [r4, #4]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	80a3      	strh	r3, [r4, #4]
 8000b32:	e7e3      	b.n	8000afc <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b34:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8000b36:	4670      	mov	r0, lr
 8000b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000a68 	.word	0x20000a68

08000b40 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8000b40:	4611      	mov	r1, r2
 8000b42:	2000      	movs	r0, #0
 8000b44:	461a      	mov	r2, r3
 8000b46:	f7ff bfd5 	b.w	8000af4 <TerminalRead>

08000b4a <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8000b4a:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f7ff ffd1 	bl	8000af4 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8000b52:	fab0 f080 	clz	r0, r0
 8000b56:	0940      	lsrs	r0, r0, #5
 8000b58:	bd08      	pop	{r3, pc}

08000b5a <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fff3 	bl	8000b4a <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8000b64:	3000      	adds	r0, #0
 8000b66:	bf18      	it	ne
 8000b68:	2001      	movne	r0, #1
 8000b6a:	bd08      	pop	{r3, pc}

08000b6c <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	4e37      	ldr	r6, [pc, #220]	; (8000c4c <TerminalOutputBufferWrite+0xe0>)
 8000b70:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000b74:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000b76:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000b7a:	d906      	bls.n	8000b8a <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000b7c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8000b80:	3201      	adds	r2, #1
 8000b82:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8000b86:	2001      	movs	r0, #1
 8000b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8000b8a:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8000b8e:	fa12 f484 	uxtah	r4, r2, r4
 8000b92:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8000b94:	bf82      	ittt	hi
 8000b96:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8000b9a:	3401      	addhi	r4, #1
 8000b9c:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8000ba0:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000ba4:	fb03 6300 	mla	r3, r3, r0, r6
 8000ba8:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8000bac:	fa12 f484 	uxtah	r4, r2, r4
 8000bb0:	2c7f      	cmp	r4, #127	; 0x7f
 8000bb2:	d8f5      	bhi.n	8000ba0 <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8000bb6:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8000bba:	4414      	add	r4, r2
 8000bbc:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 8000bc0:	440a      	add	r2, r1
  while((len != 0) 
 8000bc2:	4291      	cmp	r1, r2
 8000bc4:	d01c      	beq.n	8000c00 <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8000bc6:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000bca:	fb03 6300 	mla	r3, r3, r0, r6
 8000bce:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8000bd2:	886c      	ldrh	r4, [r5, #2]
 8000bd4:	b2a4      	uxth	r4, r4
 8000bd6:	2c7f      	cmp	r4, #127	; 0x7f
 8000bd8:	d812      	bhi.n	8000c00 <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8000bda:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8000bde:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8000be8:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8000bea:	3401      	adds	r4, #1
 8000bec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8000bf0:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8000bf2:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8000bf6:	886b      	ldrh	r3, [r5, #2]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	806b      	strh	r3, [r5, #2]
 8000bfe:	e7e0      	b.n	8000bc2 <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8000c00:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000c04:	fb03 6300 	mla	r3, r3, r0, r6
 8000c08:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8000c0c:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 8000c0e:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8000c12:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8000c14:	1953      	adds	r3, r2, r5
 8000c16:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8000c18:	bf88      	it	hi
 8000c1a:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 8000c1e:	b990      	cbnz	r0, 8000c46 <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8000c20:	4f0b      	ldr	r7, [pc, #44]	; (8000c50 <TerminalOutputBufferWrite+0xe4>)
 8000c22:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d10d      	bne.n	8000c46 <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000c2a:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8000c2c:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000c2e:	4638      	mov	r0, r7
 8000c30:	3186      	adds	r1, #134	; 0x86
 8000c32:	4622      	mov	r2, r4
 8000c34:	f003 fa59 	bl	80040ea <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8000c38:	4638      	mov	r0, r7
 8000c3a:	f003 fa64 	bl	8004106 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8000c3e:	b910      	cbnz	r0, 8000c46 <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <TerminalOutputBufferWrite+0xe0>)
 8000c42:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c46:	b662      	cpsie	i
 8000c48:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8000c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4c:	20000a68 	.word	0x20000a68
 8000c50:	20000f38 	.word	0x20000f38

08000c54 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	461d      	mov	r5, r3
 8000c58:	4614      	mov	r4, r2
 8000c5a:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8000c5c:	42bc      	cmp	r4, r7
 8000c5e:	4626      	mov	r6, r4
 8000c60:	d00f      	beq.n	8000c82 <_write_r+0x2e>
    if(*ptr == '\n') {
 8000c62:	7833      	ldrb	r3, [r6, #0]
 8000c64:	2b0a      	cmp	r3, #10
 8000c66:	f104 0401 	add.w	r4, r4, #1
 8000c6a:	d104      	bne.n	8000c76 <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	4906      	ldr	r1, [pc, #24]	; (8000c88 <_write_r+0x34>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	f7ff ff7b 	bl	8000b6c <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8000c76:	4631      	mov	r1, r6
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff ff76 	bl	8000b6c <TerminalOutputBufferWrite>
 8000c80:	e7ec      	b.n	8000c5c <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8000c82:	4628      	mov	r0, r5
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c86:	bf00      	nop
 8000c88:	08006ed9 	.word	0x08006ed9

08000c8c <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8000c8e:	4d1a      	ldr	r5, [pc, #104]	; (8000cf8 <TerminalInputBufferWrite+0x6c>)
 8000c90:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000c94:	fb03 5300 	mla	r3, r3, r0, r5
 8000c98:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8000c9c:	fa12 f484 	uxtah	r4, r2, r4
 8000ca0:	2c7f      	cmp	r4, #127	; 0x7f
 8000ca2:	d906      	bls.n	8000cb2 <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8000ca4:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8000ca8:	3201      	adds	r2, #1
 8000caa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8000cae:	2001      	movs	r0, #1
 8000cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8000cb2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8000cb6:	4414      	add	r4, r2
 8000cb8:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8000cbc:	440a      	add	r2, r1
  while(len != 0) {
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	d017      	beq.n	8000cf2 <TerminalInputBufferWrite+0x66>
    head = TerminalState[index].inHead;
 8000cc2:	f44f 7492 	mov.w	r4, #292	; 0x124
 8000cc6:	4344      	muls	r4, r0
 8000cc8:	192f      	adds	r7, r5, r4
    TerminalState[index].inBuffer[head] = *p++;
 8000cca:	f811 eb01 	ldrb.w	lr, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8000cce:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000cd2:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8000cd4:	441c      	add	r4, r3
    TerminalState[index].inHead = TERMINALINCR(head);
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cdc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    TerminalState[index].inCount++;
 8000ce0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8000ce4:	f805 e004 	strb.w	lr, [r5, r4]
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8000cf0:	e7e5      	b.n	8000cbe <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 8000cf2:	2000      	movs	r0, #0
}
 8000cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000a68 	.word	0x20000a68

08000cfc <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8000cfc:	4801      	ldr	r0, [pc, #4]	; (8000d04 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000cfe:	f001 bdac 	b.w	800285a <HAL_PCD_IRQHandler>
 8000d02:	bf00      	nop
 8000d04:	20001160 	.word	0x20001160

08000d08 <DecodeReadRegister>:
#include "decoder.h"


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	460b      	mov	r3, r1
  uint32_t address, val;

  if(p == NULL) return 0;
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	b1b0      	cbz	r0, 8000d3e <DecodeReadRegister+0x36>
  if(r == NULL) return 0;
 8000d10:	b1b1      	cbz	r1, 8000d40 <DecodeReadRegister+0x38>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000d12:	8888      	ldrh	r0, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000d14:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000d16:	6862      	ldr	r2, [r4, #4]

  /* read register according to size */
  switch(r->size) {
 8000d18:	2910      	cmp	r1, #16
 8000d1a:	d005      	beq.n	8000d28 <DecodeReadRegister+0x20>
 8000d1c:	2920      	cmp	r1, #32
 8000d1e:	d005      	beq.n	8000d2c <DecodeReadRegister+0x24>
 8000d20:	2908      	cmp	r1, #8
 8000d22:	d105      	bne.n	8000d30 <DecodeReadRegister+0x28>
  case 8:
    val = *(uint8_t *)address;
 8000d24:	5c80      	ldrb	r0, [r0, r2]
    break;
 8000d26:	bd10      	pop	{r4, pc}
  case 16:
    val = *(uint16_t *)address;
 8000d28:	5a80      	ldrh	r0, [r0, r2]
    break;  
 8000d2a:	bd10      	pop	{r4, pc}
  case 32:
    val = *(uint32_t *)address;
 8000d2c:	5880      	ldr	r0, [r0, r2]
    break;
 8000d2e:	bd10      	pop	{r4, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <DecodeReadRegister+0x3c>)
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	f000 fafb 	bl	8001330 <printf>
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 0;
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	bd10      	pop	{r4, pc}
 8000d3e:	bd10      	pop	{r4, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8000d40:	4608      	mov	r0, r1
	   r->name,
	   p->name);
    return 0;
  }
  return val;
}
 8000d42:	bd10      	pop	{r4, pc}
 8000d44:	08007210 	.word	0x08007210

08000d48 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	460b      	mov	r3, r1
  uint32_t address;

  if(p == NULL) return 1;
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	b1a8      	cbz	r0, 8000d7c <DecodeWriteRegister+0x34>
  if(r == NULL) return 1;
 8000d50:	b1a1      	cbz	r1, 8000d7c <DecodeWriteRegister+0x34>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000d52:	888d      	ldrh	r5, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000d54:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000d56:	6840      	ldr	r0, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8000d58:	2910      	cmp	r1, #16
 8000d5a:	d005      	beq.n	8000d68 <DecodeWriteRegister+0x20>
 8000d5c:	2920      	cmp	r1, #32
 8000d5e:	d005      	beq.n	8000d6c <DecodeWriteRegister+0x24>
 8000d60:	2908      	cmp	r1, #8
 8000d62:	d106      	bne.n	8000d72 <DecodeWriteRegister+0x2a>
  case 8:
    *(uint8_t *)address = val;
 8000d64:	542a      	strb	r2, [r5, r0]
 8000d66:	e002      	b.n	8000d6e <DecodeWriteRegister+0x26>
    break;
  case 16:
    *(uint16_t *)address = val;
 8000d68:	522a      	strh	r2, [r5, r0]
 8000d6a:	e000      	b.n	8000d6e <DecodeWriteRegister+0x26>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8000d6c:	502a      	str	r2, [r5, r0]
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
 8000d6e:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8000d70:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DecodeWriteRegister+0x38>)
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f000 fada 	bl	8001330 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8000d7c:	2001      	movs	r0, #1
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
}
 8000d7e:	bd38      	pop	{r3, r4, r5, pc}
 8000d80:	08007210 	.word	0x08007210

08000d84 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8000d84:	b530      	push	{r4, r5, lr}
 8000d86:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8000d88:	b198      	cbz	r0, 8000db2 <DecodeField+0x2e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000d8a:	7944      	ldrb	r4, [r0, #5]
 8000d8c:	7905      	ldrb	r5, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <DecodeField+0x34>)
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	40a2      	lsls	r2, r4
 8000d94:	40e9      	lsrs	r1, r5
 8000d96:	3a01      	subs	r2, #1
 8000d98:	400a      	ands	r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000d9a:	6801      	ldr	r1, [r0, #0]
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <DecodeField+0x38>)
 8000d9e:	9400      	str	r4, [sp, #0]
 8000da0:	2c01      	cmp	r4, #1
 8000da2:	bf98      	it	ls
 8000da4:	4603      	movls	r3, r0
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	9502      	str	r5, [sp, #8]
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <DecodeField+0x3c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	f000 fabf 	bl	8001330 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8000db2:	b005      	add	sp, #20
 8000db4:	bd30      	pop	{r4, r5, pc}
 8000db6:	bf00      	nop
 8000db8:	08007244 	.word	0x08007244
 8000dbc:	0800724a 	.word	0x0800724a
 8000dc0:	08007250 	.word	0x08007250

08000dc4 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8000dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dc6:	4616      	mov	r6, r2
 8000dc8:	461d      	mov	r5, r3
  Field_t const *f;
  
  if(r == NULL) return;
 8000dca:	4604      	mov	r4, r0
 8000dcc:	b1d8      	cbz	r0, 8000e06 <DecodeRegister+0x42>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000dce:	7983      	ldrb	r3, [r0, #6]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	8883      	ldrh	r3, [r0, #4]
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <DecodeRegister+0x48>)
	 r->name,
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8000dd6:	4419      	add	r1, r3
  Field_t const *f;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000dd8:	9101      	str	r1, [sp, #4]
 8000dda:	6821      	ldr	r1, [r4, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	f000 faa7 	bl	8001330 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8000de2:	68a4      	ldr	r4, [r4, #8]
 8000de4:	b144      	cbz	r4, 8000df8 <DecodeRegister+0x34>
 8000de6:	b175      	cbz	r5, 8000e06 <DecodeRegister+0x42>
    for(f = r->fields; f->name != NULL; f++) {
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	b133      	cbz	r3, 8000dfa <DecodeRegister+0x36>
      DecodeField(f,val);
 8000dec:	4620      	mov	r0, r4
 8000dee:	4631      	mov	r1, r6
 8000df0:	f7ff ffc8 	bl	8000d84 <DecodeField>
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    for(f = r->fields; f->name != NULL; f++) {
 8000df4:	3408      	adds	r4, #8
 8000df6:	e7f7      	b.n	8000de8 <DecodeRegister+0x24>
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
 8000df8:	b12d      	cbz	r5, 8000e06 <DecodeRegister+0x42>
    printf("\n");
 8000dfa:	200a      	movs	r0, #10
  }

}
 8000dfc:	b002      	add	sp, #8
 8000dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    for(f = r->fields; f->name != NULL; f++) {
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
    printf("\n");
 8000e02:	f004 b8ff 	b.w	8005004 <putchar>
  }

}
 8000e06:	b002      	add	sp, #8
 8000e08:	bd70      	pop	{r4, r5, r6, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08007279 	.word	0x08007279

08000e10 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;

  if(p == NULL) return;
 8000e14:	4605      	mov	r5, r0
 8000e16:	b1a8      	cbz	r0, 8000e44 <DecodePeripheral+0x34>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <DecodePeripheral+0x38>)
 8000e1a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000e1e:	f000 fa87 	bl	8001330 <printf>
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8000e22:	68ac      	ldr	r4, [r5, #8]
 8000e24:	b904      	cbnz	r4, 8000e28 <DecodePeripheral+0x18>
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
    for(r = p->registers; r->name != NULL; r++) {
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	b15b      	cbz	r3, 8000e44 <DecodePeripheral+0x34>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f7ff ff6a 	bl	8000d08 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000e34:	6869      	ldr	r1, [r5, #4]

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000e36:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000e38:	4633      	mov	r3, r6
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff ffc2 	bl	8000dc4 <DecodeRegister>
  printf("Peripheral %-13s: Base address: 0x%08x\n",
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
 8000e40:	340c      	adds	r4, #12
 8000e42:	e7f1      	b.n	8000e28 <DecodePeripheral+0x18>
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
 8000e46:	bf00      	nop
 8000e48:	080072b4 	.word	0x080072b4

08000e4c <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8000e50:	2009      	movs	r0, #9
 8000e52:	f004 f8d7 	bl	8005004 <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8000e56:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 8000e58:	6829      	ldr	r1, [r5, #0]
 8000e5a:	b189      	cbz	r1, 8000e80 <DecodePrintPeripherals+0x34>
    col += printf("%s",p->name);
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <DecodePrintPeripherals+0x38>)
 8000e5e:	f000 fa67 	bl	8001330 <printf>
    if((p+1)->name != NULL) {
 8000e62:	68eb      	ldr	r3, [r5, #12]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
 8000e64:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8000e66:	b14b      	cbz	r3, 8000e7c <DecodePrintPeripherals+0x30>
      col += printf(", ");
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <DecodePrintPeripherals+0x3c>)
 8000e6a:	f000 fa61 	bl	8001330 <printf>
 8000e6e:	4404      	add	r4, r0
      if(col > 70) {
 8000e70:	2c46      	cmp	r4, #70	; 0x46
 8000e72:	d903      	bls.n	8000e7c <DecodePrintPeripherals+0x30>
	col = 8;
	printf("\n\t");
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <DecodePrintPeripherals+0x40>)
 8000e76:	f000 fa5b 	bl	8001330 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000e7a:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 8000e7c:	350c      	adds	r5, #12
 8000e7e:	e7eb      	b.n	8000e58 <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8000e80:	bd38      	pop	{r3, r4, r5, pc}
 8000e82:	bf00      	nop
 8000e84:	08006f61 	.word	0x08006f61
 8000e88:	0800724d 	.word	0x0800724d
 8000e8c:	080072dc 	.word	0x080072dc

08000e90 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r) {
 8000e90:	b538      	push	{r3, r4, r5, lr}
 8000e92:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8000e94:	2009      	movs	r0, #9
 8000e96:	f004 f8b5 	bl	8005004 <putchar>
  }
}

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
 8000e9a:	2408      	movs	r4, #8
  printf("\t");
  for(; r->name != NULL; r++) {
 8000e9c:	6829      	ldr	r1, [r5, #0]
 8000e9e:	b199      	cbz	r1, 8000ec8 <DecodePrintRegisters+0x38>
    col += printf("%s",r->name);
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <DecodePrintRegisters+0x3c>)
 8000ea2:	f000 fa45 	bl	8001330 <printf>
    if((r+1)->name != NULL) {
 8000ea6:	68eb      	ldr	r3, [r5, #12]
void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
 8000ea8:	4420      	add	r0, r4
 8000eaa:	b2c4      	uxtb	r4, r0
    if((r+1)->name != NULL) {
 8000eac:	b153      	cbz	r3, 8000ec4 <DecodePrintRegisters+0x34>
      col += printf(", ");
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <DecodePrintRegisters+0x40>)
 8000eb0:	f000 fa3e 	bl	8001330 <printf>
 8000eb4:	4420      	add	r0, r4
 8000eb6:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8000eb8:	2c46      	cmp	r4, #70	; 0x46
 8000eba:	d903      	bls.n	8000ec4 <DecodePrintRegisters+0x34>
	col = 8;
	printf("\n\t");
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <DecodePrintRegisters+0x44>)
 8000ebe:	f000 fa37 	bl	8001330 <printf>
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
    if((r+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000ec2:	2408      	movs	r4, #8

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
 8000ec4:	350c      	adds	r5, #12
 8000ec6:	e7e9      	b.n	8000e9c <DecodePrintRegisters+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	bf00      	nop
 8000ecc:	08006f61 	.word	0x08006f61
 8000ed0:	0800724d 	.word	0x0800724d
 8000ed4:	080072dc 	.word	0x080072dc

08000ed8 <CmdDecode>:

void CmdDecode(int mode)
{
 8000ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000edc:	2802      	cmp	r0, #2
    }
  }
}

void CmdDecode(int mode)
{
 8000ede:	b086      	sub	sp, #24
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000ee0:	d118      	bne.n	8000f14 <CmdDecode+0x3c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8000ee2:	a805      	add	r0, sp, #20
 8000ee4:	f7ff fca4 	bl	8000830 <fetch_string_arg>
    if(rc) {
 8000ee8:	b910      	cbnz	r0, 8000ef0 <CmdDecode+0x18>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000eea:	9e05      	ldr	r6, [sp, #20]
 8000eec:	4c65      	ldr	r4, [pc, #404]	; (8001084 <CmdDecode+0x1ac>)
 8000eee:	e00d      	b.n	8000f0c <CmdDecode+0x34>
  if(mode == CMD_LONG_HELP) {
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
    if(rc) {
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8000ef0:	4865      	ldr	r0, [pc, #404]	; (8001088 <CmdDecode+0x1b0>)
 8000ef2:	f004 f8c3 	bl	800507c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8000ef6:	4863      	ldr	r0, [pc, #396]	; (8001084 <CmdDecode+0x1ac>)
 8000ef8:	f7ff ffa8 	bl	8000e4c <DecodePrintPeripherals>
      printf("\n\n"
 8000efc:	4863      	ldr	r0, [pc, #396]	; (800108c <CmdDecode+0x1b4>)
 8000efe:	e036      	b.n	8000f6e <CmdDecode+0x96>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000f00:	4630      	mov	r0, r6
 8000f02:	4629      	mov	r1, r5
 8000f04:	f004 f93e 	bl	8005184 <strcasecmp>
 8000f08:	b308      	cbz	r0, 8000f4e <CmdDecode+0x76>
	p++;
 8000f0a:	340c      	adds	r4, #12
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000f0c:	6825      	ldr	r5, [r4, #0]
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d1f6      	bne.n	8000f00 <CmdDecode+0x28>
 8000f12:	e014      	b.n	8000f3e <CmdDecode+0x66>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8000f14:	a802      	add	r0, sp, #8
 8000f16:	f7ff fc8b 	bl	8000830 <fetch_string_arg>
  if(rc) {
 8000f1a:	b910      	cbnz	r0, 8000f22 <CmdDecode+0x4a>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000f1c:	9e02      	ldr	r6, [sp, #8]
 8000f1e:	4c59      	ldr	r4, [pc, #356]	; (8001084 <CmdDecode+0x1ac>)
 8000f20:	e009      	b.n	8000f36 <CmdDecode+0x5e>
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
  if(rc) {
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8000f22:	485b      	ldr	r0, [pc, #364]	; (8001090 <CmdDecode+0x1b8>)
 8000f24:	f004 f8aa 	bl	800507c <puts>
 8000f28:	e01d      	b.n	8000f66 <CmdDecode+0x8e>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	f004 f92a 	bl	8005184 <strcasecmp>
 8000f30:	4605      	mov	r5, r0
 8000f32:	b1f8      	cbz	r0, 8000f74 <CmdDecode+0x9c>
    p++;
 8000f34:	340c      	adds	r4, #12
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000f36:	6821      	ldr	r1, [r4, #0]
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d1f6      	bne.n	8000f2a <CmdDecode+0x52>
 8000f3c:	e00f      	b.n	8000f5e <CmdDecode+0x86>
	p++;
      }

      if(p->name == NULL) {
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8000f3e:	4631      	mov	r1, r6
 8000f40:	4854      	ldr	r0, [pc, #336]	; (8001094 <CmdDecode+0x1bc>)
 8000f42:	f000 f9f5 	bl	8001330 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
 8000f46:	484f      	ldr	r0, [pc, #316]	; (8001084 <CmdDecode+0x1ac>)
 8000f48:	f7ff ff80 	bl	8000e4c <DecodePrintPeripherals>
	return;
 8000f4c:	e097      	b.n	800107e <CmdDecode+0x1a6>
      }
      printf("Valid registers for peripheral %s:\n"
 8000f4e:	4852      	ldr	r0, [pc, #328]	; (8001098 <CmdDecode+0x1c0>)
 8000f50:	4629      	mov	r1, r5
 8000f52:	f000 f9ed 	bl	8001330 <printf>
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8000f56:	68a0      	ldr	r0, [r4, #8]
 8000f58:	f7ff ff9a 	bl	8000e90 <DecodePrintRegisters>
 8000f5c:	e006      	b.n	8000f6c <CmdDecode+0x94>
    p++;
  }

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8000f5e:	484f      	ldr	r0, [pc, #316]	; (800109c <CmdDecode+0x1c4>)
 8000f60:	4631      	mov	r1, r6
 8000f62:	f000 f9e5 	bl	8001330 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 8000f66:	4847      	ldr	r0, [pc, #284]	; (8001084 <CmdDecode+0x1ac>)
 8000f68:	f7ff ff70 	bl	8000e4c <DecodePrintPeripherals>
    printf("\n\n");
 8000f6c:	484c      	ldr	r0, [pc, #304]	; (80010a0 <CmdDecode+0x1c8>)
 8000f6e:	f004 f885 	bl	800507c <puts>
    return;
 8000f72:	e084      	b.n	800107e <CmdDecode+0x1a6>
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8000f74:	a803      	add	r0, sp, #12
 8000f76:	f7ff fc5b 	bl	8000830 <fetch_string_arg>
  if(rc) {
 8000f7a:	b110      	cbz	r0, 8000f82 <CmdDecode+0xaa>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	4629      	mov	r1, r5
 8000f80:	e00f      	b.n	8000fa2 <CmdDecode+0xca>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8000f82:	68a5      	ldr	r5, [r4, #8]
  while((r->name != NULL) && strcasecmp(rname,r->name)) {
 8000f84:	9e03      	ldr	r6, [sp, #12]
 8000f86:	6829      	ldr	r1, [r5, #0]
 8000f88:	4630      	mov	r0, r6
 8000f8a:	b121      	cbz	r1, 8000f96 <CmdDecode+0xbe>
 8000f8c:	f004 f8fa 	bl	8005184 <strcasecmp>
 8000f90:	b150      	cbz	r0, 8000fa8 <CmdDecode+0xd0>
    r++;
 8000f92:	350c      	adds	r5, #12
 8000f94:	e7f7      	b.n	8000f86 <CmdDecode+0xae>
  }

  if(r->name == NULL) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8000f96:	4943      	ldr	r1, [pc, #268]	; (80010a4 <CmdDecode+0x1cc>)
 8000f98:	f004 f8f4 	bl	8005184 <strcasecmp>
 8000f9c:	bb08      	cbnz	r0, 8000fe2 <CmdDecode+0x10a>
      DecodePeripheral(p,1);
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	f7ff ff35 	bl	8000e10 <DecodePeripheral>
      return;
 8000fa6:	e06a      	b.n	800107e <CmdDecode+0x1a6>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8000fa8:	a804      	add	r0, sp, #16
 8000faa:	f7ff fc41 	bl	8000830 <fetch_string_arg>
  if(rc == 0) {
 8000fae:	b960      	cbnz	r0, 8000fca <CmdDecode+0xf2>
    /* There was something... see if it matches a field name */
    f = r->fields;
 8000fb0:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
 8000fb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8000fb6:	6837      	ldr	r7, [r6, #0]
 8000fb8:	2f00      	cmp	r7, #0
 8000fba:	d043      	beq.n	8001044 <CmdDecode+0x16c>
 8000fbc:	4640      	mov	r0, r8
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	f004 f8e0 	bl	8005184 <strcasecmp>
 8000fc4:	b198      	cbz	r0, 8000fee <CmdDecode+0x116>
      f++;
 8000fc6:	3608      	adds	r6, #8
 8000fc8:	e7f5      	b.n	8000fb6 <CmdDecode+0xde>
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000fca:	4629      	mov	r1, r5
 8000fcc:	4620      	mov	r0, r4
 8000fce:	f7ff fe9b 	bl	8000d08 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8000fd2:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000fd4:	9005      	str	r0, [sp, #20]
 8000fd6:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fef2 	bl	8000dc4 <DecodeRegister>
 8000fe0:	e04d      	b.n	800107e <CmdDecode+0x1a6>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	4830      	ldr	r0, [pc, #192]	; (80010a8 <CmdDecode+0x1d0>)
 8000fe8:	f000 f9a2 	bl	8001330 <printf>
 8000fec:	e7b3      	b.n	8000f56 <CmdDecode+0x7e>
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
      f++;
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8000fee:	a805      	add	r0, sp, #20
 8000ff0:	f7ff fc0a 	bl	8000808 <fetch_uint32_arg>
      if(rc) {
 8000ff4:	b110      	cbz	r0, 8000ffc <CmdDecode+0x124>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8000ff6:	482d      	ldr	r0, [pc, #180]	; (80010ac <CmdDecode+0x1d4>)
 8000ff8:	6829      	ldr	r1, [r5, #0]
 8000ffa:	e032      	b.n	8001062 <CmdDecode+0x18a>
	       r->name);
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	4620      	mov	r0, r4
 8001000:	f7ff fe82 	bl	8000d08 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 8001004:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 8001006:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 800100a:	9905      	ldr	r1, [sp, #20]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 800100c:	2301      	movs	r3, #1
 800100e:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 8001010:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8001014:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8001016:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 800101a:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 800101c:	400b      	ands	r3, r1
 800101e:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8001022:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 8001026:	4629      	mov	r1, r5
 8001028:	431a      	orrs	r2, r3
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff fe8c 	bl	8000d48 <DecodeWriteRegister>
      printf("%s.%s.%s (%d) -> (%d)\n",
 8001030:	9b05      	ldr	r3, [sp, #20]
 8001032:	9700      	str	r7, [sp, #0]
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	6821      	ldr	r1, [r4, #0]
 8001038:	682a      	ldr	r2, [r5, #0]
 800103a:	6833      	ldr	r3, [r6, #0]
 800103c:	481c      	ldr	r0, [pc, #112]	; (80010b0 <CmdDecode+0x1d8>)
 800103e:	f000 f977 	bl	8001330 <printf>
	     p->name, r->name, f->name,
	     (unsigned)oval, (unsigned)val);
      return;
 8001042:	e01c      	b.n	800107e <CmdDecode+0x1a6>

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8001044:	f003 ff62 	bl	8004f0c <__errno>
    val = strtoul(fname,NULL,0);
 8001048:	4639      	mov	r1, r7
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 800104a:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 800104c:	463a      	mov	r2, r7
 800104e:	9804      	ldr	r0, [sp, #16]
 8001050:	f004 fa14 	bl	800547c <strtoul>
 8001054:	9005      	str	r0, [sp, #20]
    if(errno != 0) {
 8001056:	f003 ff59 	bl	8004f0c <__errno>
 800105a:	6803      	ldr	r3, [r0, #0]
 800105c:	b123      	cbz	r3, 8001068 <CmdDecode+0x190>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 800105e:	4815      	ldr	r0, [pc, #84]	; (80010b4 <CmdDecode+0x1dc>)
 8001060:	9904      	ldr	r1, [sp, #16]
 8001062:	f000 f965 	bl	8001330 <printf>
	     fname);
      return;
 8001066:	e00a      	b.n	800107e <CmdDecode+0x1a6>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8001068:	4629      	mov	r1, r5
 800106a:	9a05      	ldr	r2, [sp, #20]
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff fe6b 	bl	8000d48 <DecodeWriteRegister>
    printf("%s.%s = 0x%08x\n",
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <CmdDecode+0x1e0>)
 8001074:	6821      	ldr	r1, [r4, #0]
 8001076:	682a      	ldr	r2, [r5, #0]
 8001078:	9b05      	ldr	r3, [sp, #20]
 800107a:	f000 f959 	bl	8001330 <printf>
  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

}
 800107e:	b006      	add	sp, #24
 8001080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001084:	08011638 	.word	0x08011638
 8001088:	080072df 	.word	0x080072df
 800108c:	080074ce 	.word	0x080074ce
 8001090:	08007523 	.word	0x08007523
 8001094:	080075ff 	.word	0x080075ff
 8001098:	0800763a 	.word	0x0800763a
 800109c:	0800765f 	.word	0x0800765f
 80010a0:	08007699 	.word	0x08007699
 80010a4:	0800769b 	.word	0x0800769b
 80010a8:	08007552 	.word	0x08007552
 80010ac:	0800758f 	.word	0x0800758f
 80010b0:	080075ba 	.word	0x080075ba
 80010b4:	080075d1 	.word	0x080075d1
 80010b8:	080075ef 	.word	0x080075ef

080010bc <printchar>:
#include "common.h"

int _write_r(void *reent, int fd, char *ptr, size_t len);

static void printchar(char **str, int c)
{
 80010bc:	b507      	push	{r0, r1, r2, lr}
  char output = c;
 80010be:	b2cb      	uxtb	r3, r1
 80010c0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (str) {
 80010c4:	4601      	mov	r1, r0
 80010c6:	b128      	cbz	r0, 80010d4 <printchar+0x18>
    **str = c;
 80010c8:	6802      	ldr	r2, [r0, #0]
 80010ca:	7013      	strb	r3, [r2, #0]
    ++(*str);
 80010cc:	6803      	ldr	r3, [r0, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	6003      	str	r3, [r0, #0]
 80010d2:	e004      	b.n	80010de <printchar+0x22>
  } else {
    _write_r(NULL, 0, &output, 1); 
 80010d4:	f10d 0207 	add.w	r2, sp, #7
 80010d8:	2301      	movs	r3, #1
 80010da:	f7ff fdbb 	bl	8000c54 <_write_r>
  }
}
 80010de:	b003      	add	sp, #12
 80010e0:	f85d fb04 	ldr.w	pc, [sp], #4

080010e4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80010e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80010e8:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80010ea:	4680      	mov	r8, r0
 80010ec:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80010ee:	dd0f      	ble.n	8001110 <prints+0x2c>
 80010f0:	460a      	mov	r2, r1
 80010f2:	1b50      	subs	r0, r2, r5
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80010f4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d1fa      	bne.n	80010f2 <prints+0xe>
		if (len >= width) width = 0;
 80010fc:	42a0      	cmp	r0, r4
		else width -= len;
 80010fe:	bfb4      	ite	lt
 8001100:	1a24      	sublt	r4, r4, r0

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 8001102:	460c      	movge	r4, r1
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
 8001104:	f013 0f02 	tst.w	r3, #2
 8001108:	bf0c      	ite	eq
 800110a:	2720      	moveq	r7, #32
 800110c:	2730      	movne	r7, #48	; 0x30
 800110e:	e000      	b.n	8001112 <prints+0x2e>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8001110:	2720      	movs	r7, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 8001112:	07db      	lsls	r3, r3, #31
 8001114:	d40d      	bmi.n	8001132 <prints+0x4e>
 8001116:	4626      	mov	r6, r4
		for ( ; width > 0; --width) {
 8001118:	2e00      	cmp	r6, #0
 800111a:	dd05      	ble.n	8001128 <prints+0x44>
			printchar (out, padchar);
 800111c:	4640      	mov	r0, r8
 800111e:	4639      	mov	r1, r7
 8001120:	f7ff ffcc 	bl	80010bc <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 8001124:	3e01      	subs	r6, #1
 8001126:	e7f7      	b.n	8001118 <prints+0x34>
 8001128:	ea24 7ae4 	bic.w	sl, r4, r4, asr #31
 800112c:	ebca 0404 	rsb	r4, sl, r4
 8001130:	e001      	b.n	8001136 <prints+0x52>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8001132:	f04f 0a00 	mov.w	sl, #0
 8001136:	46a9      	mov	r9, r5
 8001138:	ebc5 060a 	rsb	r6, r5, sl
 800113c:	444e      	add	r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 800113e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8001142:	b119      	cbz	r1, 800114c <prints+0x68>
		printchar (out, *string);
 8001144:	4640      	mov	r0, r8
 8001146:	f7ff ffb9 	bl	80010bc <printchar>
 800114a:	e7f5      	b.n	8001138 <prints+0x54>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 800114c:	4625      	mov	r5, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 800114e:	2d00      	cmp	r5, #0
 8001150:	dd05      	ble.n	800115e <prints+0x7a>
		printchar (out, padchar);
 8001152:	4640      	mov	r0, r8
 8001154:	4639      	mov	r1, r7
 8001156:	f7ff ffb1 	bl	80010bc <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 800115a:	3d01      	subs	r5, #1
 800115c:	e7f7      	b.n	800114e <prints+0x6a>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 800115e:	2c00      	cmp	r4, #0
 8001160:	bfac      	ite	ge
 8001162:	1930      	addge	r0, r6, r4
 8001164:	1c30      	addlt	r0, r6, #0
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800116a <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800116a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	4607      	mov	r7, r0
 8001172:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8001176:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 8001178:	460d      	mov	r5, r1

	if (i == 0) {
 800117a:	b951      	cbnz	r1, 8001192 <printi+0x28>
		print_buf[0] = '0';
 800117c:	2330      	movs	r3, #48	; 0x30
 800117e:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
 8001182:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 8001186:	464a      	mov	r2, r9
 8001188:	a901      	add	r1, sp, #4
 800118a:	4633      	mov	r3, r6
 800118c:	f7ff ffaa 	bl	80010e4 <prints>
 8001190:	e03b      	b.n	800120a <printi+0xa0>
	}

	if (sg && b == 10 && i < 0) {
 8001192:	b133      	cbz	r3, 80011a2 <printi+0x38>
 8001194:	2a0a      	cmp	r2, #10
 8001196:	d104      	bne.n	80011a2 <printi+0x38>
 8001198:	2900      	cmp	r1, #0
 800119a:	da02      	bge.n	80011a2 <printi+0x38>
		neg = 1;
		u = -i;
 800119c:	424d      	negs	r5, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 800119e:	2001      	movs	r0, #1
 80011a0:	e000      	b.n	80011a4 <printi+0x3a>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80011a2:	2000      	movs	r0, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 80011a4:	f10d 0810 	add.w	r8, sp, #16
 80011a8:	2100      	movs	r1, #0
 80011aa:	f808 1d01 	strb.w	r1, [r8, #-1]!

	while (u) {
 80011ae:	b175      	cbz	r5, 80011ce <printi+0x64>
		t = u % b;
 80011b0:	fbb5 f1f2 	udiv	r1, r5, r2
 80011b4:	fb02 5511 	mls	r5, r2, r1, r5
		if( t >= 10 )
 80011b8:	2d09      	cmp	r5, #9
			t += letbase - '0' - 10;
 80011ba:	bfc2      	ittt	gt
 80011bc:	9b0e      	ldrgt	r3, [sp, #56]	; 0x38
 80011be:	f1a3 043a 	subgt.w	r4, r3, #58	; 0x3a
 80011c2:	192d      	addgt	r5, r5, r4
		*--s = t + '0';
 80011c4:	3530      	adds	r5, #48	; 0x30
 80011c6:	f808 5d01 	strb.w	r5, [r8, #-1]!
		u /= b;
 80011ca:	460d      	mov	r5, r1
 80011cc:	e7ef      	b.n	80011ae <printi+0x44>
 80011ce:	4643      	mov	r3, r8
	}

	if (neg) {
 80011d0:	b198      	cbz	r0, 80011fa <printi+0x90>
		if( width && (pad & PAD_ZERO) ) {
 80011d2:	f1b9 0f00 	cmp.w	r9, #0
 80011d6:	d009      	beq.n	80011ec <printi+0x82>
 80011d8:	07b2      	lsls	r2, r6, #30
 80011da:	d507      	bpl.n	80011ec <printi+0x82>
			printchar (out, '-');
 80011dc:	4638      	mov	r0, r7
 80011de:	212d      	movs	r1, #45	; 0x2d
 80011e0:	f7ff ff6c 	bl	80010bc <printchar>
			++pc;
			--width;
 80011e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 80011e8:	2401      	movs	r4, #1
			--width;
 80011ea:	e007      	b.n	80011fc <printi+0x92>
		}
		else {
			*--s = '-';
 80011ec:	222d      	movs	r2, #45	; 0x2d
 80011ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80011f2:	f803 2c01 	strb.w	r2, [r3, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80011f6:	2400      	movs	r4, #0
 80011f8:	e000      	b.n	80011fc <printi+0x92>
 80011fa:	4604      	mov	r4, r0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 80011fc:	4638      	mov	r0, r7
 80011fe:	4641      	mov	r1, r8
 8001200:	464a      	mov	r2, r9
 8001202:	4633      	mov	r3, r6
 8001204:	f7ff ff6e 	bl	80010e4 <prints>
 8001208:	4420      	add	r0, r4
}
 800120a:	b005      	add	sp, #20
 800120c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001210 <print>:

static int print(char **out, const char *format, va_list args )
{
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	4606      	mov	r6, r0
 8001216:	460d      	mov	r5, r1
 8001218:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 800121a:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 800121c:	782b      	ldrb	r3, [r5, #0]
 800121e:	b123      	cbz	r3, 800122a <print+0x1a>
		if (*format == '%') {
 8001220:	2b25      	cmp	r3, #37	; 0x25
 8001222:	d179      	bne.n	8001318 <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 8001224:	786b      	ldrb	r3, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8001226:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 8001228:	b92b      	cbnz	r3, 8001236 <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 800122a:	2e00      	cmp	r6, #0
 800122c:	d07b      	beq.n	8001326 <print+0x116>
 800122e:	6833      	ldr	r3, [r6, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e077      	b.n	8001326 <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 8001236:	2b25      	cmp	r3, #37	; 0x25
 8001238:	d06d      	beq.n	8001316 <print+0x106>
			if (*format == '-') {
 800123a:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
 800123c:	bf06      	itte	eq
 800123e:	1caa      	addeq	r2, r5, #2
				pad = PAD_RIGHT;
 8001240:	2301      	moveq	r3, #1
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 8001242:	2300      	movne	r3, #0
 8001244:	4610      	mov	r0, r2
 8001246:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8001248:	7801      	ldrb	r1, [r0, #0]
 800124a:	2930      	cmp	r1, #48	; 0x30
 800124c:	d102      	bne.n	8001254 <print+0x44>
				++format;
				pad |= PAD_ZERO;
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	e7f7      	b.n	8001244 <print+0x34>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8001254:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8001256:	7801      	ldrb	r1, [r0, #0]
 8001258:	f1a1 0730 	sub.w	r7, r1, #48	; 0x30
 800125c:	fa5f fe87 	uxtb.w	lr, r7
 8001260:	f1be 0f09 	cmp.w	lr, #9
 8001264:	4605      	mov	r5, r0
 8001266:	f100 0001 	add.w	r0, r0, #1
 800126a:	d803      	bhi.n	8001274 <print+0x64>
				width *= 10;
				width += *format - '0';
 800126c:	210a      	movs	r1, #10
 800126e:	fb01 7202 	mla	r2, r1, r2, r7
 8001272:	e7f0      	b.n	8001256 <print+0x46>
			}
			if( *format == 's' ) {
 8001274:	2973      	cmp	r1, #115	; 0x73
 8001276:	d109      	bne.n	800128c <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 8001278:	9905      	ldr	r1, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 800127a:	4f2c      	ldr	r7, [pc, #176]	; (800132c <print+0x11c>)
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 800127c:	1d08      	adds	r0, r1, #4
 800127e:	6809      	ldr	r1, [r1, #0]
 8001280:	9005      	str	r0, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 8001282:	2900      	cmp	r1, #0
 8001284:	bf08      	it	eq
 8001286:	4639      	moveq	r1, r7
 8001288:	4630      	mov	r0, r6
 800128a:	e041      	b.n	8001310 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 800128c:	2964      	cmp	r1, #100	; 0x64
 800128e:	d10e      	bne.n	80012ae <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8001290:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001294:	9905      	ldr	r1, [sp, #20]
 8001296:	2361      	movs	r3, #97	; 0x61
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	1d08      	adds	r0, r1, #4
 800129c:	6809      	ldr	r1, [r1, #0]
 800129e:	9005      	str	r0, [sp, #20]
 80012a0:	220a      	movs	r2, #10
 80012a2:	4630      	mov	r0, r6
 80012a4:	2301      	movs	r3, #1
 80012a6:	f7ff ff60 	bl	800116a <printi>
 80012aa:	4404      	add	r4, r0
				continue;
 80012ac:	e039      	b.n	8001322 <print+0x112>
			}
			if( *format == 'x' ) {
 80012ae:	2978      	cmp	r1, #120	; 0x78
 80012b0:	d106      	bne.n	80012c0 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 80012b2:	9905      	ldr	r1, [sp, #20]
 80012b4:	1d08      	adds	r0, r1, #4
 80012b6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80012ba:	9005      	str	r0, [sp, #20]
 80012bc:	2361      	movs	r3, #97	; 0x61
 80012be:	e007      	b.n	80012d0 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 80012c0:	2958      	cmp	r1, #88	; 0x58
 80012c2:	d10a      	bne.n	80012da <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 80012c4:	9905      	ldr	r1, [sp, #20]
 80012c6:	1d08      	adds	r0, r1, #4
 80012c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80012cc:	9005      	str	r0, [sp, #20]
 80012ce:	2341      	movs	r3, #65	; 0x41
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	4630      	mov	r0, r6
 80012d4:	6809      	ldr	r1, [r1, #0]
 80012d6:	2210      	movs	r2, #16
 80012d8:	e00b      	b.n	80012f2 <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 80012da:	2975      	cmp	r1, #117	; 0x75
 80012dc:	d10b      	bne.n	80012f6 <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80012de:	e88d 000c 	stmia.w	sp, {r2, r3}
 80012e2:	9905      	ldr	r1, [sp, #20]
 80012e4:	2361      	movs	r3, #97	; 0x61
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	1d08      	adds	r0, r1, #4
 80012ea:	6809      	ldr	r1, [r1, #0]
 80012ec:	9005      	str	r0, [sp, #20]
 80012ee:	220a      	movs	r2, #10
 80012f0:	4630      	mov	r0, r6
 80012f2:	2300      	movs	r3, #0
 80012f4:	e7d7      	b.n	80012a6 <print+0x96>
				continue;
			}
			if( *format == 'c' ) {
 80012f6:	2963      	cmp	r1, #99	; 0x63
 80012f8:	d113      	bne.n	8001322 <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80012fa:	9905      	ldr	r1, [sp, #20]
 80012fc:	1d08      	adds	r0, r1, #4
 80012fe:	6809      	ldr	r1, [r1, #0]
 8001300:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 8001304:	2100      	movs	r1, #0
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8001306:	9005      	str	r0, [sp, #20]
				scr[1] = '\0';
 8001308:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
 800130c:	4630      	mov	r0, r6
 800130e:	a907      	add	r1, sp, #28
 8001310:	f7ff fee8 	bl	80010e4 <prints>
 8001314:	e7c9      	b.n	80012aa <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 8001316:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 8001318:	4630      	mov	r0, r6
 800131a:	7829      	ldrb	r1, [r5, #0]
 800131c:	f7ff fece 	bl	80010bc <printchar>
			++pc;
 8001320:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 8001322:	3501      	adds	r5, #1
 8001324:	e77a      	b.n	800121c <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 8001326:	4620      	mov	r0, r4
 8001328:	b009      	add	sp, #36	; 0x24
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132c:	08017118 	.word	0x08017118

08001330 <printf>:

int printf(const char *format, ...)
{
 8001330:	b40f      	push	{r0, r1, r2, r3}
 8001332:	b507      	push	{r0, r1, r2, lr}
 8001334:	aa04      	add	r2, sp, #16
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
 8001336:	2000      	movs	r0, #0
	va_end( args );
	return pc;
}

int printf(const char *format, ...)
{
 8001338:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
 800133c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
 800133e:	f7ff ff67 	bl	8001210 <print>
}
 8001342:	b003      	add	sp, #12
 8001344:	f85d eb04 	ldr.w	lr, [sp], #4
 8001348:	b004      	add	sp, #16
 800134a:	4770      	bx	lr

0800134c <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 800134c:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 800134e:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 8001350:	d00f      	beq.n	8001372 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8001352:	2802      	cmp	r0, #2
 8001354:	d104      	bne.n	8001360 <CmdTest+0x14>
    printf("testasm\n\n"
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8001358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 800135c:	f003 be8e 	b.w	800507c <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 8001360:	204d      	movs	r0, #77	; 0x4d
 8001362:	f7fe ff63 	bl	800022c <mytest>
}
 8001366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 800136a:	4601      	mov	r1, r0
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <CmdTest+0x2c>)
 800136e:	f7ff bfdf 	b.w	8001330 <printf>
 8001372:	bd08      	pop	{r3, pc}
 8001374:	0801711f 	.word	0x0801711f
 8001378:	08017158 	.word	0x08017158

0800137c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4915      	ldr	r1, [pc, #84]	; (80013d4 <SystemInit+0x58>)
 800137e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001382:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <SystemInit+0x5c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001394:	6858      	ldr	r0, [r3, #4]
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <SystemInit+0x60>)
 8001398:	4002      	ands	r2, r0
 800139a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013a6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013b6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80013b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ba:	f022 020f 	bic.w	r2, r2, #15
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80013c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <SystemInit+0x64>)
 80013c4:	4002      	ands	r2, r0
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013d0:	608b      	str	r3, [r1, #8]
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	f87fc00c 	.word	0xf87fc00c
 80013e0:	ff00fccc 	.word	0xff00fccc

080013e4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	6803      	ldr	r3, [r0, #0]
 80013e8:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ea:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ec:	d404      	bmi.n	80013f8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	079f      	lsls	r7, r3, #30
 80013f2:	f100 80c6 	bmi.w	8001582 <HAL_RCC_OscConfig+0x19e>
 80013f6:	e157      	b.n	80016a8 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013f8:	4dc1      	ldr	r5, [pc, #772]	; (8001700 <HAL_RCC_OscConfig+0x31c>)
 80013fa:	686b      	ldr	r3, [r5, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b04      	cmp	r3, #4
 8001402:	d007      	beq.n	8001414 <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001404:	686b      	ldr	r3, [r5, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800140a:	2b08      	cmp	r3, #8
 800140c:	d127      	bne.n	800145e <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140e:	686b      	ldr	r3, [r5, #4]
 8001410:	03de      	lsls	r6, r3, #15
 8001412:	d524      	bpl.n	800145e <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001418:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800141c:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_RCC_OscConfig+0x4c>
 800142c:	6829      	ldr	r1, [r5, #0]
 800142e:	e004      	b.n	800143a <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001434:	fab2 f282 	clz	r2, r2
 8001438:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	2201      	movs	r2, #1
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	420b      	tst	r3, r1
 8001452:	d0cc      	beq.n	80013ee <HAL_RCC_OscConfig+0xa>
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	4293      	cmp	r3, r2
 8001458:	d0c9      	beq.n	80013ee <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800145e:	4ea9      	ldr	r6, [pc, #676]	; (8001704 <HAL_RCC_OscConfig+0x320>)
 8001460:	2300      	movs	r3, #0
 8001462:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001464:	f000 fc8e 	bl	8001d84 <HAL_GetTick>
 8001468:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800146e:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001472:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	f043 0320 	orr.w	r3, r3, #32
 800147a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0xa2>
 8001482:	6829      	ldr	r1, [r5, #0]
 8001484:	e004      	b.n	8001490 <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800148a:	fab2 f282 	clz	r2, r2
 800148e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001494:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	2201      	movs	r2, #1
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	420b      	tst	r3, r1
 80014a8:	d008      	beq.n	80014bc <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80014aa:	f000 fc6b 	bl	8001d84 <HAL_GetTick>
 80014ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80014b2:	1bc0      	subs	r0, r0, r7
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d9d8      	bls.n	800146a <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 80014b8:	2003      	movs	r0, #3
 80014ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	7923      	ldrb	r3, [r4, #4]
 80014be:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80014c2:	f023 020f 	bic.w	r2, r3, #15
 80014c6:	68a3      	ldr	r3, [r4, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d12b      	bne.n	800152a <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80014d2:	f000 fc57 	bl	8001d84 <HAL_GetTick>
 80014d6:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014dc:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_OscConfig+0x110>
 80014f0:	6829      	ldr	r1, [r5, #0]
 80014f2:	e004      	b.n	80014fe <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	fab2 f282 	clz	r2, r2
 80014fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	2201      	movs	r2, #1
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	420b      	tst	r3, r1
 8001516:	f47f af6a 	bne.w	80013ee <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800151a:	f000 fc33 	bl	8001d84 <HAL_GetTick>
 800151e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001522:	1b80      	subs	r0, r0, r6
 8001524:	4298      	cmp	r0, r3
 8001526:	d9d7      	bls.n	80014d8 <HAL_RCC_OscConfig+0xf4>
 8001528:	e7c6      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800152a:	f000 fc2b 	bl	8001d84 <HAL_GetTick>
 800152e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001534:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001538:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x168>
 8001548:	6829      	ldr	r1, [r5, #0]
 800154a:	e004      	b.n	8001556 <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001550:	fab2 f282 	clz	r2, r2
 8001554:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	2201      	movs	r2, #1
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	420b      	tst	r3, r1
 800156e:	f43f af3e 	beq.w	80013ee <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8001572:	f000 fc07 	bl	8001d84 <HAL_GetTick>
 8001576:	f241 3388 	movw	r3, #5000	; 0x1388
 800157a:	1b80      	subs	r0, r0, r6
 800157c:	4298      	cmp	r0, r3
 800157e:	d9d7      	bls.n	8001530 <HAL_RCC_OscConfig+0x14c>
 8001580:	e79a      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001582:	4d5f      	ldr	r5, [pc, #380]	; (8001700 <HAL_RCC_OscConfig+0x31c>)
 8001584:	686b      	ldr	r3, [r5, #4]
 8001586:	f013 0f0c 	tst.w	r3, #12
 800158a:	d007      	beq.n	800159c <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800158c:	686b      	ldr	r3, [r5, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001592:	2b08      	cmp	r3, #8
 8001594:	d125      	bne.n	80015e2 <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001596:	686b      	ldr	r3, [r5, #4]
 8001598:	03d8      	lsls	r0, r3, #15
 800159a:	d422      	bmi.n	80015e2 <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	2202      	movs	r2, #2
 800159e:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	f043 0320 	orr.w	r3, r3, #32
 80015aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1d2>
 80015b2:	6829      	ldr	r1, [r5, #0]
 80015b4:	e004      	b.n	80015c0 <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	2302      	movs	r3, #2
 80015c2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	2201      	movs	r2, #1
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	420b      	tst	r3, r1
 80015d6:	d030      	beq.n	800163a <HAL_RCC_OscConfig+0x256>
 80015d8:	6923      	ldr	r3, [r4, #16]
 80015da:	4293      	cmp	r3, r2
 80015dc:	f47f af3d 	bne.w	800145a <HAL_RCC_OscConfig+0x76>
 80015e0:	e02b      	b.n	800163a <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e2:	6922      	ldr	r2, [r4, #16]
 80015e4:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x324>)
 80015e6:	b3ba      	cbz	r2, 8001658 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ec:	f000 fbca 	bl	8001d84 <HAL_GetTick>
 80015f0:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	2202      	movs	r2, #2
 80015f4:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x228>
 8001608:	6829      	ldr	r1, [r5, #0]
 800160a:	e004      	b.n	8001616 <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001610:	fab2 f282 	clz	r2, r2
 8001614:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	2302      	movs	r3, #2
 8001618:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	2201      	movs	r2, #1
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	420b      	tst	r3, r1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f000 fba9 	bl	8001d84 <HAL_GetTick>
 8001632:	1b80      	subs	r0, r0, r6
 8001634:	2864      	cmp	r0, #100	; 0x64
 8001636:	d9dc      	bls.n	80015f2 <HAL_RCC_OscConfig+0x20e>
 8001638:	e73e      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	23f8      	movs	r3, #248	; 0xf8
 800163e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	6961      	ldr	r1, [r4, #20]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4099      	lsls	r1, r3
 800164c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001650:	ea41 0302 	orr.w	r3, r1, r2
 8001654:	602b      	str	r3, [r5, #0]
 8001656:	e027      	b.n	80016a8 <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001658:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165a:	f000 fb93 	bl	8001d84 <HAL_GetTick>
 800165e:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	2202      	movs	r2, #2
 8001662:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001666:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x296>
 8001676:	6829      	ldr	r1, [r5, #0]
 8001678:	e004      	b.n	8001684 <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800167e:	fab2 f282 	clz	r2, r2
 8001682:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	2302      	movs	r3, #2
 8001686:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	2201      	movs	r2, #1
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	420b      	tst	r3, r1
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f000 fb72 	bl	8001d84 <HAL_GetTick>
 80016a0:	1b80      	subs	r0, r0, r6
 80016a2:	2864      	cmp	r0, #100	; 0x64
 80016a4:	d9dc      	bls.n	8001660 <HAL_RCC_OscConfig+0x27c>
 80016a6:	e707      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	0719      	lsls	r1, r3, #28
 80016ac:	d404      	bmi.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	075a      	lsls	r2, r3, #29
 80016b2:	f140 80a7 	bpl.w	8001804 <HAL_RCC_OscConfig+0x420>
 80016b6:	e04a      	b.n	800174e <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	69a2      	ldr	r2, [r4, #24]
 80016ba:	4d11      	ldr	r5, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x31c>)
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_OscConfig+0x328>)
 80016be:	b33a      	cbz	r2, 8001710 <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80016c4:	f000 fb5e 	bl	8001d84 <HAL_GetTick>
 80016c8:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	2302      	movs	r3, #2
 80016cc:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	2201      	movs	r2, #1
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	420b      	tst	r3, r1
 80016f2:	d1dc      	bne.n	80016ae <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f000 fb46 	bl	8001d84 <HAL_GetTick>
 80016f8:	1b80      	subs	r0, r0, r6
 80016fa:	2864      	cmp	r0, #100	; 0x64
 80016fc:	d9e5      	bls.n	80016ca <HAL_RCC_OscConfig+0x2e6>
 80016fe:	e6db      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 8001700:	40021000 	.word	0x40021000
 8001704:	40021002 	.word	0x40021002
 8001708:	42420000 	.word	0x42420000
 800170c:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001710:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001712:	f000 fb37 	bl	8001d84 <HAL_GetTick>
 8001716:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	2302      	movs	r3, #2
 800171a:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800171e:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001726:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	2201      	movs	r2, #1
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	420b      	tst	r3, r1
 8001740:	d0b5      	beq.n	80016ae <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8001742:	f000 fb1f 	bl	8001d84 <HAL_GetTick>
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	2864      	cmp	r0, #100	; 0x64
 800174a:	d9e5      	bls.n	8001718 <HAL_RCC_OscConfig+0x334>
 800174c:	e6b4      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 800174e:	4d97      	ldr	r5, [pc, #604]	; (80019ac <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001750:	4a97      	ldr	r2, [pc, #604]	; (80019b0 <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8001752:	69eb      	ldr	r3, [r5, #28]
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001762:	f000 fb0f 	bl	8001d84 <HAL_GetTick>
 8001766:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001768:	4b91      	ldr	r3, [pc, #580]	; (80019b0 <HAL_RCC_OscConfig+0x5cc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	d54d      	bpl.n	800180c <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001770:	6a2b      	ldr	r3, [r5, #32]
 8001772:	f023 0305 	bic.w	r3, r3, #5
 8001776:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001778:	f000 fb04 	bl	8001d84 <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	2302      	movs	r3, #2
 8001780:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001784:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800178c:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001794:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001798:	429a      	cmp	r2, r3
 800179a:	bf0c      	ite	eq
 800179c:	6a29      	ldreq	r1, [r5, #32]
 800179e:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	2201      	movs	r2, #1
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	420b      	tst	r3, r1
 80017b4:	d130      	bne.n	8001818 <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b6:	6a2b      	ldr	r3, [r5, #32]
 80017b8:	68e2      	ldr	r2, [r4, #12]
 80017ba:	f023 0305 	bic.w	r3, r3, #5
 80017be:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017c0:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c2:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017c4:	d138      	bne.n	8001838 <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80017c6:	f000 fadd 	bl	8001d84 <HAL_GetTick>
 80017ca:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	2302      	movs	r3, #2
 80017ce:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80017da:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e2:	f3c2 1242 	ubfx	r2, r2, #5, #3
 80017e6:	429a      	cmp	r2, r3
 80017e8:	bf0c      	ite	eq
 80017ea:	6a29      	ldreq	r1, [r5, #32]
 80017ec:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	2201      	movs	r2, #1
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	420b      	tst	r3, r1
 8001802:	d011      	beq.n	8001828 <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	69e2      	ldr	r2, [r4, #28]
 8001806:	2a00      	cmp	r2, #0
 8001808:	d13d      	bne.n	8001886 <HAL_RCC_OscConfig+0x4a2>
 800180a:	e08b      	b.n	8001924 <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 800180c:	f000 faba 	bl	8001d84 <HAL_GetTick>
 8001810:	1b80      	subs	r0, r0, r6
 8001812:	2864      	cmp	r0, #100	; 0x64
 8001814:	d9a8      	bls.n	8001768 <HAL_RCC_OscConfig+0x384>
 8001816:	e64f      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001818:	f000 fab4 	bl	8001d84 <HAL_GetTick>
 800181c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	4298      	cmp	r0, r3
 8001824:	d9ab      	bls.n	800177e <HAL_RCC_OscConfig+0x39a>
 8001826:	e647      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001828:	f000 faac 	bl	8001d84 <HAL_GetTick>
 800182c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001830:	1b80      	subs	r0, r0, r6
 8001832:	4298      	cmp	r0, r3
 8001834:	d9ca      	bls.n	80017cc <HAL_RCC_OscConfig+0x3e8>
 8001836:	e63f      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001838:	f000 faa4 	bl	8001d84 <HAL_GetTick>
 800183c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	2302      	movs	r3, #2
 8001840:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001844:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800184c:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001854:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001858:	429a      	cmp	r2, r3
 800185a:	bf0c      	ite	eq
 800185c:	6a29      	ldreq	r1, [r5, #32]
 800185e:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	2201      	movs	r2, #1
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	420b      	tst	r3, r1
 8001874:	d0c6      	beq.n	8001804 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001876:	f000 fa85 	bl	8001d84 <HAL_GetTick>
 800187a:	f241 3388 	movw	r3, #5000	; 0x1388
 800187e:	1b80      	subs	r0, r0, r6
 8001880:	4298      	cmp	r0, r3
 8001882:	d9dc      	bls.n	800183e <HAL_RCC_OscConfig+0x45a>
 8001884:	e618      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001886:	4d49      	ldr	r5, [pc, #292]	; (80019ac <HAL_RCC_OscConfig+0x5c8>)
 8001888:	686b      	ldr	r3, [r5, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	f43f ade3 	beq.w	800145a <HAL_RCC_OscConfig+0x76>
 8001894:	4e47      	ldr	r6, [pc, #284]	; (80019b4 <HAL_RCC_OscConfig+0x5d0>)
 8001896:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	d15c      	bne.n	8001958 <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189e:	f000 fa71 	bl	8001d84 <HAL_GetTick>
 80018a2:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a8:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	f043 0320 	orr.w	r3, r3, #32
 80018b4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d135      	bne.n	8001928 <HAL_RCC_OscConfig+0x544>
 80018bc:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	2101      	movs	r1, #1
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	4213      	tst	r3, r2
 80018d6:	d12d      	bne.n	8001934 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d8:	6a20      	ldr	r0, [r4, #32]
 80018da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018dc:	686b      	ldr	r3, [r5, #4]
 80018de:	4302      	orrs	r2, r0
 80018e0:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80018e4:	4313      	orrs	r3, r2
 80018e6:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ea:	f000 fa4b 	bl	8001d84 <HAL_GetTick>
 80018ee:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f4:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11b      	bne.n	8001940 <HAL_RCC_OscConfig+0x55c>
 8001908:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	2201      	movs	r2, #1
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	420b      	tst	r3, r1
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001924:	2000      	movs	r0, #0
 8001926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800192c:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001930:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001932:	e7c4      	b.n	80018be <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f000 fa26 	bl	8001d84 <HAL_GetTick>
 8001938:	1bc0      	subs	r0, r0, r7
 800193a:	2864      	cmp	r0, #100	; 0x64
 800193c:	d9b2      	bls.n	80018a4 <HAL_RCC_OscConfig+0x4c0>
 800193e:	e5bb      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001944:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001948:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800194a:	e7de      	b.n	800190a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f000 fa1a 	bl	8001d84 <HAL_GetTick>
 8001950:	1b00      	subs	r0, r0, r4
 8001952:	2864      	cmp	r0, #100	; 0x64
 8001954:	d9cc      	bls.n	80018f0 <HAL_RCC_OscConfig+0x50c>
 8001956:	e5af      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 8001958:	f000 fa14 	bl	8001d84 <HAL_GetTick>
 800195c:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001962:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001966:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x596>
 8001976:	6829      	ldr	r1, [r5, #0]
 8001978:	e004      	b.n	8001984 <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001988:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	2201      	movs	r2, #1
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	420b      	tst	r3, r1
 800199c:	d0c2      	beq.n	8001924 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f000 f9f1 	bl	8001d84 <HAL_GetTick>
 80019a2:	1b00      	subs	r0, r0, r4
 80019a4:	2864      	cmp	r0, #100	; 0x64
 80019a6:	d9da      	bls.n	800195e <HAL_RCC_OscConfig+0x57a>
 80019a8:	e586      	b.n	80014b8 <HAL_RCC_OscConfig+0xd4>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42420060 	.word	0x42420060

080019b8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019b8:	4ab0      	ldr	r2, [pc, #704]	; (8001c7c <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019bc:	6813      	ldr	r3, [r2, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	4604      	mov	r4, r0
 80019c6:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019c8:	f240 80a9 	bls.w	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	430b      	orrs	r3, r1
 80019d4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	428b      	cmp	r3, r1
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
 80019e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	6801      	ldr	r1, [r0, #0]
 80019e6:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	bf41      	itttt	mi
 80019ea:	48a5      	ldrmi	r0, [pc, #660]	; (8001c80 <HAL_RCC_ClockConfig+0x2c8>)
 80019ec:	6843      	ldrmi	r3, [r0, #4]
 80019ee:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 80019f2:	68a3      	ldrmi	r3, [r4, #8]
 80019f4:	bf44      	itt	mi
 80019f6:	4313      	orrmi	r3, r2
 80019f8:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	07ce      	lsls	r6, r1, #31
 80019fc:	d40b      	bmi.n	8001a16 <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fe:	6821      	ldr	r1, [r4, #0]
 8001a00:	074d      	lsls	r5, r1, #29
 8001a02:	f140 812b 	bpl.w	8001c5c <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a06:	489e      	ldr	r0, [pc, #632]	; (8001c80 <HAL_RCC_ClockConfig+0x2c8>)
 8001a08:	6843      	ldr	r3, [r0, #4]
 8001a0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a0e:	68e3      	ldr	r3, [r4, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	6043      	str	r3, [r0, #4]
 8001a14:	e122      	b.n	8001c5c <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	6862      	ldr	r2, [r4, #4]
 8001a18:	4d99      	ldr	r5, [pc, #612]	; (8001c80 <HAL_RCC_ClockConfig+0x2c8>)
 8001a1a:	2a01      	cmp	r2, #1
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001a22:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x82>
 8001a36:	6828      	ldr	r0, [r5, #0]
 8001a38:	e004      	b.n	8001a44 <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	fab1 f181 	clz	r1, r1
 8001a42:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a48:	e02a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	2a02      	cmp	r2, #2
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xc2>
 8001a4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a52:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	f043 0320 	orr.w	r3, r3, #32
 8001a5e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xb2>
 8001a66:	6828      	ldr	r0, [r5, #0]
 8001a68:	e004      	b.n	8001a74 <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	fab1 f181 	clz	r1, r1
 8001a72:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a78:	e012      	b.n	8001aa0 <HAL_RCC_ClockConfig+0xe8>
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xdc>
 8001a90:	6828      	ldr	r0, [r5, #0]
 8001a92:	e004      	b.n	8001a9e <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	fab1 f181 	clz	r1, r1
 8001a9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	4203      	tst	r3, r0
 8001ab4:	d094      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	686b      	ldr	r3, [r5, #4]
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001ac0:	f000 f960 	bl	8001d84 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001ac8:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	d10d      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001acc:	686b      	ldr	r3, [r5, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d093      	beq.n	80019fe <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad6:	f000 f955 	bl	8001d84 <HAL_GetTick>
 8001ada:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ade:	1b80      	subs	r0, r0, r6
 8001ae0:	4298      	cmp	r0, r3
 8001ae2:	d9f3      	bls.n	8001acc <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d113      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aec:	686b      	ldr	r3, [r5, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d083      	beq.n	80019fe <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f000 f945 	bl	8001d84 <HAL_GetTick>
 8001afa:	f241 3388 	movw	r3, #5000	; 0x1388
 8001afe:	1b80      	subs	r0, r0, r6
 8001b00:	4298      	cmp	r0, r3
 8001b02:	d9f3      	bls.n	8001aec <HAL_RCC_ClockConfig+0x134>
 8001b04:	e7ee      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f000 f93d 	bl	8001d84 <HAL_GetTick>
 8001b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b0e:	1b80      	subs	r0, r0, r6
 8001b10:	4298      	cmp	r0, r3
 8001b12:	d8e7      	bhi.n	8001ae4 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b14:	686b      	ldr	r3, [r5, #4]
 8001b16:	f013 0f0c 	tst.w	r3, #12
 8001b1a:	d1f4      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x14e>
 8001b1c:	e76f      	b.n	80019fe <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1e:	6801      	ldr	r1, [r0, #0]
 8001b20:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b22:	bf41      	itttt	mi
 8001b24:	4856      	ldrmi	r0, [pc, #344]	; (8001c80 <HAL_RCC_ClockConfig+0x2c8>)
 8001b26:	6843      	ldrmi	r3, [r0, #4]
 8001b28:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8001b2c:	68a3      	ldrmi	r3, [r4, #8]
 8001b2e:	bf44      	itt	mi
 8001b30:	4313      	orrmi	r3, r2
 8001b32:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b34:	07ca      	lsls	r2, r1, #31
 8001b36:	d40c      	bmi.n	8001b52 <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4a50      	ldr	r2, [pc, #320]	; (8001c7c <HAL_RCC_ClockConfig+0x2c4>)
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f023 0307 	bic.w	r3, r3, #7
 8001b40:	4333      	orrs	r3, r6
 8001b42:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	42b3      	cmp	r3, r6
 8001b4c:	f47f af48 	bne.w	80019e0 <HAL_RCC_ClockConfig+0x28>
 8001b50:	e755      	b.n	80019fe <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	6862      	ldr	r2, [r4, #4]
 8001b54:	4d4a      	ldr	r5, [pc, #296]	; (8001c80 <HAL_RCC_ClockConfig+0x2c8>)
 8001b56:	2a01      	cmp	r2, #1
 8001b58:	d115      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001b5e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x1be>
 8001b72:	6828      	ldr	r0, [r5, #0]
 8001b74:	e004      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	fab1 f181 	clz	r1, r1
 8001b7e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b84:	e02a      	b.n	8001bdc <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	2a02      	cmp	r2, #2
 8001b88:	d115      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x1fe>
 8001b8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b8e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	f043 0320 	orr.w	r3, r3, #32
 8001b9a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x1ee>
 8001ba2:	6828      	ldr	r0, [r5, #0]
 8001ba4:	e004      	b.n	8001bb0 <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	fab1 f181 	clz	r1, r1
 8001bae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb4:	e012      	b.n	8001bdc <HAL_RCC_ClockConfig+0x224>
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x218>
 8001bcc:	6828      	ldr	r0, [r5, #0]
 8001bce:	e004      	b.n	8001bda <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	fab1 f181 	clz	r1, r1
 8001bd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	2302      	movs	r3, #2
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	2101      	movs	r1, #1
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	4203      	tst	r3, r0
 8001bf0:	f43f aef6 	beq.w	80019e0 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf4:	686b      	ldr	r3, [r5, #4]
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001bfe:	f000 f8c1 	bl	8001d84 <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001c06:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0a:	686b      	ldr	r3, [r5, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d091      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c14:	f000 f8b6 	bl	8001d84 <HAL_GetTick>
 8001c18:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	4298      	cmp	r0, r3
 8001c20:	d9f3      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x252>
 8001c22:	e75f      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d114      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	686b      	ldr	r3, [r5, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d082      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c32:	f000 f8a7 	bl	8001d84 <HAL_GetTick>
 8001c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c3a:	1bc0      	subs	r0, r0, r7
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	d9f3      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x270>
 8001c40:	e750      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c42:	f000 f89f 	bl	8001d84 <HAL_GetTick>
 8001c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c4a:	1bc0      	subs	r0, r0, r7
 8001c4c:	4298      	cmp	r0, r3
 8001c4e:	f63f af49 	bhi.w	8001ae4 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c52:	686b      	ldr	r3, [r5, #4]
 8001c54:	f013 0f0c 	tst.w	r3, #12
 8001c58:	d1f3      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x28a>
 8001c5a:	e76d      	b.n	8001b38 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5e:	bf41      	itttt	mi
 8001c60:	4a07      	ldrmi	r2, [pc, #28]	; (8001c80 <HAL_RCC_ClockConfig+0x2c8>)
 8001c62:	6921      	ldrmi	r1, [r4, #16]
 8001c64:	6853      	ldrmi	r3, [r2, #4]
 8001c66:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 8001c6a:	bf44      	itt	mi
 8001c6c:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 8001c70:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c72:	200f      	movs	r0, #15
 8001c74:	f000 f859 	bl	8001d2a <HAL_InitTick>

  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
}
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8001c84:	4915      	ldr	r1, [pc, #84]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c86:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8001c88:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8a:	f004 030c 	and.w	r3, r4, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d121      	bne.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001c96:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c9e:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001caa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001cac:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	230f      	movs	r3, #15
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cb8:	f001 010f 	and.w	r1, r1, #15
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001cc4:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cc6:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8001cc8:	bf52      	itee	pl
 8001cca:	4807      	ldrpl	r0, [pc, #28]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8001ccc:	4b07      	ldrmi	r3, [pc, #28]	; (8001cec <HAL_RCC_GetSysClockFreq+0x68>)
 8001cce:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8001cd2:	4350      	muls	r0, r2
 8001cd4:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	0801719c 	.word	0x0801719c
 8001ce4:	0801718c 	.word	0x0801718c
 8001ce8:	003d0900 	.word	0x003d0900
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001cf2:	f7ff ffc7 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	23f0      	movs	r3, #240	; 0xf0
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x30>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	40d8      	lsrs	r0, r3
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x34>)
 8001d16:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001d18:	bd08      	pop	{r3, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	0801717c 	.word	0x0801717c
 8001d24:	20000014 	.word	0x20000014

08001d28 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001d28:	4770      	bx	lr

08001d2a <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8001d2a:	b510      	push	{r4, lr}
 8001d2c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d2e:	f7ff ffdf 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d3a:	f000 f885 	bl	8001e48 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d42:	4621      	mov	r1, r4
 8001d44:	2200      	movs	r2, #0
 8001d46:	f000 f843 	bl	8001dd0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	bd10      	pop	{r4, pc}
	...

08001d50 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d52:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f000 f825 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d62:	200f      	movs	r0, #15
 8001d64:	f7ff ffe1 	bl	8001d2a <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	bd08      	pop	{r3, pc}
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001d74:	4a02      	ldr	r2, [pc, #8]	; (8001d80 <HAL_IncTick+0xc>)
 8001d76:	6813      	ldr	r3, [r2, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000b8c 	.word	0x20000b8c

08001d84 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <HAL_GetTick+0x8>)
 8001d86:	6818      	ldr	r0, [r3, #0]
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000b8c 	.word	0x20000b8c

08001d90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001d90:	b513      	push	{r0, r1, r4, lr}
 8001d92:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff6 	bl	8001d84 <HAL_GetTick>
 8001d98:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001d9a:	f7ff fff3 	bl	8001d84 <HAL_GetTick>
 8001d9e:	9b01      	ldr	r3, [sp, #4]
 8001da0:	1b00      	subs	r0, r0, r4
 8001da2:	4298      	cmp	r0, r3
 8001da4:	d3f9      	bcc.n	8001d9a <HAL_Delay+0xa>
  {
  }
}
 8001da6:	b002      	add	sp, #8
 8001da8:	bd10      	pop	{r4, pc}
	...

08001dac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001dae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8001dc0:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8001dc4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001dc8:	60d3      	str	r3, [r2, #12]
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_NVIC_SetPriority+0x58>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8001dda:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8001dde:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8001de0:	2d04      	cmp	r5, #4
 8001de2:	bf28      	it	cs
 8001de4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8001de6:	2c06      	cmp	r4, #6
 8001de8:	bf8c      	ite	hi
 8001dea:	3b03      	subhi	r3, #3
 8001dec:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8001dee:	2401      	movs	r4, #1
 8001df0:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8001df4:	40ac      	lsls	r4, r5
 8001df6:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8001df8:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8001dfa:	4021      	ands	r1, r4
 8001dfc:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8001dfe:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8001e00:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8001e02:	ea42 0201 	orr.w	r2, r2, r1
 8001e06:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001e0a:	bfaf      	iteee	ge
 8001e0c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e10:	f000 000f 	andlt.w	r0, r0, #15
 8001e14:	4b05      	ldrlt	r3, [pc, #20]	; (8001e2c <HAL_NVIC_SetPriority+0x5c>)
 8001e16:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001e18:	bfa5      	ittet	ge
 8001e1a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001e1e:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e20:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001e22:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	e000ed14 	.word	0xe000ed14

08001e30 <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001e30:	0941      	lsrs	r1, r0, #5
 8001e32:	2301      	movs	r3, #1
 8001e34:	f000 001f 	and.w	r0, r0, #31
 8001e38:	4a02      	ldr	r2, [pc, #8]	; (8001e44 <HAL_NVIC_EnableIRQ+0x14>)
 8001e3a:	4083      	lsls	r3, r0
 8001e3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001e48:	3801      	subs	r0, #1
 8001e4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001e4e:	bf3f      	itttt	cc
 8001e50:	4b06      	ldrcc	r3, [pc, #24]	; (8001e6c <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e52:	4a07      	ldrcc	r2, [pc, #28]	; (8001e70 <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001e54:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001e56:	21f0      	movcc	r1, #240	; 0xf0
 8001e58:	bf3f      	itttt	cc
 8001e5a:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001e5e:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e60:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001e62:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e64:	bf34      	ite	cc
 8001e66:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8001e68:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e010 	.word	0xe000e010
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e78:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e80:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8001e84:	4295      	cmp	r5, r2
 8001e86:	f040 80ac 	bne.w	8001fe2 <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001e8a:	684c      	ldr	r4, [r1, #4]
 8001e8c:	f024 0c10 	bic.w	ip, r4, #16
 8001e90:	f1bc 0f02 	cmp.w	ip, #2
 8001e94:	d114      	bne.n	8001ec0 <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001e96:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001e9a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e9e:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001ea2:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ea6:	00b6      	lsls	r6, r6, #2
 8001ea8:	f04f 080f 	mov.w	r8, #15
 8001eac:	fa08 f806 	lsl.w	r8, r8, r6
 8001eb0:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001eb4:	690a      	ldr	r2, [r1, #16]
 8001eb6:	40b2      	lsls	r2, r6
 8001eb8:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8001ebc:	f8ce 2020 	str.w	r2, [lr, #32]
 8001ec0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ec4:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ec8:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ecc:	43d2      	mvns	r2, r2
 8001ece:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ed2:	f004 0603 	and.w	r6, r4, #3
 8001ed6:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eda:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ede:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee2:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8001ee6:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee8:	d811      	bhi.n	8001f0e <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eea:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001eec:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ef0:	68ce      	ldr	r6, [r1, #12]
 8001ef2:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ef6:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8001efa:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efe:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f02:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001f06:	409e      	lsls	r6, r3
 8001f08:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8001f0c:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f0e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f10:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f14:	688a      	ldr	r2, [r1, #8]
 8001f16:	fa02 f60e 	lsl.w	r6, r2, lr
 8001f1a:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8001f1e:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001f20:	00e2      	lsls	r2, r4, #3
 8001f22:	d55e      	bpl.n	8001fe2 <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8001f24:	4e32      	ldr	r6, [pc, #200]	; (8001ff0 <HAL_GPIO_Init+0x17c>)
 8001f26:	69b2      	ldr	r2, [r6, #24]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	61b2      	str	r2, [r6, #24]
 8001f2e:	f023 0603 	bic.w	r6, r3, #3
 8001f32:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001f36:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f3a:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001f3e:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f42:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8001f4c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f50:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8001f54:	d015      	beq.n	8001f82 <HAL_GPIO_Init+0x10e>
 8001f56:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_GPIO_Init+0x180>)
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d014      	beq.n	8001f86 <HAL_GPIO_Init+0x112>
 8001f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f60:	4290      	cmp	r0, r2
 8001f62:	d012      	beq.n	8001f8a <HAL_GPIO_Init+0x116>
 8001f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d010      	beq.n	8001f8e <HAL_GPIO_Init+0x11a>
 8001f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f70:	4290      	cmp	r0, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_GPIO_Init+0x11e>
 8001f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2205      	moveq	r2, #5
 8001f7e:	2206      	movne	r2, #6
 8001f80:	e008      	b.n	8001f94 <HAL_GPIO_Init+0x120>
 8001f82:	2200      	movs	r2, #0
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x120>
 8001f86:	2201      	movs	r2, #1
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x120>
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x120>
 8001f8e:	2203      	movs	r2, #3
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x120>
 8001f92:	2204      	movs	r2, #4
 8001f94:	fa02 f20c 	lsl.w	r2, r2, ip
 8001f98:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f9c:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_GPIO_Init+0x184>)
 8001fa0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8001faa:	bf14      	ite	ne
 8001fac:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001fae:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001fb2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001fb4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 8001fba:	bf14      	ite	ne
 8001fbc:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001fc2:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc4:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8001fca:	bf14      	ite	ne
 8001fcc:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001fce:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001fd2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd6:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	bf54      	ite	pl
 8001fda:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001fde:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001fe0:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	f47f af49 	bne.w	8001e7c <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8001fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ffc:	6903      	ldr	r3, [r0, #16]
 8001ffe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8002000:	bf14      	ite	ne
 8002002:	2001      	movne	r0, #1
 8002004:	2000      	moveq	r0, #0
 8002006:	4770      	bx	lr

08002008 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002008:	b10a      	cbz	r2, 800200e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800200a:	8301      	strh	r1, [r0, #24]
 800200c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800200e:	8341      	strh	r1, [r0, #26]
 8002010:	4770      	bx	lr

08002012 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002012:	6943      	ldr	r3, [r0, #20]
 8002014:	4059      	eors	r1, r3
 8002016:	6141      	str	r1, [r0, #20]
 8002018:	4770      	bx	lr

0800201a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800201a:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800201c:	4604      	mov	r4, r0
 800201e:	2800      	cmp	r0, #0
 8002020:	d046      	beq.n	80020b0 <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8002028:	f002 f898 	bl	800415c <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800202c:	6865      	ldr	r5, [r4, #4]
 800202e:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8002032:	2100      	movs	r1, #0
 8002034:	42a9      	cmp	r1, r5
 8002036:	f102 021c 	add.w	r2, r2, #28
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	d00e      	beq.n	800205e <HAL_PCD_Init+0x44>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002040:	2001      	movs	r0, #1
   hpcd->IN_ep[i].num = i;
 8002042:	f802 1c1d 	strb.w	r1, [r2, #-29]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002046:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800204a:	f802 3c1a 	strb.w	r3, [r2, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 800204e:	f842 3c11 	str.w	r3, [r2, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 8002052:	f842 3c0d 	str.w	r3, [r2, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 8002056:	f842 3c09 	str.w	r3, [r2, #-9]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800205a:	4401      	add	r1, r0
 800205c:	e7ea      	b.n	8002034 <HAL_PCD_Init+0x1a>
 800205e:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002062:	42ab      	cmp	r3, r5
 8002064:	f102 021c 	add.w	r2, r2, #28
 8002068:	f04f 0000 	mov.w	r0, #0
 800206c:	d00d      	beq.n	800208a <HAL_PCD_Init+0x70>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 800206e:	f802 3c1d 	strb.w	r3, [r2, #-29]
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 8002072:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8002076:	f802 0c1a 	strb.w	r0, [r2, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 800207a:	f842 0c11 	str.w	r0, [r2, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 800207e:	f842 0c0d 	str.w	r0, [r2, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 8002082:	f842 0c09 	str.w	r0, [r2, #-9]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002086:	3301      	adds	r3, #1
 8002088:	e7eb      	b.n	8002062 <HAL_PCD_Init+0x48>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002092:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8002096:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 800209a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800209e:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80020a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 80020a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 80020aa:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 80020b2:	bd38      	pop	{r3, r4, r5, pc}

080020b4 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80020b4:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80020b6:	2101      	movs	r1, #1
 80020b8:	f000 ff19 	bl	8002eee <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 80020bc:	2000      	movs	r0, #0
 80020be:	bd08      	pop	{r3, pc}

080020c0 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80020c0:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d00f      	beq.n	80020e8 <HAL_PCD_SetAddress+0x28>
 80020c8:	2301      	movs	r3, #1
 80020ca:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 80020ce:	b921      	cbnz	r1, 80020da <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80020d0:	6803      	ldr	r3, [r0, #0]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80020d8:	e001      	b.n	80020de <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80020da:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80020de:	2300      	movs	r3, #0
 80020e0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 80020e4:	4618      	mov	r0, r3
 80020e6:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80020e8:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 80020ea:	4770      	bx	lr

080020ec <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80020ee:	b2cc      	uxtb	r4, r1
 80020f0:	f014 0f80 	tst.w	r4, #128	; 0x80
 80020f4:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 80020f8:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020fc:	bf15      	itete	ne
 80020fe:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002102:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002106:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002108:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800210a:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800210c:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800210e:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8002110:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8002112:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8002116:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002118:	2b01      	cmp	r3, #1
 800211a:	f000 8181 	beq.w	8002420 <HAL_PCD_EP_Open+0x334>
 800211e:	2301      	movs	r3, #1
 8002120:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8002124:	78cc      	ldrb	r4, [r1, #3]
 8002126:	780a      	ldrb	r2, [r1, #0]
 8002128:	6803      	ldr	r3, [r0, #0]
 800212a:	2c03      	cmp	r4, #3
 800212c:	d82f      	bhi.n	800218e <HAL_PCD_EP_Open+0xa2>
 800212e:	e8df f004 	tbb	[pc, r4]
 8002132:	2202      	.short	0x2202
 8002134:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8002136:	b212      	sxth	r2, r2
 8002138:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800213c:	b2a4      	uxth	r4, r4
 800213e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002142:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002146:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800214a:	e01e      	b.n	800218a <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 800214c:	b212      	sxth	r2, r2
 800214e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002152:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002156:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800215a:	0424      	lsls	r4, r4, #16
 800215c:	0c24      	lsrs	r4, r4, #16
 800215e:	e014      	b.n	800218a <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8002160:	b212      	sxth	r2, r2
 8002162:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002166:	b2a4      	uxth	r4, r4
 8002168:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800216c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002170:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8002174:	e009      	b.n	800218a <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8002176:	b212      	sxth	r2, r2
 8002178:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800217c:	b2a4      	uxth	r4, r4
 800217e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8002182:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002186:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800218a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800218e:	780a      	ldrb	r2, [r1, #0]
 8002190:	b216      	sxth	r6, r2
 8002192:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8002196:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 800219a:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 800219e:	0512      	lsls	r2, r2, #20
 80021a0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80021a4:	0d12      	lsrs	r2, r2, #20
 80021a6:	432a      	orrs	r2, r5
 80021a8:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80021ac:	7a8c      	ldrb	r4, [r1, #10]
 80021ae:	780a      	ldrb	r2, [r1, #0]
 80021b0:	2c00      	cmp	r4, #0
 80021b2:	d175      	bne.n	80022a0 <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 80021b4:	784d      	ldrb	r5, [r1, #1]
 80021b6:	888c      	ldrh	r4, [r1, #4]
 80021b8:	2608      	movs	r6, #8
 80021ba:	b33d      	cbz	r5, 800220c <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80021bc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80021c0:	b2ad      	uxth	r5, r5
 80021c2:	fb16 5202 	smlabb	r2, r6, r2, r5
 80021c6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80021ca:	0864      	lsrs	r4, r4, #1
 80021cc:	0064      	lsls	r4, r4, #1
 80021ce:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80021d2:	780c      	ldrb	r4, [r1, #0]
 80021d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80021d8:	0652      	lsls	r2, r2, #25
 80021da:	d50b      	bpl.n	80021f4 <HAL_PCD_EP_Open+0x108>
 80021dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80021e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021e4:	0512      	lsls	r2, r2, #20
 80021e6:	0d12      	lsrs	r2, r2, #20
 80021e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80021f0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 80021f4:	7809      	ldrb	r1, [r1, #0]
 80021f6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80021fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002202:	0412      	lsls	r2, r2, #16
 8002204:	0c12      	lsrs	r2, r2, #16
 8002206:	f082 0220 	eor.w	r2, r2, #32
 800220a:	e0fe      	b.n	800240a <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800220c:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8002210:	b2bf      	uxth	r7, r7
 8002212:	fb16 7202 	smlabb	r2, r6, r2, r7
 8002216:	3204      	adds	r2, #4
 8002218:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 800221c:	0864      	lsrs	r4, r4, #1
 800221e:	0064      	lsls	r4, r4, #1
 8002220:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8002224:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002228:	780c      	ldrb	r4, [r1, #0]
 800222a:	b292      	uxth	r2, r2
 800222c:	fb16 2204 	smlabb	r2, r6, r4, r2
 8002230:	68ce      	ldr	r6, [r1, #12]
 8002232:	2e3e      	cmp	r6, #62	; 0x3e
 8002234:	f102 0206 	add.w	r2, r2, #6
 8002238:	d90b      	bls.n	8002252 <HAL_PCD_EP_Open+0x166>
 800223a:	f3c6 144f 	ubfx	r4, r6, #5, #16
 800223e:	06f7      	lsls	r7, r6, #27
 8002240:	bf04      	itt	eq
 8002242:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8002246:	b2a4      	uxtheq	r4, r4
 8002248:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 800224c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002250:	e006      	b.n	8002260 <HAL_PCD_EP_Open+0x174>
 8002252:	f3c6 044f 	ubfx	r4, r6, #1, #16
 8002256:	07f6      	lsls	r6, r6, #31
 8002258:	bf44      	itt	mi
 800225a:	3401      	addmi	r4, #1
 800225c:	b2a4      	uxthmi	r4, r4
 800225e:	02a4      	lsls	r4, r4, #10
 8002260:	b2a4      	uxth	r4, r4
 8002262:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002266:	780c      	ldrb	r4, [r1, #0]
 8002268:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800226c:	0452      	lsls	r2, r2, #17
 800226e:	d50b      	bpl.n	8002288 <HAL_PCD_EP_Open+0x19c>
 8002270:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002274:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002278:	0512      	lsls	r2, r2, #20
 800227a:	0d12      	lsrs	r2, r2, #20
 800227c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002284:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002288:	7809      	ldrb	r1, [r1, #0]
 800228a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800228e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002292:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002296:	0412      	lsls	r2, r2, #16
 8002298:	0c12      	lsrs	r2, r2, #16
 800229a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800229e:	e0b4      	b.n	800240a <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80022a0:	b212      	sxth	r2, r2
 80022a2:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80022a6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80022aa:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 80022ae:	0524      	lsls	r4, r4, #20
 80022b0:	0d24      	lsrs	r4, r4, #20
 80022b2:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80022b6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80022ba:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80022be:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80022c2:	780c      	ldrb	r4, [r1, #0]
 80022c4:	2208      	movs	r2, #8
 80022c6:	b2b6      	uxth	r6, r6
 80022c8:	fb12 6604 	smlabb	r6, r2, r4, r6
 80022cc:	88cc      	ldrh	r4, [r1, #6]
 80022ce:	0864      	lsrs	r4, r4, #1
 80022d0:	0064      	lsls	r4, r4, #1
 80022d2:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 80022d6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80022da:	780e      	ldrb	r6, [r1, #0]
 80022dc:	b2a4      	uxth	r4, r4
 80022de:	fb12 4206 	smlabb	r2, r2, r6, r4
 80022e2:	890c      	ldrh	r4, [r1, #8]
 80022e4:	3204      	adds	r2, #4
 80022e6:	0864      	lsrs	r4, r4, #1
 80022e8:	0064      	lsls	r4, r4, #1
 80022ea:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 80022ee:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 80022f0:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80022f2:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d146      	bne.n	8002386 <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80022f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022fc:	0457      	lsls	r7, r2, #17
 80022fe:	d50b      	bpl.n	8002318 <HAL_PCD_EP_Open+0x22c>
 8002300:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002304:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002308:	0512      	lsls	r2, r2, #20
 800230a:	0d12      	lsrs	r2, r2, #20
 800230c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002314:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002318:	780c      	ldrb	r4, [r1, #0]
 800231a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800231e:	0656      	lsls	r6, r2, #25
 8002320:	d50b      	bpl.n	800233a <HAL_PCD_EP_Open+0x24e>
 8002322:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002326:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800232a:	0512      	lsls	r2, r2, #20
 800232c:	0d12      	lsrs	r2, r2, #20
 800232e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002332:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002336:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800233a:	780c      	ldrb	r4, [r1, #0]
 800233c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002340:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002344:	0512      	lsls	r2, r2, #20
 8002346:	0d12      	lsrs	r2, r2, #20
 8002348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002350:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002354:	780c      	ldrb	r4, [r1, #0]
 8002356:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800235a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800235e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002362:	0412      	lsls	r2, r2, #16
 8002364:	0c12      	lsrs	r2, r2, #16
 8002366:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800236e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002372:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8002376:	7809      	ldrb	r1, [r1, #0]
 8002378:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800237c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002380:	0512      	lsls	r2, r2, #20
 8002382:	0d12      	lsrs	r2, r2, #20
 8002384:	e041      	b.n	800240a <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002386:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800238a:	0455      	lsls	r5, r2, #17
 800238c:	d50b      	bpl.n	80023a6 <HAL_PCD_EP_Open+0x2ba>
 800238e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002392:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002396:	0512      	lsls	r2, r2, #20
 8002398:	0d12      	lsrs	r2, r2, #20
 800239a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800239e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80023a6:	780c      	ldrb	r4, [r1, #0]
 80023a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023ac:	0652      	lsls	r2, r2, #25
 80023ae:	d50b      	bpl.n	80023c8 <HAL_PCD_EP_Open+0x2dc>
 80023b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023b8:	0512      	lsls	r2, r2, #20
 80023ba:	0d12      	lsrs	r2, r2, #20
 80023bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80023c4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80023c8:	780c      	ldrb	r4, [r1, #0]
 80023ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023d2:	0512      	lsls	r2, r2, #20
 80023d4:	0d12      	lsrs	r2, r2, #20
 80023d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023de:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80023e2:	780c      	ldrb	r4, [r1, #0]
 80023e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80023ec:	0512      	lsls	r2, r2, #20
 80023ee:	0d12      	lsrs	r2, r2, #20
 80023f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80023fc:	7809      	ldrb	r1, [r1, #0]
 80023fe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002402:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002406:	0492      	lsls	r2, r2, #18
 8002408:	0c92      	lsrs	r2, r2, #18
 800240a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002412:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002416:	2300      	movs	r3, #0
 8002418:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 800241c:	4618      	mov	r0, r3
 800241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002420:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8002422:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002424 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002424:	b2cb      	uxtb	r3, r1
 8002426:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800242a:	b530      	push	{r4, r5, lr}
 800242c:	f04f 021c 	mov.w	r2, #28
 8002430:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002434:	bf15      	itete	ne
 8002436:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800243a:	fb02 0101 	mlaeq	r1, r2, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800243e:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002440:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002442:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8002444:	700c      	strb	r4, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002446:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8002448:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800244c:	2b01      	cmp	r3, #1
 800244e:	f000 80bf 	beq.w	80025d0 <HAL_PCD_EP_Close+0x1ac>
 8002452:	2301      	movs	r3, #1
 8002454:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8002458:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 800245a:	7a8d      	ldrb	r5, [r1, #10]
 800245c:	784c      	ldrb	r4, [r1, #1]
 800245e:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002460:	b212      	sxth	r2, r2
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 

  if (ep->doublebuffer == 0) 
 8002462:	bb1d      	cbnz	r5, 80024ac <HAL_PCD_EP_Close+0x88>
  {
    if (ep->is_in)
 8002464:	b184      	cbz	r4, 8002488 <HAL_PCD_EP_Close+0x64>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002466:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800246a:	0664      	lsls	r4, r4, #25
 800246c:	d55b      	bpl.n	8002526 <HAL_PCD_EP_Close+0x102>
 800246e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002472:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8002476:	0524      	lsls	r4, r4, #20
 8002478:	0d24      	lsrs	r4, r4, #20
 800247a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800247e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8002482:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8002486:	e04e      	b.n	8002526 <HAL_PCD_EP_Close+0x102>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002488:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800248c:	0465      	lsls	r5, r4, #17
 800248e:	f140 808d 	bpl.w	80025ac <HAL_PCD_EP_Close+0x188>
 8002492:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002496:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800249a:	0524      	lsls	r4, r4, #20
 800249c:	0d24      	lsrs	r4, r4, #20
 800249e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80024a2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80024a6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80024aa:	e07f      	b.n	80025ac <HAL_PCD_EP_Close+0x188>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80024ac:	2c00      	cmp	r4, #0
 80024ae:	d142      	bne.n	8002536 <HAL_PCD_EP_Close+0x112>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80024b0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80024b4:	0464      	lsls	r4, r4, #17
 80024b6:	d50b      	bpl.n	80024d0 <HAL_PCD_EP_Close+0xac>
 80024b8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80024bc:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80024c0:	0524      	lsls	r4, r4, #20
 80024c2:	0d24      	lsrs	r4, r4, #20
 80024c4:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80024c8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80024cc:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80024d0:	780c      	ldrb	r4, [r1, #0]
 80024d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024d6:	0655      	lsls	r5, r2, #25
 80024d8:	d50b      	bpl.n	80024f2 <HAL_PCD_EP_Close+0xce>
 80024da:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024e2:	0512      	lsls	r2, r2, #20
 80024e4:	0d12      	lsrs	r2, r2, #20
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80024ee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80024f2:	780c      	ldrb	r4, [r1, #0]
 80024f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024fc:	0512      	lsls	r2, r2, #20
 80024fe:	0d12      	lsrs	r2, r2, #20
 8002500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002504:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002508:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800250c:	780c      	ldrb	r4, [r1, #0]
 800250e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002512:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002516:	0492      	lsls	r2, r2, #18
 8002518:	0c92      	lsrs	r2, r2, #18
 800251a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002522:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8002526:	7809      	ldrb	r1, [r1, #0]
 8002528:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800252c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002530:	0512      	lsls	r2, r2, #20
 8002532:	0d12      	lsrs	r2, r2, #20
 8002534:	e041      	b.n	80025ba <HAL_PCD_EP_Close+0x196>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002536:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800253a:	0464      	lsls	r4, r4, #17
 800253c:	d50b      	bpl.n	8002556 <HAL_PCD_EP_Close+0x132>
 800253e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002542:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8002546:	0524      	lsls	r4, r4, #20
 8002548:	0d24      	lsrs	r4, r4, #20
 800254a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800254e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002552:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002556:	780c      	ldrb	r4, [r1, #0]
 8002558:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800255c:	0652      	lsls	r2, r2, #25
 800255e:	d50b      	bpl.n	8002578 <HAL_PCD_EP_Close+0x154>
 8002560:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002564:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002568:	0512      	lsls	r2, r2, #20
 800256a:	0d12      	lsrs	r2, r2, #20
 800256c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002570:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002574:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002578:	780c      	ldrb	r4, [r1, #0]
 800257a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800257e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002582:	0512      	lsls	r2, r2, #20
 8002584:	0d12      	lsrs	r2, r2, #20
 8002586:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800258a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8002592:	780c      	ldrb	r4, [r1, #0]
 8002594:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002598:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800259c:	0512      	lsls	r2, r2, #20
 800259e:	0d12      	lsrs	r2, r2, #20
 80025a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80025ac:	7809      	ldrb	r1, [r1, #0]
 80025ae:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80025b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025b6:	0492      	lsls	r2, r2, #18
 80025b8:	0c92      	lsrs	r2, r2, #18
 80025ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025c2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80025c6:	2300      	movs	r3, #0
 80025c8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 80025d0:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 80025d2:	bd30      	pop	{r4, r5, pc}

080025d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d4:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80025d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80025da:	241c      	movs	r4, #28
 80025dc:	fb04 0401 	mla	r4, r4, r1, r0
 80025e0:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 80025e4:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80025e6:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 80025e8:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 80025ea:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 80025ee:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 80025f2:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 80025f6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d062      	beq.n	80026c4 <HAL_PCD_EP_Receive+0xf0>
 80025fe:	2301      	movs	r3, #1
 8002600:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002604:	68ab      	ldr	r3, [r5, #8]
 8002606:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 800260a:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 800260c:	bf98      	it	ls
 800260e:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002610:	f04f 021c 	mov.w	r2, #28
 8002614:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8002618:	bf84      	itt	hi
 800261a:	1b1b      	subhi	r3, r3, r4
 800261c:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800261e:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 8002622:	bf88      	it	hi
 8002624:	4623      	movhi	r3, r4
 8002626:	32b0      	adds	r2, #176	; 0xb0
 8002628:	6804      	ldr	r4, [r0, #0]
 800262a:	b10d      	cbz	r5, 8002630 <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800262c:	7955      	ldrb	r5, [r2, #5]
 800262e:	bb15      	cbnz	r5, 8002676 <HAL_PCD_EP_Receive+0xa2>
 8002630:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8002634:	7912      	ldrb	r2, [r2, #4]
 8002636:	b2ad      	uxth	r5, r5
 8002638:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800263c:	2b3e      	cmp	r3, #62	; 0x3e
 800263e:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8002642:	f105 0506 	add.w	r5, r5, #6
 8002646:	d90b      	bls.n	8002660 <HAL_PCD_EP_Receive+0x8c>
 8002648:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800264c:	06db      	lsls	r3, r3, #27
 800264e:	bf04      	itt	eq
 8002650:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8002654:	b292      	uxtheq	r2, r2
 8002656:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800265a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800265e:	e006      	b.n	800266e <HAL_PCD_EP_Receive+0x9a>
 8002660:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002664:	07db      	lsls	r3, r3, #31
 8002666:	bf44      	itt	mi
 8002668:	3201      	addmi	r2, #1
 800266a:	b292      	uxthmi	r2, r2
 800266c:	0292      	lsls	r2, r2, #10
 800266e:	b292      	uxth	r2, r2
 8002670:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 8002674:	e00c      	b.n	8002690 <HAL_PCD_EP_Receive+0xbc>
 8002676:	2d01      	cmp	r5, #1
 8002678:	bf01      	itttt	eq
 800267a:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 800267e:	7912      	ldrbeq	r2, [r2, #4]
 8002680:	b2ad      	uxtheq	r5, r5
 8002682:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 8002686:	bf04      	itt	eq
 8002688:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 800268c:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002690:	231c      	movs	r3, #28
 8002692:	fb03 0101 	mla	r1, r3, r1, r0
 8002696:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800269a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800269e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 80026ba:	2300      	movs	r3, #0
 80026bc:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 80026c4:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80026c6:	bd70      	pop	{r4, r5, r6, pc}

080026c8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80026c8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80026cc:	231c      	movs	r3, #28
 80026ce:	fb03 0001 	mla	r0, r3, r1, r0
}
 80026d2:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 80026d6:	4770      	bx	lr

080026d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80026da:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80026de:	211c      	movs	r1, #28
 80026e0:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026e4:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80026e6:	f101 0038 	add.w	r0, r1, #56	; 0x38
 80026ea:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 80026ec:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 80026ee:	2200      	movs	r2, #0
  ep->is_in = 1;
 80026f0:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80026f2:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 80026f4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 80026f8:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 80026fc:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 8002700:	429d      	cmp	r5, r3
 8002702:	f000 80a8 	beq.w	8002856 <HAL_PCD_EP_Transmit+0x17e>
 8002706:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800270a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800270c:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800270e:	271c      	movs	r7, #28
 8002710:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002714:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8002716:	bf88      	it	hi
 8002718:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800271a:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800271e:	bf86      	itte	hi
 8002720:	6045      	strhi	r5, [r0, #4]
 8002722:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 8002724:	6042      	strls	r2, [r0, #4]
 8002726:	b2ab      	uxth	r3, r5
 8002728:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800272c:	b989      	cbnz	r1, 8002752 <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800272e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002730:	8892      	ldrh	r2, [r2, #4]
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	f000 fbb3 	bl	8002e9e <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800273e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002742:	b292      	uxth	r2, r2
 8002744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002748:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800274c:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8002750:	e067      	b.n	8002822 <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002752:	7852      	ldrb	r2, [r2, #1]
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	bb1a      	cbnz	r2, 80027a0 <HAL_PCD_EP_Transmit+0xc8>
 8002758:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800275c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002760:	b289      	uxth	r1, r1
 8002762:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002766:	2d3e      	cmp	r5, #62	; 0x3e
 8002768:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 800276c:	f101 0106 	add.w	r1, r1, #6
 8002770:	d90b      	bls.n	800278a <HAL_PCD_EP_Transmit+0xb2>
 8002772:	f3c5 124f 	ubfx	r2, r5, #5, #16
 8002776:	06ed      	lsls	r5, r5, #27
 8002778:	bf04      	itt	eq
 800277a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800277e:	b292      	uxtheq	r2, r2
 8002780:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002784:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002788:	e006      	b.n	8002798 <HAL_PCD_EP_Transmit+0xc0>
 800278a:	f3c5 024f 	ubfx	r2, r5, #1, #16
 800278e:	07ed      	lsls	r5, r5, #31
 8002790:	bf44      	itt	mi
 8002792:	3201      	addmi	r2, #1
 8002794:	b292      	uxthmi	r2, r2
 8002796:	0292      	lsls	r2, r2, #10
 8002798:	b292      	uxth	r2, r2
 800279a:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 800279e:	e00d      	b.n	80027bc <HAL_PCD_EP_Transmit+0xe4>
 80027a0:	2a01      	cmp	r2, #1
 80027a2:	bf01      	itttt	eq
 80027a4:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 80027a8:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 80027ac:	b292      	uxtheq	r2, r2
 80027ae:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 80027b2:	bf04      	itt	eq
 80027b4:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 80027b8:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80027bc:	251c      	movs	r5, #28
 80027be:	fb05 4206 	mla	r2, r5, r6, r4
 80027c2:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80027c6:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 80027ca:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80027ce:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80027d2:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80027d4:	bf54      	ite	pl
 80027d6:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 80027d8:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80027da:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80027dc:	f000 fb5f 	bl	8002e9e <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 80027e0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	b963      	cbnz	r3, 8002802 <HAL_PCD_EP_Transmit+0x12a>
 80027e8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80027ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80027f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f4:	051b      	lsls	r3, r3, #20
 80027f6:	0d1b      	lsrs	r3, r3, #20
 80027f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002800:	e00d      	b.n	800281e <HAL_PCD_EP_Transmit+0x146>
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10d      	bne.n	8002822 <HAL_PCD_EP_Transmit+0x14a>
 8002806:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800280a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800280e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002812:	051b      	lsls	r3, r3, #20
 8002814:	0d1b      	lsrs	r3, r3, #20
 8002816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002822:	231c      	movs	r3, #28
 8002824:	fb03 4606 	mla	r6, r3, r6, r4
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800282e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 800284a:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800284c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 8002850:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 8002854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8002856:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8002858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800285a <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800285a:	6803      	ldr	r3, [r0, #0]
 800285c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002860:	b21b      	sxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002866:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8002868:	db11      	blt.n	800288e <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002870:	0552      	lsls	r2, r2, #21
 8002872:	f140 81e7 	bpl.w	8002c44 <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002876:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 800287a:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800287c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002880:	f001 fcd6 	bl	8004230 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8002884:	4620      	mov	r0, r4
 8002886:	2100      	movs	r1, #0
 8002888:	f7ff fc1a 	bl	80020c0 <HAL_PCD_SetAddress>
 800288c:	e1da      	b.n	8002c44 <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800289a:	b29b      	uxth	r3, r3
 800289c:	0419      	lsls	r1, r3, #16
 800289e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80028a2:	d5e2      	bpl.n	800286a <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80028a4:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 80028a8:	f015 050f 	ands.w	r5, r5, #15
 80028ac:	f040 80b7 	bne.w	8002a1e <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80028b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b4:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80028b6:	f001 0110 	and.w	r1, r1, #16
 80028ba:	b289      	uxth	r1, r1
 80028bc:	bb59      	cbnz	r1, 8002916 <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80028d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 80028de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e0:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 80028e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e8:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80028ea:	4413      	add	r3, r2
 80028ec:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 80028ee:	4620      	mov	r0, r4
 80028f0:	f001 fc92 	bl	8004218 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 80028f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0cb      	beq.n	8002894 <HAL_PCD_IRQHandler+0x3a>
 80028fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028fe:	2a00      	cmp	r2, #0
 8002900:	d1c8      	bne.n	8002894 <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002902:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002906:	6821      	ldr	r1, [r4, #0]
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8002910:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8002914:	e7be      	b.n	8002894 <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002916:	b29b      	uxth	r3, r3
 8002918:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 800291c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002920:	051f      	lsls	r7, r3, #20
 8002922:	d51f      	bpl.n	8002964 <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002924:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002928:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800292c:	b29b      	uxth	r3, r3
 800292e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002932:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002936:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800293a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800293e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002942:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002946:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 800294a:	f000 fabf 	bl	8002ecc <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800294e:	6822      	ldr	r2, [r4, #0]
 8002950:	8813      	ldrh	r3, [r2, #0]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	051b      	lsls	r3, r3, #20
 8002958:	0d1b      	lsrs	r3, r3, #20
 800295a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800295c:	4620      	mov	r0, r4
 800295e:	f001 fc4b 	bl	80041f8 <HAL_PCD_SetupStageCallback>
 8002962:	e797      	b.n	8002894 <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002964:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002968:	b21b      	sxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	da92      	bge.n	8002894 <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800296e:	8803      	ldrh	r3, [r0, #0]
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	0d1b      	lsrs	r3, r3, #20
 8002978:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800297a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800297e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8002982:	b29b      	uxth	r3, r3
 8002984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002988:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800298c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002994:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8002998:	b163      	cbz	r3, 80029b4 <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800299a:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800299e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80029a2:	f000 fa93 	bl	8002ecc <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80029a6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80029aa:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80029ae:	4413      	add	r3, r2
 80029b0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80029b4:	4620      	mov	r0, r4
 80029b6:	2100      	movs	r1, #0
 80029b8:	f001 fc25 	bl	8004206 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 80029c2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80029c6:	2d3e      	cmp	r5, #62	; 0x3e
 80029c8:	b289      	uxth	r1, r1
 80029ca:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80029ce:	f101 0106 	add.w	r1, r1, #6
 80029d2:	d90b      	bls.n	80029ec <HAL_PCD_IRQHandler+0x192>
 80029d4:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80029d8:	06ee      	lsls	r6, r5, #27
 80029da:	bf04      	itt	eq
 80029dc:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 80029e0:	b29b      	uxtheq	r3, r3
 80029e2:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 80029e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ea:	e006      	b.n	80029fa <HAL_PCD_IRQHandler+0x1a0>
 80029ec:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80029f0:	07ed      	lsls	r5, r5, #31
 80029f2:	bf44      	itt	mi
 80029f4:	3301      	addmi	r3, #1
 80029f6:	b29b      	uxthmi	r3, r3
 80029f8:	029b      	lsls	r3, r3, #10
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a00:	8813      	ldrh	r3, [r2, #0]
 8002a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1a:	8013      	strh	r3, [r2, #0]
 8002a1c:	e73a      	b.n	8002894 <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002a1e:	b22f      	sxth	r7, r5
 8002a20:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002a2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f280 8084 	bge.w	8002b3e <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002a36:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002a40:	221c      	movs	r2, #28
 8002a42:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002a46:	0d1b      	lsrs	r3, r3, #20
 8002a48:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002a4c:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 8002a50:	f89c 3006 	ldrb.w	r3, [ip, #6]
 8002a54:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 8002a58:	b9b3      	cbnz	r3, 8002a88 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a5a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a5e:	f89e 1004 	ldrb.w	r1, [lr, #4]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a68:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a6c:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8002a70:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8002a74:	2e00      	cmp	r6, #0
 8002a76:	d040      	beq.n	8002afa <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a78:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8002a7c:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8002a80:	4633      	mov	r3, r6
 8002a82:	f000 fa23 	bl	8002ecc <PCD_ReadPMA>
 8002a86:	e038      	b.n	8002afa <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002a88:	f89e 6004 	ldrb.w	r6, [lr, #4]
 8002a8c:	b233      	sxth	r3, r6
 8002a8e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a92:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002a96:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a9a:	b289      	uxth	r1, r1
 8002a9c:	f04f 0308 	mov.w	r3, #8
 8002aa0:	fb13 1306 	smlabb	r3, r3, r6, r1
 8002aa4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002aa8:	d009      	beq.n	8002abe <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aaa:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8002aae:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002ab2:	b186      	cbz	r6, 8002ad6 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ab4:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8002ab8:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8002abc:	e008      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002abe:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8002ac2:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002ac6:	b136      	cbz	r6, 8002ad6 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ac8:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8002acc:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8002ad0:	4633      	mov	r3, r6
 8002ad2:	f000 f9fb 	bl	8002ecc <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002ad6:	231c      	movs	r3, #28
 8002ad8:	fb03 4305 	mla	r3, r3, r5, r4
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8002ae2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	051b      	lsls	r3, r3, #20
 8002aec:	0d1b      	lsrs	r3, r3, #20
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002afa:	211c      	movs	r1, #28
 8002afc:	fb01 4105 	mla	r1, r1, r5, r4
 8002b00:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8002b04:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002b08:	4433      	add	r3, r6
 8002b0a:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002b0e:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8002b12:	4432      	add	r2, r6
 8002b14:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002b18:	b11b      	cbz	r3, 8002b22 <HAL_PCD_IRQHandler+0x2c8>
 8002b1a:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8002b1e:	4286      	cmp	r6, r0
 8002b20:	d208      	bcs.n	8002b34 <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b22:	231c      	movs	r3, #28
 8002b24:	fb03 4305 	mla	r3, r3, r5, r4
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8002b2e:	f001 fb6a 	bl	8004206 <HAL_PCD_DataOutStageCallback>
 8002b32:	e004      	b.n	8002b3e <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 8002b3a:	f7ff fd4b 	bl	80025d4 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8002b3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002b42:	0618      	lsls	r0, r3, #24
 8002b44:	f57f aea6 	bpl.w	8002894 <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002b4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002b5a:	221c      	movs	r2, #28
 8002b5c:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002b60:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002b64:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8002b68:	f102 0628 	add.w	r6, r2, #40	; 0x28
 8002b6c:	b9a3      	cbnz	r3, 8002b98 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b72:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002b7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03a      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002b8e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002b90:	88b2      	ldrh	r2, [r6, #4]
 8002b92:	f000 f984 	bl	8002e9e <PCD_WritePMA>
 8002b96:	e035      	b.n	8002c04 <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002b98:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8002b9c:	b23b      	sxth	r3, r7
 8002b9e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ba2:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002ba6:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002baa:	b289      	uxth	r1, r1
 8002bac:	f04f 0308 	mov.w	r3, #8
 8002bb0:	fb13 1307 	smlabb	r3, r3, r7, r1
 8002bb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002bb8:	d008      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc2:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8002bc4:	b163      	cbz	r3, 8002be0 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002bc6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002bc8:	88f2      	ldrh	r2, [r6, #6]
 8002bca:	e007      	b.n	8002bdc <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8002bd6:	b11b      	cbz	r3, 8002be0 <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002bd8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002bda:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002bdc:	f000 f95f 	bl	8002e9e <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002be0:	231c      	movs	r3, #28
 8002be2:	fb03 4305 	mla	r3, r3, r5, r4
 8002be6:	6822      	ldr	r2, [r4, #0]
 8002be8:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8002bec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c00:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c04:	6821      	ldr	r1, [r4, #0]
 8002c06:	231c      	movs	r3, #28
 8002c08:	fb03 4505 	mla	r5, r3, r5, r4
 8002c0c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8002c10:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002c14:	b292      	uxth	r2, r2
 8002c16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002c1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c1e:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c20:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8002c24:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002c26:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c2e:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8002c30:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8002c32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 8002c34:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8002c36:	b913      	cbnz	r3, 8002c3e <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c38:	f001 faee 	bl	8004218 <HAL_PCD_DataInStageCallback>
 8002c3c:	e62a      	b.n	8002894 <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c3e:	f7ff fd4b 	bl	80026d8 <HAL_PCD_EP_Transmit>
 8002c42:	e627      	b.n	8002894 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c4a:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8002c4c:	bf44      	itt	mi
 8002c4e:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8002c52:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002c56:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c5a:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002c5c:	bf44      	itt	mi
 8002c5e:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8002c62:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8002c66:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c6a:	04d6      	lsls	r6, r2, #19
 8002c6c:	d513      	bpl.n	8002c96 <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8002c6e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	0412      	lsls	r2, r2, #16
 8002c78:	0c12      	lsrs	r2, r2, #16
 8002c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8002c7e:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8002c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8002c86:	4620      	mov	r0, r4
 8002c88:	f001 fae0 	bl	800424c <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8002c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c9c:	0515      	lsls	r5, r2, #20
 8002c9e:	d518      	bpl.n	8002cd2 <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002ca0:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8002ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002ca8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002cac:	b292      	uxth	r2, r2
 8002cae:	f042 0208 	orr.w	r2, r2, #8
 8002cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002cb6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	f042 0204 	orr.w	r2, r2, #4
 8002cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8002cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cc8:	04d8      	lsls	r0, r3, #19
 8002cca:	d402      	bmi.n	8002cd2 <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f001 fabc 	bl	800424a <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002cd8:	0591      	lsls	r1, r2, #22
 8002cda:	d506      	bpl.n	8002cea <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8002cdc:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8002ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f001 fa9f 	bl	8004228 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002cf0:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8002cf2:	bf44      	itt	mi
 8002cf4:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8002cf8:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8002cfc:	b003      	add	sp, #12
 8002cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d00 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002d00:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002d04:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d06:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002d08:	d049      	beq.n	8002d9e <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8002d0a:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	221c      	movs	r2, #28
 8002d10:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8002d14:	f014 0f80 	tst.w	r4, #128	; 0x80
 8002d18:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d1c:	bf15      	itete	ne
 8002d1e:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d22:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d26:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d28:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8002d2e:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002d30:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 8002d32:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002d34:	7053      	strb	r3, [r2, #1]
 8002d36:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8002d38:	b979      	cbnz	r1, 8002d5a <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002d3a:	8813      	ldrh	r3, [r2, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d4a:	f083 0310 	eor.w	r3, r3, #16
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	8013      	strh	r3, [r2, #0]
 8002d58:	e01c      	b.n	8002d94 <HAL_PCD_EP_SetStall+0x94>
 8002d5a:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 8002d5c:	b153      	cbz	r3, 8002d74 <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8002d5e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f083 0310 	eor.w	r3, r3, #16
 8002d72:	e009      	b.n	8002d88 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8002d74:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d90:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8002d94:	2300      	movs	r3, #0
 8002d96:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002d9e:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002da2:	b2cb      	uxtb	r3, r1
 8002da4:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da8:	b510      	push	{r4, lr}
 8002daa:	f04f 021c 	mov.w	r2, #28
 8002dae:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002db2:	bf15      	itete	ne
 8002db4:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db8:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002dbc:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dbe:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002dc0:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8002dc6:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002dc8:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8002dca:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d049      	beq.n	8002e66 <HAL_PCD_EP_ClrStall+0xc4>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8002dd8:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8002dda:	784b      	ldrb	r3, [r1, #1]
 8002ddc:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002dde:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 8002de0:	b1db      	cbz	r3, 8002e1a <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002de2:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002de6:	065b      	lsls	r3, r3, #25
 8002de8:	d50b      	bpl.n	8002e02 <HAL_PCD_EP_ClrStall+0x60>
 8002dea:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	051b      	lsls	r3, r3, #20
 8002df4:	0d1b      	lsrs	r3, r3, #20
 8002df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dfe:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e02:	7809      	ldrb	r1, [r1, #0]
 8002e04:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002e18:	e01a      	b.n	8002e50 <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002e1a:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002e1e:	045b      	lsls	r3, r3, #17
 8002e20:	d50b      	bpl.n	8002e3a <HAL_PCD_EP_ClrStall+0x98>
 8002e22:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2a:	051b      	lsls	r3, r3, #20
 8002e2c:	0d1b      	lsrs	r3, r3, #20
 8002e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e36:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002e3a:	7809      	ldrb	r1, [r1, #0]
 8002e3c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8002e66:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8002e68:	bd10      	pop	{r4, pc}

08002e6a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8002e6a:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002e6e:	b530      	push	{r4, r5, lr}
 8002e70:	f04f 051c 	mov.w	r5, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e74:	bf1b      	ittet	ne
 8002e76:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 8002e7a:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e7e:	fb05 0001 	mlaeq	r0, r5, r1, r0
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e82:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e84:	bf08      	it	eq
 8002e86:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e88:	b912      	cbnz	r2, 8002e90 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8002e8a:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002e8c:	8083      	strh	r3, [r0, #4]
 8002e8e:	e004      	b.n	8002e9a <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8002e90:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8002e92:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8002e94:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8002e96:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8002e98:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	bd30      	pop	{r4, r5, pc}

08002e9e <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002ea4:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002ea6:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ea8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8002eac:	2400      	movs	r4, #0
 8002eae:	429c      	cmp	r4, r3
 8002eb0:	f101 0102 	add.w	r1, r1, #2
 8002eb4:	d009      	beq.n	8002eca <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002eb6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002eba:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002ebe:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 8002ec2:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002ec6:	3401      	adds	r4, #1
 8002ec8:	e7f1      	b.n	8002eae <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002eca:	bd30      	pop	{r4, r5, pc}

08002ecc <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002ed2:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002ed4:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002ed6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8002eda:	2400      	movs	r4, #0
 8002edc:	429c      	cmp	r4, r3
 8002ede:	d005      	beq.n	8002eec <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002ee0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002ee4:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002ee8:	3401      	adds	r4, #1
 8002eea:	e7f7      	b.n	8002edc <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8002eec:	bd10      	pop	{r4, pc}

08002eee <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002eee:	4770      	bx	lr

08002ef0 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002ef0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8002ef2:	6804      	ldr	r4, [r0, #0]
 8002ef4:	9d03      	ldr	r5, [sp, #12]
 8002ef6:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002ef8:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8002efc:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8002f00:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8002f04:	f020 0003 	bic.w	r0, r0, #3
 8002f08:	4328      	orrs	r0, r5
 8002f0a:	4303      	orrs	r3, r0
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8002f0c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002f10:	430b      	orrs	r3, r1
 8002f12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8002f16:	6062      	str	r2, [r4, #4]
 8002f18:	bd30      	pop	{r4, r5, pc}
	...

08002f1c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4604      	mov	r4, r0
 8002f20:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8002f22:	f7fe ff2f 	bl	8001d84 <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f26:	6823      	ldr	r3, [r4, #0]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8002f28:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2a:	6998      	ldr	r0, [r3, #24]
 8002f2c:	f010 0010 	ands.w	r0, r0, #16
 8002f30:	d039      	beq.n	8002fa6 <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8002f32:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002f36:	2a12      	cmp	r2, #18
 8002f38:	d007      	beq.n	8002f4a <I2C_IsAcknowledgeFailed+0x2e>
 8002f3a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002f3e:	2a52      	cmp	r2, #82	; 0x52
 8002f40:	d003      	beq.n	8002f4a <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8002f42:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002f46:	2a62      	cmp	r2, #98	; 0x62
 8002f48:	d112      	bne.n	8002f70 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	0190      	lsls	r0, r2, #6
 8002f4e:	d40f      	bmi.n	8002f70 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	e00a      	b.n	8002f70 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	0692      	lsls	r2, r2, #26
 8002f5e:	d411      	bmi.n	8002f84 <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f60:	1c69      	adds	r1, r5, #1
 8002f62:	d0fa      	beq.n	8002f5a <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f64:	b135      	cbz	r5, 8002f74 <I2C_IsAcknowledgeFailed+0x58>
 8002f66:	f7fe ff0d 	bl	8001d84 <HAL_GetTick>
 8002f6a:	1b80      	subs	r0, r0, r6
 8002f6c:	42a8      	cmp	r0, r5
 8002f6e:	d801      	bhi.n	8002f74 <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	e7f2      	b.n	8002f5a <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8002f80:	2003      	movs	r0, #3
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f84:	2210      	movs	r2, #16
 8002f86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	2220      	movs	r2, #32
 8002f8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <I2C_IsAcknowledgeFailed+0x8c>)
 8002f90:	400a      	ands	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f94:	2304      	movs	r3, #4
 8002f96:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 8002f9a:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8002f9e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	fe00e800 	.word	0xfe00e800

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 8002fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460e      	mov	r6, r1
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7fe fee4 	bl	8001d84 <HAL_GetTick>
 8002fbc:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 8002fbe:	f1b8 0f00 	cmp.w	r8, #0
 8002fc2:	d125      	bne.n	8003010 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	6993      	ldr	r3, [r2, #24]
 8002fc8:	4033      	ands	r3, r6
 8002fca:	42b3      	cmp	r3, r6
 8002fcc:	d00e      	beq.n	8002fec <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002fce:	1c69      	adds	r1, r5, #1
 8002fd0:	d0f9      	beq.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002fd2:	b17d      	cbz	r5, 8002ff4 <I2C_WaitOnFlagUntilTimeout+0x48>
 8002fd4:	f7fe fed6 	bl	8001d84 <HAL_GetTick>
 8002fd8:	1bc0      	subs	r0, r0, r7
 8002fda:	42a8      	cmp	r0, r5
 8002fdc:	d9f2      	bls.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x18>
 8002fde:	e009      	b.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002fe0:	1c6b      	adds	r3, r5, #1
 8002fe2:	d106      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8002fe4:	6993      	ldr	r3, [r2, #24]
 8002fe6:	4033      	ands	r3, r6
 8002fe8:	42b3      	cmp	r3, r6
 8002fea:	d0f9      	beq.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002fec:	2000      	movs	r0, #0
 8002fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ff2:	b945      	cbnz	r5, 8003006 <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003006:	f7fe febd 	bl	8001d84 <HAL_GetTick>
 800300a:	1bc0      	subs	r0, r0, r7
 800300c:	42a8      	cmp	r0, r5
 800300e:	d8f1      	bhi.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	e7e7      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x38>

08003014 <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4604      	mov	r4, r0
 8003018:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800301a:	f7fe feb3 	bl	8001d84 <HAL_GetTick>
 800301e:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	079b      	lsls	r3, r3, #30
 8003026:	d41b      	bmi.n	8003060 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7ff ff76 	bl	8002f1c <I2C_IsAcknowledgeFailed>
 8003030:	b9c0      	cbnz	r0, 8003064 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003032:	1c6a      	adds	r2, r5, #1
 8003034:	d0f4      	beq.n	8003020 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003036:	b96d      	cbnz	r5, 8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800303c:	f043 0320 	orr.w	r3, r3, #32
 8003040:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 8003044:	2301      	movs	r3, #1
 8003046:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003050:	2003      	movs	r0, #3
 8003052:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003054:	f7fe fe96 	bl	8001d84 <HAL_GetTick>
 8003058:	1b80      	subs	r0, r0, r6
 800305a:	42a8      	cmp	r0, r5
 800305c:	d9e0      	bls.n	8003020 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800305e:	e7eb      	b.n	8003038 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8003060:	2000      	movs	r0, #0
 8003062:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003064:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8003066:	bd70      	pop	{r4, r5, r6, pc}

08003068 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003068:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800306a:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800306c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003070:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003072:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003074:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307a:	b2f2      	uxtb	r2, r6
 800307c:	f7ff ff38 	bl	8002ef0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003080:	4620      	mov	r0, r4
 8003082:	9906      	ldr	r1, [sp, #24]
 8003084:	f7ff ffc6 	bl	8003014 <I2C_WaitOnTXISFlagUntilTimeout>
 8003088:	b130      	cbz	r0, 8003098 <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800308e:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8003090:	bf0c      	ite	eq
 8003092:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8003094:	2003      	movne	r0, #3
 8003096:	e017      	b.n	80030c8 <I2C_RequestMemoryWrite+0x60>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003098:	2e01      	cmp	r6, #1
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	d008      	beq.n	80030b0 <I2C_RequestMemoryWrite+0x48>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800309e:	0a2a      	lsrs	r2, r5, #8
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80030a2:	4620      	mov	r0, r4
 80030a4:	9906      	ldr	r1, [sp, #24]
 80030a6:	f7ff ffb5 	bl	8003014 <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d1ed      	bne.n	800308a <I2C_RequestMemoryWrite+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	b2ed      	uxtb	r5, r5
 80030b2:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80030b4:	4620      	mov	r0, r4
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	2200      	movs	r2, #0
 80030ba:	9b06      	ldr	r3, [sp, #24]
 80030bc:	f7ff ff76 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 80030c0:	2800      	cmp	r0, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2003      	movne	r0, #3
 80030c6:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 80030c8:	b002      	add	sp, #8
 80030ca:	bd70      	pop	{r4, r5, r6, pc}

080030cc <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80030cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030ce:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80030d4:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030d6:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80030d8:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030da:	2300      	movs	r3, #0
 80030dc:	b2f2      	uxtb	r2, r6
 80030de:	f7ff ff07 	bl	8002ef0 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80030e2:	4620      	mov	r0, r4
 80030e4:	9906      	ldr	r1, [sp, #24]
 80030e6:	f7ff ff95 	bl	8003014 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ea:	b130      	cbz	r0, 80030fa <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ec:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80030f0:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 80030f2:	bf0c      	ite	eq
 80030f4:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 80030f6:	2003      	movne	r0, #3
 80030f8:	e017      	b.n	800312a <I2C_RequestMemoryRead+0x5e>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fa:	2e01      	cmp	r6, #1
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	d008      	beq.n	8003112 <I2C_RequestMemoryRead+0x46>
  }      
  /* If Mememory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003100:	0a2a      	lsrs	r2, r5, #8
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003104:	4620      	mov	r0, r4
 8003106:	9906      	ldr	r1, [sp, #24]
 8003108:	f7ff ff84 	bl	8003014 <I2C_WaitOnTXISFlagUntilTimeout>
 800310c:	2800      	cmp	r0, #0
 800310e:	d1ed      	bne.n	80030ec <I2C_RequestMemoryRead+0x20>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	b2ed      	uxtb	r5, r5
 8003114:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8003116:	4620      	mov	r0, r4
 8003118:	2140      	movs	r1, #64	; 0x40
 800311a:	2200      	movs	r2, #0
 800311c:	9b06      	ldr	r3, [sp, #24]
 800311e:	f7ff ff45 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003122:	2800      	cmp	r0, #0
 8003124:	bf14      	ite	ne
 8003126:	2003      	movne	r0, #3
 8003128:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 800312a:	b002      	add	sp, #8
 800312c:	bd70      	pop	{r4, r5, r6, pc}

0800312e <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 800312e:	b570      	push	{r4, r5, r6, lr}
 8003130:	4604      	mov	r4, r0
 8003132:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003134:	f7fe fe26 	bl	8001d84 <HAL_GetTick>
 8003138:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	069b      	lsls	r3, r3, #26
 8003140:	d419      	bmi.n	8003176 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7ff fee9 	bl	8002f1c <I2C_IsAcknowledgeFailed>
 800314a:	b9b0      	cbnz	r0, 800317a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800314c:	b96d      	cbnz	r5, 800316a <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003152:	f043 0320 	orr.w	r3, r3, #32
 8003156:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800315a:	2301      	movs	r3, #1
 800315c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003160:	2300      	movs	r3, #0
 8003162:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003166:	2003      	movs	r0, #3
 8003168:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800316a:	f7fe fe0b 	bl	8001d84 <HAL_GetTick>
 800316e:	1b80      	subs	r0, r0, r6
 8003170:	42a8      	cmp	r0, r5
 8003172:	d9e2      	bls.n	800313a <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8003174:	e7eb      	b.n	800314e <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003176:	2000      	movs	r0, #0
 8003178:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 800317a:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800317c:	bd70      	pop	{r4, r5, r6, pc}

0800317e <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8003180:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003182:	4604      	mov	r4, r0
 8003184:	2800      	cmp	r0, #0
 8003186:	d041      	beq.n	800320c <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003188:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800318c:	b90b      	cbnz	r3, 8003192 <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800318e:	f7ff fff6 	bl	800317e <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	68e1      	ldr	r1, [r4, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a4:	6862      	ldr	r2, [r4, #4]
 80031a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031aa:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b2:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 80031b4:	68a2      	ldr	r2, [r4, #8]
 80031b6:	b142      	cbz	r2, 80031ca <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b8:	2901      	cmp	r1, #1
 80031ba:	d103      	bne.n	80031c4 <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	e007      	b.n	80031d4 <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031c8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ca:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031cc:	bf04      	itt	eq
 80031ce:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80031d2:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031d4:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80031d6:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031d8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80031dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e0:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80031e2:	6922      	ldr	r2, [r4, #16]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	69a1      	ldr	r1, [r4, #24]
 80031e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	69e2      	ldr	r2, [r4, #28]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fe:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003200:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003202:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 800320a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 800320c:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 800320e:	bd10      	pop	{r4, pc}

08003210 <HAL_I2C_MspDeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003210:	4770      	bx	lr

08003212 <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003212:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003214:	4604      	mov	r4, r0
 8003216:	b188      	cbz	r0, 800323c <HAL_I2C_DeInit+0x2a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003218:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 800321a:	2302      	movs	r3, #2
 800321c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003228:	f7ff fff2 	bl	8003210 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	2000      	movs	r0, #0
 800322e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003232:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 8003236:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 800323a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 800323c:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 800323e:	bd10      	pop	{r4, pc}

08003240 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003244:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800324c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8003250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003254:	b2ed      	uxtb	r5, r5
 8003256:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	4604      	mov	r4, r0
 800325a:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800325c:	d164      	bne.n	8003328 <HAL_I2C_Mem_Write+0xe8>
  { 
    if((pData == NULL) || (Size == 0)) 
 800325e:	f1b9 0f00 	cmp.w	r9, #0
 8003262:	d101      	bne.n	8003268 <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
 8003264:	2001      	movs	r0, #1
 8003266:	e062      	b.n	800332e <HAL_I2C_Mem_Write+0xee>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 8003268:	2e00      	cmp	r6, #0
 800326a:	d0fb      	beq.n	8003264 <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800326c:	6807      	ldr	r7, [r0, #0]
 800326e:	69bf      	ldr	r7, [r7, #24]
 8003270:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 8003274:	d158      	bne.n	8003328 <HAL_I2C_Mem_Write+0xe8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003276:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800327a:	f1be 0f01 	cmp.w	lr, #1
 800327e:	d053      	beq.n	8003328 <HAL_I2C_Mem_Write+0xe8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8003280:	f04f 0e52 	mov.w	lr, #82	; 0x52
 8003284:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003288:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8003290:	f8cd a000 	str.w	sl, [sp]
 8003294:	f7ff fee8 	bl	8003068 <I2C_RequestMemoryWrite>
 8003298:	b120      	cbz	r0, 80032a4 <HAL_I2C_Mem_Write+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 80032a2:	e031      	b.n	8003308 <HAL_I2C_Mem_Write+0xc8>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032a4:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 80032a6:	2eff      	cmp	r6, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032a8:	4620      	mov	r0, r4
 80032aa:	4641      	mov	r1, r8
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 80032ac:	d81c      	bhi.n	80032e8 <HAL_I2C_Mem_Write+0xa8>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ae:	b2f2      	uxtb	r2, r6
 80032b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b4:	f7ff fe1c 	bl	8002ef0 <I2C_TransferConfig>
      Sizetmp = Size;
 80032b8:	4635      	mov	r5, r6
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80032ba:	4620      	mov	r0, r4
 80032bc:	4651      	mov	r1, sl
 80032be:	f7ff fea9 	bl	8003014 <I2C_WaitOnTXISFlagUntilTimeout>
 80032c2:	b9f8      	cbnz	r0, 8003304 <HAL_I2C_Mem_Write+0xc4>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f819 2b01 	ldrb.w	r2, [r9], #1
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 80032cc:	3e01      	subs	r6, #1

      if((Sizetmp == 0)&&(Size!=0))
 80032ce:	3d01      	subs	r5, #1
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
      Sizetmp--;
      Size--;
 80032d0:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 80032d2:	d110      	bne.n	80032f6 <HAL_I2C_Mem_Write+0xb6>
 80032d4:	b18e      	cbz	r6, 80032fa <HAL_I2C_Mem_Write+0xba>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80032d6:	4620      	mov	r0, r4
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	462a      	mov	r2, r5
 80032dc:	4653      	mov	r3, sl
 80032de:	f7ff fe65 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 80032e2:	bb18      	cbnz	r0, 800332c <HAL_I2C_Mem_Write+0xec>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032e4:	9500      	str	r5, [sp, #0]
 80032e6:	e7de      	b.n	80032a6 <HAL_I2C_Mem_Write+0x66>
 80032e8:	22ff      	movs	r2, #255	; 0xff
 80032ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ee:	f7ff fdff 	bl	8002ef0 <I2C_TransferConfig>
          Sizetmp = 255;
 80032f2:	25ff      	movs	r5, #255	; 0xff
 80032f4:	e7e1      	b.n	80032ba <HAL_I2C_Mem_Write+0x7a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d1df      	bne.n	80032ba <HAL_I2C_Mem_Write+0x7a>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80032fa:	4620      	mov	r0, r4
 80032fc:	2119      	movs	r1, #25
 80032fe:	f7ff ff16 	bl	800312e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003302:	b120      	cbz	r0, 800330e <HAL_I2C_Mem_Write+0xce>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003304:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003308:	2b04      	cmp	r3, #4
 800330a:	d10f      	bne.n	800332c <HAL_I2C_Mem_Write+0xec>
 800330c:	e7aa      	b.n	8003264 <HAL_I2C_Mem_Write+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	2220      	movs	r2, #32
 8003312:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_I2C_Mem_Write+0xf4>)
 8003318:	400a      	ands	r2, r1
 800331a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 800331c:	2301      	movs	r3, #1
 800331e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 8003326:	e002      	b.n	800332e <HAL_I2C_Mem_Write+0xee>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2002      	movs	r0, #2
 800332a:	e000      	b.n	800332e <HAL_I2C_Mem_Write+0xee>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 800332c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800332e:	b002      	add	sp, #8
 8003330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003338:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800333c:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003340:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8003344:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8003348:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800334c:	b2ed      	uxtb	r5, r5
 800334e:	2d01      	cmp	r5, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	4604      	mov	r4, r0
 8003352:	4688      	mov	r8, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003354:	d16c      	bne.n	8003430 <HAL_I2C_Mem_Read+0xf8>
  {    
    if((pData == NULL) || (Size == 0)) 
 8003356:	f1b9 0f00 	cmp.w	r9, #0
 800335a:	d101      	bne.n	8003360 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
 800335c:	2001      	movs	r0, #1
 800335e:	e068      	b.n	8003432 <HAL_I2C_Mem_Read+0xfa>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 8003360:	2e00      	cmp	r6, #0
 8003362:	d0fb      	beq.n	800335c <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003364:	6807      	ldr	r7, [r0, #0]
 8003366:	69bf      	ldr	r7, [r7, #24]
 8003368:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800336c:	d160      	bne.n	8003430 <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 8003372:	f1be 0f01 	cmp.w	lr, #1
 8003376:	d05b      	beq.n	8003430 <HAL_I2C_Mem_Read+0xf8>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8003378:	f04f 0e62 	mov.w	lr, #98	; 0x62
 800337c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003380:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8003388:	f8cd a000 	str.w	sl, [sp]
 800338c:	f7ff fe9e 	bl	80030cc <I2C_RequestMemoryRead>
 8003390:	b120      	cbz	r0, 800339c <HAL_I2C_Mem_Read+0x64>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800339a:	e038      	b.n	800340e <HAL_I2C_Mem_Read+0xd6>
 800339c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 80033a0:	2eff      	cmp	r6, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4620      	mov	r0, r4
 80033a6:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 80033a8:	d821      	bhi.n	80033ee <HAL_I2C_Mem_Read+0xb6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80033aa:	b2f2      	uxtb	r2, r6
 80033ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b0:	f7ff fd9e 	bl	8002ef0 <I2C_TransferConfig>
      Sizetmp = Size;
 80033b4:	4635      	mov	r5, r6
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80033b6:	4620      	mov	r0, r4
 80033b8:	2104      	movs	r1, #4
 80033ba:	2200      	movs	r2, #0
 80033bc:	4653      	mov	r3, sl
 80033be:	f7ff fdf5 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 80033c2:	bb30      	cbnz	r0, 8003412 <HAL_I2C_Mem_Read+0xda>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 80033c4:	6823      	ldr	r3, [r4, #0]

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 80033c6:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f809 3b01 	strb.w	r3, [r9], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   

      if((Sizetmp == 0)&&(Size!=0))
 80033ce:	3d01      	subs	r5, #1
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 80033d0:	b2b6      	uxth	r6, r6

      if((Sizetmp == 0)&&(Size!=0))
 80033d2:	d113      	bne.n	80033fc <HAL_I2C_Mem_Read+0xc4>
 80033d4:	b1a6      	cbz	r6, 8003400 <HAL_I2C_Mem_Read+0xc8>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80033d6:	4620      	mov	r0, r4
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	462a      	mov	r2, r5
 80033dc:	4653      	mov	r3, sl
 80033de:	f7ff fde5 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 80033e2:	b9b0      	cbnz	r0, 8003412 <HAL_I2C_Mem_Read+0xda>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033e4:	9500      	str	r5, [sp, #0]
 80033e6:	4620      	mov	r0, r4
 80033e8:	4641      	mov	r1, r8
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 80033ea:	2eff      	cmp	r6, #255	; 0xff
 80033ec:	e7dc      	b.n	80033a8 <HAL_I2C_Mem_Read+0x70>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033ee:	22ff      	movs	r2, #255	; 0xff
 80033f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f4:	f7ff fd7c 	bl	8002ef0 <I2C_TransferConfig>
          Sizetmp = 255;
 80033f8:	25ff      	movs	r5, #255	; 0xff
 80033fa:	e7dc      	b.n	80033b6 <HAL_I2C_Mem_Read+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 80033fc:	2e00      	cmp	r6, #0
 80033fe:	d1da      	bne.n	80033b6 <HAL_I2C_Mem_Read+0x7e>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8003400:	4620      	mov	r0, r4
 8003402:	2119      	movs	r1, #25
 8003404:	f7ff fe93 	bl	800312e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003408:	b128      	cbz	r0, 8003416 <HAL_I2C_Mem_Read+0xde>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800340e:	2b04      	cmp	r3, #4
 8003410:	d0a4      	beq.n	800335c <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 8003412:	2003      	movs	r0, #3
 8003414:	e00d      	b.n	8003432 <HAL_I2C_Mem_Read+0xfa>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	2220      	movs	r2, #32
 800341a:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	4a06      	ldr	r2, [pc, #24]	; (8003438 <HAL_I2C_Mem_Read+0x100>)
 8003420:	400a      	ands	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	2301      	movs	r3, #1
 8003426:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 800342e:	e000      	b.n	8003432 <HAL_I2C_Mem_Read+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2002      	movs	r0, #2
  }
}
 8003432:	b002      	add	sp, #8
 8003434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <HAL_I2C_GetState>:
  * @param  hi2c : I2C handle
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 800343c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8003440:	4770      	bx	lr

08003442 <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 8003442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003446:	4604      	mov	r4, r0
 8003448:	460f      	mov	r7, r1
 800344a:	4616      	mov	r6, r2
 800344c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800344e:	f7fe fc99 	bl	8001d84 <HAL_GetTick>
 8003452:	4680      	mov	r8, r0
     
  while((hspi->Instance->SR & Flag) != State)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	403a      	ands	r2, r7
 800345a:	42b2      	cmp	r2, r6
 800345c:	d034      	beq.n	80034c8 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 800345e:	1c6a      	adds	r2, r5, #1
 8003460:	d0f9      	beq.n	8003456 <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003462:	b94d      	cbnz	r5, 8003478 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800346c:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800346e:	6862      	ldr	r2, [r4, #4]
 8003470:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003474:	d112      	bne.n	800349c <SPI_WaitFlagStateUntilTimeout+0x5a>
 8003476:	e006      	b.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x44>
     
  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003478:	f7fe fc84 	bl	8001d84 <HAL_GetTick>
 800347c:	ebc8 0000 	rsb	r0, r8, r0
 8003480:	42a8      	cmp	r0, r5
 8003482:	d9e7      	bls.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x12>
 8003484:	e7ee      	b.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	68a2      	ldr	r2, [r4, #8]
 8003488:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800348c:	d002      	beq.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x52>
 800348e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003492:	d103      	bne.n	800349c <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800349c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800349e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 80034a2:	bf01      	itttt	eq
 80034a4:	681a      	ldreq	r2, [r3, #0]
 80034a6:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 80034aa:	601a      	streq	r2, [r3, #0]
 80034ac:	681a      	ldreq	r2, [r3, #0]
 80034ae:	bf04      	itt	eq
 80034b0:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80034b4:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034bc:	2300      	movs	r3, #0
 80034be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80034c2:	2003      	movs	r0, #3
 80034c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 80034c8:	2000      	movs	r0, #0
}
 80034ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034ce <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 80034ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80034d2:	4604      	mov	r4, r0
 80034d4:	460f      	mov	r7, r1
 80034d6:	4616      	mov	r6, r2
 80034d8:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 80034da:	f7fe fc53 	bl	8001d84 <HAL_GetTick>
 80034de:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 80034e0:	6821      	ldr	r1, [r4, #0]
 80034e2:	688a      	ldr	r2, [r1, #8]
 80034e4:	403a      	ands	r2, r7
 80034e6:	42b2      	cmp	r2, r6
 80034e8:	d03b      	beq.n	8003562 <SPI_WaitFifoStateUntilTimeout+0x94>
  {
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034ea:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 80034ee:	d104      	bne.n	80034fa <SPI_WaitFifoStateUntilTimeout+0x2c>
 80034f0:	b91e      	cbnz	r6, 80034fa <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 80034f2:	7b0b      	ldrb	r3, [r1, #12]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f88d 3007 	strb.w	r3, [sp, #7]
    }
    if(Timeout != HAL_MAX_DELAY)
 80034fa:	1c6b      	adds	r3, r5, #1
 80034fc:	d0f1      	beq.n	80034e2 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80034fe:	b94d      	cbnz	r5, 8003514 <SPI_WaitFifoStateUntilTimeout+0x46>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003508:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350a:	6862      	ldr	r2, [r4, #4]
 800350c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003510:	d112      	bne.n	8003538 <SPI_WaitFifoStateUntilTimeout+0x6a>
 8003512:	e006      	b.n	8003522 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
    }
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003514:	f7fe fc36 	bl	8001d84 <HAL_GetTick>
 8003518:	ebc8 0000 	rsb	r0, r8, r0
 800351c:	42a8      	cmp	r0, r5
 800351e:	d9df      	bls.n	80034e0 <SPI_WaitFifoStateUntilTimeout+0x12>
 8003520:	e7ee      	b.n	8003500 <SPI_WaitFifoStateUntilTimeout+0x32>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003522:	68a2      	ldr	r2, [r4, #8]
 8003524:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003528:	d002      	beq.n	8003530 <SPI_WaitFifoStateUntilTimeout+0x62>
 800352a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800352e:	d103      	bne.n	8003538 <SPI_WaitFifoStateUntilTimeout+0x6a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003538:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800353a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        {
          __HAL_SPI_RESET_CRC(hspi);
 800353e:	bf01      	itttt	eq
 8003540:	681a      	ldreq	r2, [r3, #0]
 8003542:	f422 5200 	biceq.w	r2, r2, #8192	; 0x2000
 8003546:	601a      	streq	r2, [r3, #0]
 8003548:	681a      	ldreq	r2, [r3, #0]
 800354a:	bf04      	itt	eq
 800354c:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 8003550:	601a      	streq	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 8003552:	2301      	movs	r3, #1
 8003554:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003558:	2300      	movs	r3, #0
 800355a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800355e:	2003      	movs	r0, #3
 8003560:	e000      	b.n	8003564 <SPI_WaitFifoStateUntilTimeout+0x96>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 8003562:	2000      	movs	r0, #0
}
 8003564:	b002      	add	sp, #8
 8003566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800356a <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800356a:	b538      	push	{r3, r4, r5, lr}
 800356c:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800356e:	2200      	movs	r2, #0
 8003570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003574:	462b      	mov	r3, r5
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8003576:	4604      	mov	r4, r0
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8003578:	f7ff ffa9 	bl	80034ce <SPI_WaitFifoStateUntilTimeout>
 800357c:	4602      	mov	r2, r0
 800357e:	b968      	cbnz	r0, 800359c <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8003580:	4620      	mov	r0, r4
 8003582:	2180      	movs	r1, #128	; 0x80
 8003584:	462b      	mov	r3, r5
 8003586:	f7ff ff5c 	bl	8003442 <SPI_WaitFlagStateUntilTimeout>
 800358a:	4602      	mov	r2, r0
 800358c:	b930      	cbnz	r0, 800359c <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800358e:	4620      	mov	r0, r4
 8003590:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003594:	462b      	mov	r3, r5
 8003596:	f7ff ff9a 	bl	80034ce <SPI_WaitFifoStateUntilTimeout>
 800359a:	b130      	cbz	r0, 80035aa <SPI_EndRxTxTransaction+0x40>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800359c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 80035a8:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80035aa:	bd38      	pop	{r3, r4, r5, pc}

080035ac <HAL_SPI_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80035ac:	4770      	bx	lr

080035ae <HAL_SPI_Init>:
  *         in the SPI_InitTypeDef and create the associated handle.
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ae:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80035b0:	4604      	mov	r4, r0
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d04c      	beq.n	8003650 <HAL_SPI_Init+0xa2>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
 80035bc:	f7ff fff6 	bl	80035ac <HAL_SPI_MspInit>
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035c0:	6821      	ldr	r1, [r4, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c2:	68e2      	ldr	r2, [r4, #12]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035c4:	680b      	ldr	r3, [r1, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ce:	600b      	str	r3, [r1, #0]
 80035d0:	f04f 0300 	mov.w	r3, #0
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035d4:	d903      	bls.n	80035de <HAL_SPI_Init+0x30>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035d6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 80035d8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80035dc:	e001      	b.n	80035e2 <HAL_SPI_Init+0x34>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80035e2:	bf18      	it	ne
 80035e4:	62a3      	strne	r3, [r4, #40]	; 0x28
  }
  
  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80035e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035e8:	b92b      	cbnz	r3, 80035f6 <HAL_SPI_Init+0x48>
  {
    /* CRC Lengtht aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035ea:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80035ee:	bf8c      	ite	hi
 80035f0:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80035f2:	2301      	movls	r3, #1
 80035f4:	6323      	str	r3, [r4, #48]	; 0x30
 80035f6:	6865      	ldr	r5, [r4, #4]
 80035f8:	68a6      	ldr	r6, [r4, #8]
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 80035fa:	69a3      	ldr	r3, [r4, #24]
 80035fc:	432e      	orrs	r6, r5
 80035fe:	6925      	ldr	r5, [r4, #16]
 8003600:	432e      	orrs	r6, r5
 8003602:	6965      	ldr	r5, [r4, #20]
 8003604:	432e      	orrs	r6, r5
 8003606:	69e5      	ldr	r5, [r4, #28]
 8003608:	432e      	orrs	r6, r5
 800360a:	6a25      	ldr	r5, [r4, #32]
 800360c:	432e      	orrs	r6, r5
 800360e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003610:	432e      	orrs	r6, r5
 8003612:	f403 7500 	and.w	r5, r3, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8003616:	4335      	orrs	r5, r6
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 8003618:	600d      	str	r5, [r1, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800361a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800361c:	2d02      	cmp	r5, #2
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800361e:	bf02      	ittt	eq
 8003620:	680d      	ldreq	r5, [r1, #0]
 8003622:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
 8003626:	600d      	streq	r5, [r1, #0]
 8003628:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800362a:	432a      	orrs	r2, r5
 800362c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	4315      	orrs	r5, r2
 8003632:	f003 0204 	and.w	r2, r3, #4
 8003636:	ea45 0302 	orr.w	r3, r5, r2
                         hspi->Init.DataSize ) | frxth;
 800363a:	4303      	orrs	r3, r0
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800363c:	604b      	str	r3, [r1, #4]
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800363e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003640:	610b      	str	r3, [r1, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003642:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 8003644:	2301      	movs	r3, #1
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003646:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800364a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  
  return HAL_OK;
 800364e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  { 
    return HAL_ERROR;
 8003650:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 8003652:	bd70      	pop	{r4, r5, r6, pc}

08003654 <HAL_SPI_MspDeInit>:
  * @brief SPI MSP DeInit
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8003654:	4770      	bx	lr

08003656 <HAL_SPI_DeInit>:
  * @brief  DeInitializes the SPI peripheral 
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003656:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003658:	4604      	mov	r4, r0
 800365a:	b188      	cbz	r0, 8003680 <HAL_SPI_DeInit+0x2a>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800365c:	6802      	ldr	r2, [r0, #0]
  if(hspi == NULL)
  {
     return HAL_ERROR;
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003664:	6813      	ldr	r3, [r2, #0]
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800366c:	f7ff fff2 	bl	8003654 <HAL_SPI_MspDeInit>
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003670:	2000      	movs	r0, #0
 8003672:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 8003676:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  
  __HAL_UNLOCK(hspi);
 800367a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
  return HAL_OK;
 800367e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
     return HAL_ERROR;
 8003680:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;
  
  __HAL_UNLOCK(hspi);
    
  return HAL_OK;
}
 8003682:	bd10      	pop	{r4, pc}

08003684 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint16_t tmpreg __attribute((unused)) = 0;
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8003688:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800368c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800368e:	f04f 0b00 	mov.w	fp, #0
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8003692:	2d01      	cmp	r5, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003694:	4604      	mov	r4, r0
 8003696:	4689      	mov	r9, r1
 8003698:	4692      	mov	sl, r2
 800369a:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800369c:	f8ad b006 	strh.w	fp, [sp, #6]
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 80036a0:	d001      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x22>
  {
    return HAL_BUSY;
 80036a2:	2002      	movs	r0, #2
 80036a4:	e138      	b.n	8003918 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80036a6:	2900      	cmp	r1, #0
 80036a8:	f000 8133 	beq.w	8003912 <HAL_SPI_TransmitReceive+0x28e>
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	f000 8130 	beq.w	8003912 <HAL_SPI_TransmitReceive+0x28e>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 812d 	beq.w	8003912 <HAL_SPI_TransmitReceive+0x28e>
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 80036b8:	f7fe fb64 	bl	8001d84 <HAL_GetTick>
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 80036bc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80036c0:	2b01      	cmp	r3, #1
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 80036c2:	4607      	mov	r7, r0
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 80036c4:	d0ed      	beq.n	80036a2 <HAL_SPI_TransmitReceive+0x1e>
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80036c6:	2305      	movs	r3, #5
 80036c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80036cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036ce:	6822      	ldr	r2, [r4, #0]
  }

  tickstart = HAL_GetTick();
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 80036d0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  {
    __HAL_SPI_RESET_CRC(hspi);
 80036d8:	bf08      	it	eq
 80036da:	6813      	ldreq	r3, [r2, #0]
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036dc:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 80036e0:	bf08      	it	eq
 80036e2:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = pRxData;
 80036e6:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036ea:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80036ee:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 80036f2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036f6:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 80036fa:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 80036fe:	bf04      	itt	eq
 8003700:	6013      	streq	r3, [r2, #0]
 8003702:	6813      	ldreq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8003704:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    __HAL_SPI_RESET_CRC(hspi);
 8003706:	bf04      	itt	eq
 8003708:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 800370c:	6013      	streq	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800370e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003712:	6853      	ldr	r3, [r2, #4]
  {
    __HAL_SPI_RESET_CRC(hspi);
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8003714:	d802      	bhi.n	800371c <HAL_SPI_TransmitReceive+0x98>
 8003716:	f1b8 0f01 	cmp.w	r8, #1
 800371a:	d902      	bls.n	8003722 <HAL_SPI_TransmitReceive+0x9e>
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800371c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003720:	e001      	b.n	8003726 <HAL_SPI_TransmitReceive+0xa2>
  }
  else
  {
    /* set fiforxthreshold according the reception data lenght: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003726:	6053      	str	r3, [r2, #4]
  }
  
  /* Check if the SPI is already enabled */ 
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	0658      	lsls	r0, r3, #25
  {
    /* Enable SPI peripheral */    
    __HAL_SPI_ENABLE(hspi);
 800372c:	bf5e      	ittt	pl
 800372e:	6813      	ldrpl	r3, [r2, #0]
 8003730:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003734:	6013      	strpl	r3, [r2, #0]
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003736:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800373a:	d94b      	bls.n	80037d4 <HAL_SPI_TransmitReceive+0x150>
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800373c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800373e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8003742:	2b00      	cmp	r3, #0
 8003744:	d034      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x12c>
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	6891      	ldr	r1, [r2, #8]
 800374a:	0789      	lsls	r1, r1, #30
 800374c:	d511      	bpl.n	8003772 <HAL_SPI_TransmitReceive+0xee>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003750:	8809      	ldrh	r1, [r1, #0]
 8003752:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003754:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003756:	3b01      	subs	r3, #1
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003758:	3102      	adds	r1, #2
        hspi->TxXferCount--;
 800375a:	b29b      	uxth	r3, r3
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800375c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800375e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8003760:	b93b      	cbnz	r3, 8003772 <HAL_SPI_TransmitReceive+0xee>
 8003762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003768:	bf02      	ittt	eq
 800376a:	6813      	ldreq	r3, [r2, #0]
 800376c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003770:	6013      	streq	r3, [r2, #0]
        } 
      }
      
      /* Wait until RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8003772:	b168      	cbz	r0, 8003790 <HAL_SPI_TransmitReceive+0x10c>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	07d2      	lsls	r2, r2, #31
 800377a:	d509      	bpl.n	8003790 <HAL_SPI_TransmitReceive+0x10c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003780:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003784:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003786:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800378a:	3b01      	subs	r3, #1
 800378c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 8003790:	1c75      	adds	r5, r6, #1
 8003792:	d0d3      	beq.n	800373c <HAL_SPI_TransmitReceive+0xb8>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 8003794:	b936      	cbnz	r6, 80037a4 <HAL_SPI_TransmitReceive+0x120>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003796:	2301      	movs	r3, #1
 8003798:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800379c:	2300      	movs	r3, #0
 800379e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80037a2:	e0b8      	b.n	8003916 <HAL_SPI_TransmitReceive+0x292>
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 80037a4:	f7fe faee 	bl	8001d84 <HAL_GetTick>
 80037a8:	1bc0      	subs	r0, r0, r7
 80037aa:	42b0      	cmp	r0, r6
 80037ac:	d9c6      	bls.n	800373c <HAL_SPI_TransmitReceive+0xb8>
 80037ae:	e7f2      	b.n	8003796 <HAL_SPI_TransmitReceive+0x112>
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d1de      	bne.n	8003772 <HAL_SPI_TransmitReceive+0xee>
      }
    }
  }
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80037b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ba:	f040 808a 	bne.w	80038d2 <HAL_SPI_TransmitReceive+0x24e>
 80037be:	e05d      	b.n	800387c <HAL_SPI_TransmitReceive+0x1f8>
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	6891      	ldr	r1, [r2, #8]
 80037c4:	0788      	lsls	r0, r1, #30
 80037c6:	d409      	bmi.n	80037dc <HAL_SPI_TransmitReceive+0x158>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 80037c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d126      	bne.n	800381e <HAL_SPI_TransmitReceive+0x19a>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 80037d0:	1c73      	adds	r3, r6, #1
 80037d2:	d146      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x1de>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 80037d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f2      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x13c>
 80037da:	e04a      	b.n	8003872 <HAL_SPI_TransmitReceive+0x1ee>
 80037dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
 80037de:	2b02      	cmp	r3, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80037e0:	bf9f      	itttt	ls
 80037e2:	1c4b      	addls	r3, r1, #1
 80037e4:	63a3      	strls	r3, [r4, #56]	; 0x38
 80037e6:	780b      	ldrbls	r3, [r1, #0]
 80037e8:	7313      	strbls	r3, [r2, #12]
          hspi->TxXferCount--;
 80037ea:	bf91      	iteee	ls
 80037ec:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80037ee:	8809      	ldrhhi	r1, [r1, #0]
 80037f0:	60d1      	strhi	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 80037f2:	3b02      	subhi	r3, #2
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 80037f4:	bf94      	ite	ls
 80037f6:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fa:	6ba2      	ldrhi	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
 80037fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 80037fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	bf84      	itt	hi
 8003802:	3202      	addhi	r2, #2
 8003804:	63a2      	strhi	r2, [r4, #56]	; 0x38
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
          hspi->TxXferCount--;
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1de      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x144>
 800380a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003810:	bf01      	itttt	eq
 8003812:	6822      	ldreq	r2, [r4, #0]
 8003814:	6813      	ldreq	r3, [r2, #0]
 8003816:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800381a:	6013      	streq	r3, [r2, #0]
 800381c:	e7d4      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x144>
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	6891      	ldr	r1, [r2, #8]
 8003822:	07c9      	lsls	r1, r1, #31
 8003824:	d5d4      	bpl.n	80037d0 <HAL_SPI_TransmitReceive+0x14c>
      {
        if(hspi->RxXferCount > 1)
 8003826:	2b01      	cmp	r3, #1
 8003828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800382a:	d910      	bls.n	800384e <HAL_SPI_TransmitReceive+0x1ca>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800382c:	68d1      	ldr	r1, [r2, #12]
 800382e:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003832:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 8003834:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003838:	3b02      	subs	r3, #2
 800383a:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800383c:	2b01      	cmp	r3, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 800383e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 8003842:	d8c5      	bhi.n	80037d0 <HAL_SPI_TransmitReceive+0x14c>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003844:	6853      	ldr	r3, [r2, #4]
 8003846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800384a:	6053      	str	r3, [r2, #4]
 800384c:	e7c0      	b.n	80037d0 <HAL_SPI_TransmitReceive+0x14c>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	6421      	str	r1, [r4, #64]	; 0x40
 8003852:	7b12      	ldrb	r2, [r2, #12]
 8003854:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8003856:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800385a:	3b01      	subs	r3, #1
 800385c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003860:	e7b6      	b.n	80037d0 <HAL_SPI_TransmitReceive+0x14c>
        }
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003862:	2e00      	cmp	r6, #0
 8003864:	d097      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x112>
 8003866:	f7fe fa8d 	bl	8001d84 <HAL_GetTick>
 800386a:	1bc0      	subs	r0, r0, r7
 800386c:	42b0      	cmp	r0, r6
 800386e:	d9b1      	bls.n	80037d4 <HAL_SPI_TransmitReceive+0x150>
 8003870:	e791      	b.n	8003796 <HAL_SPI_TransmitReceive+0x112>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8003872:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1a6      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x144>
 800387a:	e79b      	b.n	80037b4 <HAL_SPI_TransmitReceive+0x130>
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800387c:	2102      	movs	r1, #2
 800387e:	4620      	mov	r0, r4
 8003880:	460a      	mov	r2, r1
 8003882:	4633      	mov	r3, r6
 8003884:	f7ff fddd 	bl	8003442 <SPI_WaitFlagStateUntilTimeout>
 8003888:	b128      	cbz	r0, 8003896 <HAL_SPI_TransmitReceive+0x212>
    {  
      /* Erreur on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800388a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    }
    
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003896:	68e3      	ldr	r3, [r4, #12]
 8003898:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	d102      	bne.n	80038a6 <HAL_SPI_TransmitReceive+0x222>
    {
      tmpreg = hspi->Instance->DR;
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	e013      	b.n	80038ce <HAL_SPI_TransmitReceive+0x24a>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80038a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80038a8:	7b1b      	ldrb	r3, [r3, #12]
 80038aa:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80038ae:	2902      	cmp	r1, #2
 80038b0:	d10f      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x24e>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 80038b2:	4620      	mov	r0, r4
 80038b4:	460a      	mov	r2, r1
 80038b6:	4633      	mov	r3, r6
 80038b8:	f7ff fdc3 	bl	8003442 <SPI_WaitFlagStateUntilTimeout>
 80038bc:	b128      	cbz	r0, 80038ca <HAL_SPI_TransmitReceive+0x246>
        {  
          /* Erreur on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 80038be:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80038c2:	f043 0302 	orr.w	r3, r3, #2
 80038c6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        }    
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	7b1b      	ldrb	r3, [r3, #12]
 80038ce:	f8ad 3006 	strh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 80038d2:	4620      	mov	r0, r4
 80038d4:	4631      	mov	r1, r6
 80038d6:	f7ff fe48 	bl	800356a <SPI_EndRxTxTransaction>
 80038da:	b9e0      	cbnz	r0, 8003916 <HAL_SPI_TransmitReceive+0x292>
  }

  hspi->State = HAL_SPI_STATE_READY;
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80038dc:	6825      	ldr	r5, [r4, #0]
 80038de:	68aa      	ldr	r2, [r5, #8]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038e0:	2301      	movs	r3, #1
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80038e2:	f012 0110 	ands.w	r1, r2, #16
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038e6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80038ea:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80038ee:	d00a      	beq.n	8003906 <HAL_SPI_TransmitReceive+0x282>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 80038f0:	f042 0202 	orr.w	r2, r2, #2
 80038f4:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	60aa      	str	r2, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80038fe:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 8003902:	4618      	mov	r0, r3
 8003904:	e008      	b.n	8003918 <HAL_SPI_TransmitReceive+0x294>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 8003906:	1c10      	adds	r0, r2, #0
    
    return HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003908:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 800390c:	bf18      	it	ne
 800390e:	2001      	movne	r0, #1
 8003910:	e002      	b.n	8003918 <HAL_SPI_TransmitReceive+0x294>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 8003912:	4628      	mov	r0, r5
 8003914:	e000      	b.n	8003918 <HAL_SPI_TransmitReceive+0x294>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 8003916:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8003918:	b003      	add	sp, #12
 800391a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800391e <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800391e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 8003922:	4770      	bx	lr

08003924 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003924:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003926:	b180      	cbz	r0, 800394a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003928:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800392c:	b113      	cbz	r3, 8003934 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003934:	b109      	cbz	r1, 800393a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003936:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800393a:	2301      	movs	r3, #1
 800393c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003940:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003942:	f000 fc85 	bl	8004250 <USBD_LL_Init>
  
  return USBD_OK; 
 8003946:	2000      	movs	r0, #0
 8003948:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800394a:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 800394c:	bd08      	pop	{r3, pc}

0800394e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800394e:	b119      	cbz	r1, 8003958 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 8003950:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003954:	2000      	movs	r0, #0
 8003956:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003958:	2002      	movs	r0, #2
  }
  
  return status;
}
 800395a:	4770      	bx	lr

0800395c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800395c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800395e:	f000 fcb5 	bl	80042cc <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003962:	2000      	movs	r0, #0
 8003964:	bd08      	pop	{r3, pc}

08003966 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003966:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003968:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800396c:	b90b      	cbnz	r3, 8003972 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800396e:	2002      	movs	r0, #2
 8003970:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4798      	blx	r3
 8003976:	2800      	cmp	r0, #0
 8003978:	d1f9      	bne.n	800396e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800397a:	bd08      	pop	{r3, pc}

0800397c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800397c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800397e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4798      	blx	r3
  return USBD_OK;
}
 8003986:	2000      	movs	r0, #0
 8003988:	bd08      	pop	{r3, pc}

0800398a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800398a:	b538      	push	{r3, r4, r5, lr}
 800398c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800398e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f8c8 	bl	8003b28 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003998:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800399a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800399e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80039a2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80039a6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80039aa:	f001 031f 	and.w	r3, r1, #31
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d00c      	beq.n	80039cc <USBD_LL_SetupStage+0x42>
 80039b2:	d306      	bcc.n	80039c2 <USBD_LL_SetupStage+0x38>
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d10e      	bne.n	80039d6 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80039b8:	4620      	mov	r0, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	f000 f9f8 	bl	8003db0 <USBD_StdEPReq>
    break;
 80039c0:	e00e      	b.n	80039e0 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	f000 f8cf 	bl	8003b68 <USBD_StdDevReq>
    break;
 80039ca:	e009      	b.n	80039e0 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80039cc:	4620      	mov	r0, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	f000 f9d6 	bl	8003d80 <USBD_StdItfReq>
    break;
 80039d4:	e004      	b.n	80039e0 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80039d6:	4620      	mov	r0, r4
 80039d8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80039dc:	f000 fc8e 	bl	80042fc <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80039e0:	2000      	movs	r0, #0
 80039e2:	bd38      	pop	{r3, r4, r5, pc}

080039e4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80039e4:	b510      	push	{r4, lr}
 80039e6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80039e8:	bb09      	cbnz	r1, 8003a2e <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80039ea:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d126      	bne.n	8003a40 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 80039f2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80039f6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80039fa:	4299      	cmp	r1, r3
 80039fc:	d90a      	bls.n	8003a14 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 80039fe:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003a00:	428b      	cmp	r3, r1
 8003a02:	bf28      	it	cs
 8003a04:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8003a06:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	f000 fa6c 	bl	8003eea <USBD_CtlContinueRx>
 8003a12:	e015      	b.n	8003a40 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003a14:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	b123      	cbz	r3, 8003a26 <USBD_LL_DataOutStage+0x42>
 8003a1c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a20:	2a03      	cmp	r2, #3
 8003a22:	d100      	bne.n	8003a26 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8003a24:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 fa68 	bl	8003efc <USBD_CtlSendStatus>
 8003a2c:	e008      	b.n	8003a40 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003a2e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	b123      	cbz	r3, 8003a40 <USBD_LL_DataOutStage+0x5c>
 8003a36:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003a3a:	2a03      	cmp	r2, #3
 8003a3c:	d100      	bne.n	8003a40 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003a3e:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003a40:	2000      	movs	r0, #0
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003a48:	bba9      	cbnz	r1, 8003ab6 <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003a4a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d129      	bne.n	8003aa6 <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 8003a52:	69c5      	ldr	r5, [r0, #28]
 8003a54:	6a03      	ldr	r3, [r0, #32]
 8003a56:	429d      	cmp	r5, r3
 8003a58:	d906      	bls.n	8003a68 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 8003a5a:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 8003a5c:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8003a5e:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	f000 fa29 	bl	8003eb8 <USBD_CtlContinueSendData>
 8003a66:	e01e      	b.n	8003aa6 <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8003a68:	6982      	ldr	r2, [r0, #24]
 8003a6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003a6e:	fb03 2515 	mls	r5, r3, r5, r2
 8003a72:	b95d      	cbnz	r5, 8003a8c <USBD_LL_DataInStage+0x48>
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d309      	bcc.n	8003a8c <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 8003a78:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d205      	bcs.n	8003a8c <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003a80:	462a      	mov	r2, r5
 8003a82:	f000 fa19 	bl	8003eb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003a86:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8003a8a:	e00c      	b.n	8003aa6 <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003a8c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	b12b      	cbz	r3, 8003aa0 <USBD_LL_DataInStage+0x5c>
 8003a94:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003a98:	2a03      	cmp	r2, #3
 8003a9a:	d101      	bne.n	8003aa0 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 fa36 	bl	8003f12 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003aa6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10c      	bne.n	8003ac8 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8003ab4:	e008      	b.n	8003ac8 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8003ab6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	b123      	cbz	r3, 8003ac8 <USBD_LL_DataInStage+0x84>
 8003abe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003ac2:	2a03      	cmp	r2, #3
 8003ac4:	d100      	bne.n	8003ac8 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8003ac6:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003ac8:	2000      	movs	r0, #0
 8003aca:	bd38      	pop	{r3, r4, r5, pc}

08003acc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003acc:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ace:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003ad0:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ad2:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003ad4:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ad6:	2340      	movs	r3, #64	; 0x40
 8003ad8:	f000 fbff 	bl	80042da <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003adc:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003ade:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	2180      	movs	r1, #128	; 0x80
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f000 fbf7 	bl	80042da <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003af2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003af6:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8003af8:	b12b      	cbz	r3, 8003b06 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003afa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003afe:	7921      	ldrb	r1, [r4, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4620      	mov	r0, r4
 8003b04:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003b06:	2000      	movs	r0, #0
 8003b08:	bd38      	pop	{r3, r4, r5, pc}

08003b0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003b0a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	4770      	bx	lr

08003b10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003b10:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b12:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003b16:	2a03      	cmp	r2, #3
 8003b18:	d104      	bne.n	8003b24 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003b1a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	b103      	cbz	r3, 8003b24 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003b22:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003b24:	2000      	movs	r0, #0
 8003b26:	bd08      	pop	{r3, pc}

08003b28 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003b28:	780b      	ldrb	r3, [r1, #0]
 8003b2a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003b2c:	784b      	ldrb	r3, [r1, #1]
 8003b2e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003b30:	78ca      	ldrb	r2, [r1, #3]
 8003b32:	788b      	ldrb	r3, [r1, #2]
 8003b34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b38:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003b3a:	794a      	ldrb	r2, [r1, #5]
 8003b3c:	790b      	ldrb	r3, [r1, #4]
 8003b3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b42:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003b44:	79ca      	ldrb	r2, [r1, #7]
 8003b46:	798b      	ldrb	r3, [r1, #6]
 8003b48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003b4c:	80c3      	strh	r3, [r0, #6]
 8003b4e:	4770      	bx	lr

08003b50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003b50:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8003b52:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003b54:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003b56:	f000 fbd1 	bl	80042fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	2100      	movs	r1, #0
}
 8003b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8003b62:	f000 bbcb 	b.w	80042fc <USBD_LL_StallEP>
	...

08003b68 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003b68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003b6a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003b70:	2b09      	cmp	r3, #9
 8003b72:	f200 80fc 	bhi.w	8003d6e <USBD_StdDevReq+0x206>
 8003b76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003b7a:	00ce      	.short	0x00ce
 8003b7c:	00fa00e5 	.word	0x00fa00e5
 8003b80:	00fa00e1 	.word	0x00fa00e1
 8003b84:	000a0077 	.word	0x000a0077
 8003b88:	00bd00fa 	.word	0x00bd00fa
 8003b8c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8003b8e:	884b      	ldrh	r3, [r1, #2]
 8003b90:	0a1a      	lsrs	r2, r3, #8
 8003b92:	3a01      	subs	r2, #1
 8003b94:	2a06      	cmp	r2, #6
 8003b96:	f200 80ea 	bhi.w	8003d6e <USBD_StdDevReq+0x206>
 8003b9a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003b9e:	0007      	.short	0x0007
 8003ba0:	0018000b 	.word	0x0018000b
 8003ba4:	00e800e8 	.word	0x00e800e8
 8003ba8:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003bac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	e02c      	b.n	8003c0e <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003bb4:	7c02      	ldrb	r2, [r0, #16]
 8003bb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003bba:	b90a      	cbnz	r2, 8003bc0 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	e000      	b.n	8003bc2 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f10d 0006 	add.w	r0, sp, #6
 8003bc6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003bc8:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003bca:	4601      	mov	r1, r0
 8003bcc:	e03c      	b.n	8003c48 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	f200 80cc 	bhi.w	8003d6e <USBD_StdDevReq+0x206>
 8003bd6:	e8df f003 	tbb	[pc, r3]
 8003bda:	0703      	.short	0x0703
 8003bdc:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003be0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	e012      	b.n	8003c0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003be8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	e00e      	b.n	8003c0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003bf0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	e00a      	b.n	8003c0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003bf8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	e006      	b.n	8003c0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003c00:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	e002      	b.n	8003c0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003c08:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	7c20      	ldrb	r0, [r4, #16]
 8003c10:	f10d 0106 	add.w	r1, sp, #6
 8003c14:	4798      	blx	r3
 8003c16:	e009      	b.n	8003c2c <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003c18:	7c03      	ldrb	r3, [r0, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 80a7 	bne.w	8003d6e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003c20:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c24:	f10d 0006 	add.w	r0, sp, #6
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	4798      	blx	r3
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	e00c      	b.n	8003c4a <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003c30:	7c03      	ldrb	r3, [r0, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 809b 	bne.w	8003d6e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003c38:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c3c:	f10d 0006 	add.w	r0, sp, #6
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003c44:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003c46:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003c48:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8003c4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8091 	beq.w	8003d76 <USBD_StdDevReq+0x20e>
 8003c54:	88ea      	ldrh	r2, [r5, #6]
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	f000 808d 	beq.w	8003d76 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	bf28      	it	cs
 8003c60:	461a      	movcs	r2, r3
 8003c62:	f8ad 2006 	strh.w	r2, [sp, #6]
 8003c66:	e054      	b.n	8003d12 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003c68:	888b      	ldrh	r3, [r1, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d17f      	bne.n	8003d6e <USBD_StdDevReq+0x206>
 8003c6e:	88cb      	ldrh	r3, [r1, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d17c      	bne.n	8003d6e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003c74:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003c78:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003c7a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003c7c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003c80:	d075      	beq.n	8003d6e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8003c82:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003c86:	4631      	mov	r1, r6
 8003c88:	f000 fb59 	bl	800433e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 f935 	bl	8003efc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8003c92:	b10e      	cbz	r6, 8003c98 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003c94:	2302      	movs	r3, #2
 8003c96:	e000      	b.n	8003c9a <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8003c9e:	e06a      	b.n	8003d76 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003ca0:	7889      	ldrb	r1, [r1, #2]
 8003ca2:	4e36      	ldr	r6, [pc, #216]	; (8003d7c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003ca4:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003ca6:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003ca8:	d861      	bhi.n	8003d6e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8003caa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d002      	beq.n	8003cb8 <USBD_StdDevReq+0x150>
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d008      	beq.n	8003cc8 <USBD_StdDevReq+0x160>
 8003cb6:	e05a      	b.n	8003d6e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d054      	beq.n	8003d66 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8003cbc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003cbe:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8003cc0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003cc2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8003cc6:	e00f      	b.n	8003ce8 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8003cc8:	b931      	cbnz	r1, 8003cd8 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003cd0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003cd2:	f7ff fe53 	bl	800397c <USBD_ClrClassConfig>
 8003cd6:	e046      	b.n	8003d66 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8003cd8:	6841      	ldr	r1, [r0, #4]
 8003cda:	2901      	cmp	r1, #1
 8003cdc:	d043      	beq.n	8003d66 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003cde:	b2c9      	uxtb	r1, r1
 8003ce0:	f7ff fe4c 	bl	800397c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8003ce4:	7831      	ldrb	r1, [r6, #0]
 8003ce6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f7ff fe3c 	bl	8003966 <USBD_SetClassConfig>
 8003cee:	2802      	cmp	r0, #2
 8003cf0:	d139      	bne.n	8003d66 <USBD_StdDevReq+0x1fe>
 8003cf2:	e03c      	b.n	8003d6e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8003cf4:	88ca      	ldrh	r2, [r1, #6]
 8003cf6:	2a01      	cmp	r2, #1
 8003cf8:	d139      	bne.n	8003d6e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8003cfa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d003      	beq.n	8003d0a <USBD_StdDevReq+0x1a2>
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d133      	bne.n	8003d6e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8003d06:	1d01      	adds	r1, r0, #4
 8003d08:	e015      	b.n	8003d36 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8003d12:	4620      	mov	r0, r4
 8003d14:	e00f      	b.n	8003d36 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8003d16:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003d1a:	3b02      	subs	r3, #2
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d826      	bhi.n	8003d6e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003d20:	2301      	movs	r3, #1
 8003d22:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8003d24:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003d28:	b10b      	cbz	r3, 8003d2e <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f104 010c 	add.w	r1, r4, #12
 8003d34:	2202      	movs	r2, #2
 8003d36:	f000 f8b1 	bl	8003e9c <USBD_CtlSendData>
 8003d3a:	e01c      	b.n	8003d76 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003d3c:	884b      	ldrh	r3, [r1, #2]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d119      	bne.n	8003d76 <USBD_StdDevReq+0x20e>
 8003d42:	e008      	b.n	8003d56 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8003d44:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003d48:	3b02      	subs	r3, #2
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d80f      	bhi.n	8003d6e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003d4e:	884b      	ldrh	r3, [r1, #2]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003d5a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003d5e:	4620      	mov	r0, r4
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4629      	mov	r1, r5
 8003d64:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 f8c8 	bl	8003efc <USBD_CtlSendStatus>
 8003d6c:	e003      	b.n	8003d76 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 8003d6e:	4620      	mov	r0, r4
 8003d70:	4629      	mov	r1, r5
 8003d72:	f7ff feed 	bl	8003b50 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8003d76:	2000      	movs	r0, #0
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	20000b90 	.word	0x20000b90

08003d80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003d80:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8003d82:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003d86:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003d88:	4604      	mov	r4, r0
 8003d8a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8003d8c:	d10c      	bne.n	8003da8 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003d8e:	790b      	ldrb	r3, [r1, #4]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d809      	bhi.n	8003da8 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8003d94:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003d9c:	88eb      	ldrh	r3, [r5, #6]
 8003d9e:	b92b      	cbnz	r3, 8003dac <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 f8ab 	bl	8003efc <USBD_CtlSendStatus>
 8003da6:	e001      	b.n	8003dac <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8003da8:	f7ff fed2 	bl	8003b50 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8003dac:	2000      	movs	r0, #0
 8003dae:	bd38      	pop	{r3, r4, r5, pc}

08003db0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003db0:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 8003db2:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003db4:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 8003db6:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003db8:	4604      	mov	r4, r0
 8003dba:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003dbc:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 8003dbe:	d010      	beq.n	8003de2 <USBD_StdEPReq+0x32>
 8003dc0:	d326      	bcc.n	8003e10 <USBD_StdEPReq+0x60>
 8003dc2:	2e03      	cmp	r6, #3
 8003dc4:	d14b      	bne.n	8003e5e <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8003dc6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003dca:	2a02      	cmp	r2, #2
 8003dcc:	d027      	beq.n	8003e1e <USBD_StdEPReq+0x6e>
 8003dce:	2a03      	cmp	r2, #3
 8003dd0:	d143      	bne.n	8003e5a <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003dd2:	884a      	ldrh	r2, [r1, #2]
 8003dd4:	b992      	cbnz	r2, 8003dfc <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003dd6:	065e      	lsls	r6, r3, #25
 8003dd8:	d010      	beq.n	8003dfc <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f000 fa8e 	bl	80042fc <USBD_LL_StallEP>
 8003de0:	e00c      	b.n	8003dfc <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8003de2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003de6:	2a02      	cmp	r2, #2
 8003de8:	d019      	beq.n	8003e1e <USBD_StdEPReq+0x6e>
 8003dea:	2a03      	cmp	r2, #3
 8003dec:	d135      	bne.n	8003e5a <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003dee:	884a      	ldrh	r2, [r1, #2]
 8003df0:	bbaa      	cbnz	r2, 8003e5e <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8003df2:	0659      	lsls	r1, r3, #25
 8003df4:	d008      	beq.n	8003e08 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003df6:	4619      	mov	r1, r3
 8003df8:	f000 fa87 	bl	800430a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8003dfc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003e00:	4620      	mov	r0, r4
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4629      	mov	r1, r5
 8003e06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 f877 	bl	8003efc <USBD_CtlSendStatus>
 8003e0e:	e026      	b.n	8003e5e <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8003e10:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8003e14:	2d02      	cmp	r5, #2
 8003e16:	d002      	beq.n	8003e1e <USBD_StdEPReq+0x6e>
 8003e18:	2d03      	cmp	r5, #3
 8003e1a:	d006      	beq.n	8003e2a <USBD_StdEPReq+0x7a>
 8003e1c:	e01d      	b.n	8003e5a <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8003e1e:	065a      	lsls	r2, r3, #25
 8003e20:	d01d      	beq.n	8003e5e <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8003e22:	4619      	mov	r1, r3
 8003e24:	f000 fa6a 	bl	80042fc <USBD_LL_StallEP>
 8003e28:	e019      	b.n	8003e5e <USBD_StdEPReq+0xae>
 8003e2a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003e2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003e32:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003e36:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003e38:	bf14      	ite	ne
 8003e3a:	3514      	addne	r5, #20
 8003e3c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003e40:	f000 fa6a 	bl	8004318 <USBD_LL_IsStallEP>
 8003e44:	b110      	cbz	r0, 8003e4c <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 8003e46:	2301      	movs	r3, #1
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	e000      	b.n	8003e4e <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 8003e4c:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	2202      	movs	r2, #2
 8003e54:	f000 f822 	bl	8003e9c <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8003e58:	e001      	b.n	8003e5e <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 8003e5a:	f7ff fe79 	bl	8003b50 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8003e5e:	2000      	movs	r0, #0
 8003e60:	bd70      	pop	{r4, r5, r6, pc}

08003e62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003e62:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8003e64:	b1c8      	cbz	r0, 8003e9a <USBD_GetString+0x38>
 8003e66:	4604      	mov	r4, r0
 8003e68:	1a23      	subs	r3, r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003e6a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	d1f9      	bne.n	8003e68 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	3302      	adds	r3, #2
 8003e78:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003e7a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	704b      	strb	r3, [r1, #1]
 8003e80:	3801      	subs	r0, #1
 8003e82:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8003e84:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003e88:	b13c      	cbz	r4, 8003e9a <USBD_GetString+0x38>
    {
      unicode[idx++] = *desc++;
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8003e90:	3302      	adds	r3, #2
 8003e92:	2400      	movs	r4, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	548c      	strb	r4, [r1, r2]
 8003e98:	e7f4      	b.n	8003e84 <USBD_GetString+0x22>
 8003e9a:	bd30      	pop	{r4, r5, pc}

08003e9c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003ea8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8003eaa:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003eac:	2100      	movs	r1, #0
 8003eae:	462a      	mov	r2, r5
 8003eb0:	f000 fa4c 	bl	800434c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}

08003eb8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	f000 fa43 	bl	800434c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003eca:	b538      	push	{r3, r4, r5, lr}
 8003ecc:	4613      	mov	r3, r2
 8003ece:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003ed6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8003eda:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003ede:	2100      	movs	r1, #0
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	f000 fa3a 	bl	800435a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}

08003eea <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003eea:	b510      	push	{r4, lr}
 8003eec:	460c      	mov	r4, r1
 8003eee:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	f000 fa31 	bl	800435a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003ef8:	2000      	movs	r0, #0
 8003efa:	bd10      	pop	{r4, pc}

08003efc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003efc:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003efe:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003f00:	2304      	movs	r3, #4
 8003f02:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003f06:	460a      	mov	r2, r1
 8003f08:	460b      	mov	r3, r1
 8003f0a:	f000 fa1f 	bl	800434c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003f0e:	2000      	movs	r0, #0
 8003f10:	bd08      	pop	{r3, pc}

08003f12 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003f12:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003f14:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003f16:	2305      	movs	r3, #5
 8003f18:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f000 fa1b 	bl	800435a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003f24:	2000      	movs	r0, #0
 8003f26:	bd08      	pop	{r3, pc}

08003f28 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003f28:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003f2c:	b11b      	cbz	r3, 8003f36 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003f34:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003f36:	2002      	movs	r0, #2
  }
}
 8003f38:	4770      	bx	lr

08003f3a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003f3a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003f3e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003f40:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003f44:	b15b      	cbz	r3, 8003f5e <USBD_CDC_EP0_RxReady+0x24>
 8003f46:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003f4a:	28ff      	cmp	r0, #255	; 0xff
 8003f4c:	d007      	beq.n	8003f5e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003f54:	4621      	mov	r1, r4
 8003f56:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8003f58:	23ff      	movs	r3, #255	; 0xff
 8003f5a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003f5e:	2000      	movs	r0, #0
 8003f60:	bd10      	pop	{r4, pc}
	...

08003f64 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003f64:	2343      	movs	r3, #67	; 0x43
 8003f66:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003f68:	4800      	ldr	r0, [pc, #0]	; (8003f6c <USBD_CDC_GetFSCfgDesc+0x8>)
 8003f6a:	4770      	bx	lr
 8003f6c:	20000018 	.word	0x20000018

08003f70 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003f70:	2343      	movs	r3, #67	; 0x43
 8003f72:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003f74:	4800      	ldr	r0, [pc, #0]	; (8003f78 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003f76:	4770      	bx	lr
 8003f78:	200000e4 	.word	0x200000e4

08003f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003f7c:	2343      	movs	r3, #67	; 0x43
 8003f7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003f80:	4800      	ldr	r0, [pc, #0]	; (8003f84 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003f82:	4770      	bx	lr
 8003f84:	200000a0 	.word	0x200000a0

08003f88 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003f88:	230a      	movs	r3, #10
 8003f8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003f8c:	4800      	ldr	r0, [pc, #0]	; (8003f90 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003f8e:	4770      	bx	lr
 8003f90:	20000094 	.word	0x20000094

08003f94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003f98:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003f9c:	f000 f9e4 	bl	8004368 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003fa0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003fa4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003fa8:	b14b      	cbz	r3, 8003fbe <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003faa:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003fae:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003fb8:	4798      	blx	r3

    return USBD_OK;
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 8003fbe:	2002      	movs	r0, #2
  }
}
 8003fc0:	bd38      	pop	{r3, r4, r5, pc}

08003fc2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc4:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fc6:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8003fc8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fcc:	f001 0360 	and.w	r3, r1, #96	; 0x60
 8003fd0:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003fd2:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fd4:	d120      	bne.n	8004018 <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003fd6:	88e2      	ldrh	r2, [r4, #6]
 8003fd8:	7863      	ldrb	r3, [r4, #1]
 8003fda:	b1ba      	cbz	r2, 800400c <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 8003fdc:	0609      	lsls	r1, r1, #24
 8003fde:	d50b      	bpl.n	8003ff8 <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003fe0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	688f      	ldr	r7, [r1, #8]
 8003fe8:	4629      	mov	r1, r5
 8003fea:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8003fec:	4630      	mov	r0, r6
 8003fee:	4629      	mov	r1, r5
 8003ff0:	88e2      	ldrh	r2, [r4, #6]
 8003ff2:	f7ff ff53 	bl	8003e9c <USBD_CtlSendData>
 8003ff6:	e00f      	b.n	8004018 <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8003ff8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003ffc:	88e3      	ldrh	r3, [r4, #6]
 8003ffe:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8004002:	4629      	mov	r1, r5
 8004004:	88e2      	ldrh	r2, [r4, #6]
 8004006:	f7ff ff60 	bl	8003eca <USBD_CtlPrepareRx>
 800400a:	e005      	b.n	8004018 <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800400c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004010:	4618      	mov	r0, r3
 8004012:	688c      	ldr	r4, [r1, #8]
 8004014:	4611      	mov	r1, r2
 8004016:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004018:	2000      	movs	r0, #0
 800401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800401c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800401c:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800401e:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004020:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004022:	f000 f964 	bl	80042ee <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004026:	2101      	movs	r1, #1
 8004028:	4620      	mov	r0, r4
 800402a:	f000 f960 	bl	80042ee <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800402e:	4620      	mov	r0, r4
 8004030:	2182      	movs	r1, #130	; 0x82
 8004032:	f000 f95c 	bl	80042ee <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004036:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800403a:	b153      	cbz	r3, 8004052 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800403c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004044:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004048:	f000 f998 	bl	800437c <USBD_static_free>
    pdev->pClassData = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004052:	2000      	movs	r0, #0
 8004054:	bd10      	pop	{r4, pc}

08004056 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004058:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800405a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800405c:	2181      	movs	r1, #129	; 0x81
 800405e:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004060:	b94b      	cbnz	r3, 8004076 <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004066:	f000 f938 	bl	80042da <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800406a:	4620      	mov	r0, r4
 800406c:	2101      	movs	r1, #1
 800406e:	2202      	movs	r2, #2
 8004070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004074:	e006      	b.n	8004084 <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	f000 f92f 	bl	80042da <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800407c:	4620      	mov	r0, r4
 800407e:	2101      	movs	r1, #1
 8004080:	2202      	movs	r2, #2
 8004082:	2340      	movs	r3, #64	; 0x40
 8004084:	f000 f929 	bl	80042da <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004088:	2182      	movs	r1, #130	; 0x82
 800408a:	2203      	movs	r2, #3
 800408c:	2308      	movs	r3, #8
 800408e:	4620      	mov	r0, r4
 8004090:	f000 f923 	bl	80042da <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004094:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004098:	f000 f96c 	bl	8004374 <USBD_static_malloc>
 800409c:	4606      	mov	r6, r0
 800409e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80040a2:	b1c8      	cbz	r0, 80040d8 <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80040a4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80040ac:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040ae:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80040b2:	2500      	movs	r5, #0
 80040b4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040b8:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 80040ba:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040be:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80040c0:	b92f      	cbnz	r7, 80040ce <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c6:	f000 f948 	bl	800435a <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80040ca:	4638      	mov	r0, r7
 80040cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	f000 f943 	bl	800435a <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80040d4:	4628      	mov	r0, r5
 80040d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 80040d8:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040dc <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80040dc:	b119      	cbz	r1, 80040e6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80040de:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80040e2:	2000      	movs	r0, #0
 80040e4:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80040e6:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 80040e8:	4770      	bx	lr

080040ea <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80040ea:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80040ee:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 80040f0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80040f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 80040f8:	4770      	bx	lr

080040fa <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80040fa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80040fe:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8004100:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8004104:	4770      	bx	lr

08004106 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004106:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004108:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800410c:	b175      	cbz	r5, 800412c <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800410e:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8004112:	b96c      	cbnz	r4, 8004130 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004114:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8004118:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800411c:	2181      	movs	r1, #129	; 0x81
 800411e:	f000 f915 	bl	800434c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8004128:	4620      	mov	r0, r4
 800412a:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800412c:	2002      	movs	r0, #2
 800412e:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004130:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004132:	bd38      	pop	{r3, r4, r5, pc}

08004134 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004134:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004138:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800413a:	b163      	cbz	r3, 8004156 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800413c:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800413e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004142:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004144:	b914      	cbnz	r4, 800414c <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800414a:	e000      	b.n	800414e <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800414c:	2340      	movs	r3, #64	; 0x40
 800414e:	f000 f904 	bl	800435a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004152:	2000      	movs	r0, #0
 8004154:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8004156:	2002      	movs	r0, #2
  }
}
 8004158:	bd10      	pop	{r4, pc}
	...

0800415c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8004160:	4c24      	ldr	r4, [pc, #144]	; (80041f4 <HAL_PCD_MspInit+0x98>)
 8004162:	6963      	ldr	r3, [r4, #20]
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800416a:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800416c:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800416e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004172:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004174:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004178:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800417c:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004180:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004182:	a901      	add	r1, sp, #4
 8004184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004188:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800418a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800418e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004192:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004194:	f7fd fe6e 	bl	8001e74 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 8004198:	4631      	mov	r1, r6
 800419a:	462a      	mov	r2, r5
 800419c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041a0:	f7fd ff32 	bl	8002008 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7fd fdf3 	bl	8001d90 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 80041aa:	4631      	mov	r1, r6
 80041ac:	2201      	movs	r2, #1
 80041ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041b2:	f7fd ff29 	bl	8002008 <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80041b8:	a901      	add	r1, sp, #4
 80041ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041be:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80041c0:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80041c4:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80041c8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80041ca:	f7fd fe53 	bl	8001e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 80041ce:	69e3      	ldr	r3, [r4, #28]
 80041d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d4:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80041de:	2105      	movs	r1, #5
 80041e0:	462a      	mov	r2, r5
 80041e2:	2014      	movs	r0, #20
 80041e4:	f7fd fdf4 	bl	8001dd0 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 80041e8:	2014      	movs	r0, #20
 80041ea:	f7fd fe21 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 80041ee:	b006      	add	sp, #24
 80041f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80041f8:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80041fa:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 80041fe:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004202:	f7ff bbc2 	b.w	800398a <USBD_LL_SetupStage>

08004206 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004206:	231c      	movs	r3, #28
 8004208:	fb03 0301 	mla	r3, r3, r1, r0
 800420c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004210:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004214:	f7ff bbe6 	b.w	80039e4 <USBD_LL_DataOutStage>

08004218 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004218:	231c      	movs	r3, #28
 800421a:	fb03 0301 	mla	r3, r3, r1, r0
 800421e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	f7ff bc0e 	b.w	8003a44 <USBD_LL_DataInStage>

08004228 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8004228:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800422c:	f7ff bc70 	b.w	8003b10 <USBD_LL_SOF>

08004230 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004230:	b510      	push	{r4, lr}
 8004232:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004234:	2101      	movs	r1, #1
 8004236:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800423a:	f7ff fc66 	bl	8003b0a <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800423e:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8004242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004246:	f7ff bc41 	b.w	8003acc <USBD_LL_Reset>

0800424a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800424a:	4770      	bx	lr

0800424c <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800424c:	4770      	bx	lr
	...

08004250 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004250:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004254:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 8004256:	481c      	ldr	r0, [pc, #112]	; (80042c8 <USBD_LL_Init+0x78>)
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8004258:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 800425c:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800425e:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004260:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004264:	2302      	movs	r3, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8004266:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004268:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800426a:	6083      	str	r3, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800426c:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8004270:	f7fd fed3 	bl	800201a <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8004274:	4621      	mov	r1, r4
 8004276:	4622      	mov	r2, r4
 8004278:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800427c:	2340      	movs	r3, #64	; 0x40
 800427e:	f7fe fdf4 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	4622      	mov	r2, r4
 8004286:	460b      	mov	r3, r1
 8004288:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800428c:	f7fe fded 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 8004290:	4622      	mov	r2, r4
 8004292:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004296:	2181      	movs	r1, #129	; 0x81
 8004298:	23c0      	movs	r3, #192	; 0xc0
 800429a:	f7fe fde6 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800429e:	4622      	mov	r2, r4
 80042a0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80042a4:	2101      	movs	r1, #1
 80042a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80042aa:	f7fe fdde 	bl	8002e6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 80042ae:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80042b2:	2182      	movs	r1, #130	; 0x82
 80042b4:	4622      	mov	r2, r4
 80042b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ba:	f7fe fdd6 	bl	8002e6a <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 80042be:	4620      	mov	r0, r4
 80042c0:	bd38      	pop	{r3, r4, r5, pc}
 80042c2:	bf00      	nop
 80042c4:	40005c00 	.word	0x40005c00
 80042c8:	20001160 	.word	0x20001160

080042cc <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80042cc:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80042ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80042d2:	f7fd feef 	bl	80020b4 <HAL_PCD_Start>
  return USBD_OK;
}
 80042d6:	2000      	movs	r0, #0
 80042d8:	bd08      	pop	{r3, pc}

080042da <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80042da:	b510      	push	{r4, lr}
 80042dc:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 80042de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80042e2:	461a      	mov	r2, r3
 80042e4:	4623      	mov	r3, r4
 80042e6:	f7fd ff01 	bl	80020ec <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80042ea:	2000      	movs	r0, #0
 80042ec:	bd10      	pop	{r4, pc}

080042ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80042ee:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80042f0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80042f4:	f7fe f896 	bl	8002424 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80042f8:	2000      	movs	r0, #0
 80042fa:	bd08      	pop	{r3, pc}

080042fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80042fc:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80042fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004302:	f7fe fcfd 	bl	8002d00 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8004306:	2000      	movs	r0, #0
 8004308:	bd08      	pop	{r3, pc}

0800430a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800430a:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800430c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004310:	f7fe fd47 	bl	8002da2 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8004314:	2000      	movs	r0, #0
 8004316:	bd08      	pop	{r3, pc}

08004318 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004318:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800431c:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004320:	bf18      	it	ne
 8004322:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004326:	f04f 001c 	mov.w	r0, #28
 800432a:	bf15      	itete	ne
 800432c:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004330:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004334:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004338:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 800433c:	4770      	bx	lr

0800433e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800433e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004340:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004344:	f7fd febc 	bl	80020c0 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8004348:	2000      	movs	r0, #0
 800434a:	bd08      	pop	{r3, pc}

0800434c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800434c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800434e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004352:	f7fe f9c1 	bl	80026d8 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8004356:	2000      	movs	r0, #0
 8004358:	bd08      	pop	{r3, pc}

0800435a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800435a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800435c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004360:	f7fe f938 	bl	80025d4 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004364:	2000      	movs	r0, #0
 8004366:	bd08      	pop	{r3, pc}

08004368 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004368:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800436a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800436e:	f7fe f9ab 	bl	80026c8 <HAL_PCD_EP_GetRxCount>
}
 8004372:	bd08      	pop	{r3, pc}

08004374 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 8004374:	4800      	ldr	r0, [pc, #0]	; (8004378 <USBD_static_malloc+0x4>)
 8004376:	4770      	bx	lr
 8004378:	20000b94 	.word	0x20000b94

0800437c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800437c:	4770      	bx	lr
	...

08004380 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8004380:	2312      	movs	r3, #18
 8004382:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 8004384:	4800      	ldr	r0, [pc, #0]	; (8004388 <USBD_VCP_DeviceDescriptor+0x8>)
 8004386:	4770      	bx	lr
 8004388:	080171fd 	.word	0x080171fd

0800438c <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800438c:	2304      	movs	r3, #4
 800438e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8004390:	4800      	ldr	r0, [pc, #0]	; (8004394 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8004392:	4770      	bx	lr
 8004394:	080171ac 	.word	0x080171ac

08004398 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8004398:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800439a:	2400      	movs	r4, #0
 800439c:	b2e3      	uxtb	r3, r4
 800439e:	4293      	cmp	r3, r2
 80043a0:	d20d      	bcs.n	80043be <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 80043a2:	0f03      	lsrs	r3, r0, #28
 80043a4:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80043a6:	bf94      	ite	ls
 80043a8:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80043aa:	3337      	addhi	r3, #55	; 0x37
 80043ac:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 80043b0:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80043b4:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80043b6:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 80043b8:	705d      	strb	r5, [r3, #1]
 80043ba:	3401      	adds	r4, #1
 80043bc:	e7ee      	b.n	800439c <IntToUnicode+0x4>
  }
}
 80043be:	bd30      	pop	{r4, r5, pc}

080043c0 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80043c0:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80043c2:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <USBD_VCP_SerialStrDescriptor+0x2c>)
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80043c6:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
 80043ca:	6850      	ldr	r0, [r2, #4]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80043cc:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80043ce:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
  
  if (deviceserial0 != 0)
 80043d0:	1818      	adds	r0, r3, r0
 80043d2:	d008      	beq.n	80043e6 <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80043d4:	4907      	ldr	r1, [pc, #28]	; (80043f4 <USBD_VCP_SerialStrDescriptor+0x34>)
 80043d6:	2208      	movs	r2, #8
 80043d8:	f7ff ffde 	bl	8004398 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80043dc:	4620      	mov	r0, r4
 80043de:	4906      	ldr	r1, [pc, #24]	; (80043f8 <USBD_VCP_SerialStrDescriptor+0x38>)
 80043e0:	2204      	movs	r2, #4
 80043e2:	f7ff ffd9 	bl	8004398 <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 80043e6:	4805      	ldr	r0, [pc, #20]	; (80043fc <USBD_VCP_SerialStrDescriptor+0x3c>)
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	1ffff7b0 	.word	0x1ffff7b0
 80043f0:	1ffff7ac 	.word	0x1ffff7ac
 80043f4:	20000146 	.word	0x20000146
 80043f8:	20000156 	.word	0x20000156
 80043fc:	20000144 	.word	0x20000144

08004400 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004400:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004402:	4c04      	ldr	r4, [pc, #16]	; (8004414 <USBD_VCP_ProductStrDescriptor+0x14>)
 8004404:	4804      	ldr	r0, [pc, #16]	; (8004418 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004406:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004408:	4621      	mov	r1, r4
 800440a:	f7ff fd2a 	bl	8003e62 <USBD_GetString>
  return USBD_StrDesc;
}
 800440e:	4620      	mov	r0, r4
 8004410:	bd10      	pop	{r4, pc}
 8004412:	bf00      	nop
 8004414:	200012d8 	.word	0x200012d8
 8004418:	080171b0 	.word	0x080171b0

0800441c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800441c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800441e:	4c04      	ldr	r4, [pc, #16]	; (8004430 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8004420:	4804      	ldr	r0, [pc, #16]	; (8004434 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004422:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004424:	4621      	mov	r1, r4
 8004426:	f7ff fd1c 	bl	8003e62 <USBD_GetString>
  return USBD_StrDesc;
}
 800442a:	4620      	mov	r0, r4
 800442c:	bd10      	pop	{r4, pc}
 800442e:	bf00      	nop
 8004430:	200012d8 	.word	0x200012d8
 8004434:	080171d1 	.word	0x080171d1

08004438 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004438:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800443a:	4c04      	ldr	r4, [pc, #16]	; (800444c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800443c:	4804      	ldr	r0, [pc, #16]	; (8004450 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800443e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004440:	4621      	mov	r1, r4
 8004442:	f7ff fd0e 	bl	8003e62 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004446:	4620      	mov	r0, r4
 8004448:	bd10      	pop	{r4, pc}
 800444a:	bf00      	nop
 800444c:	200012d8 	.word	0x200012d8
 8004450:	080171e4 	.word	0x080171e4

08004454 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004454:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004456:	4c04      	ldr	r4, [pc, #16]	; (8004468 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8004458:	4804      	ldr	r0, [pc, #16]	; (800446c <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800445a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800445c:	4621      	mov	r1, r4
 800445e:	f7ff fd00 	bl	8003e62 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004462:	4620      	mov	r0, r4
 8004464:	bd10      	pop	{r4, pc}
 8004466:	bf00      	nop
 8004468:	200012d8 	.word	0x200012d8
 800446c:	080171ef 	.word	0x080171ef

08004470 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8004470:	2000      	movs	r0, #0
 8004472:	4770      	bx	lr

08004474 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8004474:	b508      	push	{r3, lr}
 8004476:	460b      	mov	r3, r1
 8004478:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800447a:	4611      	mov	r1, r2
 800447c:	2000      	movs	r0, #0
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	f7fc fc04 	bl	8000c8c <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <CDC_Itf_Receive+0x1c>)
 8004486:	f7ff fe55 	bl	8004134 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800448a:	2000      	movs	r0, #0
 800448c:	bd08      	pop	{r3, pc}
 800448e:	bf00      	nop
 8004490:	20000f38 	.word	0x20000f38

08004494 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8004494:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8004496:	4903      	ldr	r1, [pc, #12]	; (80044a4 <CDC_Itf_Init+0x10>)
 8004498:	4803      	ldr	r0, [pc, #12]	; (80044a8 <CDC_Itf_Init+0x14>)
 800449a:	f7ff fe2e 	bl	80040fa <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 800449e:	2000      	movs	r0, #0
 80044a0:	bd08      	pop	{r3, pc}
 80044a2:	bf00      	nop
 80044a4:	20001448 	.word	0x20001448
 80044a8:	20000f38 	.word	0x20000f38

080044ac <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80044ac:	2820      	cmp	r0, #32
 80044ae:	d012      	beq.n	80044d6 <CDC_Itf_Control+0x2a>
 80044b0:	2821      	cmp	r0, #33	; 0x21
 80044b2:	d122      	bne.n	80044fa <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <CDC_Itf_Control+0x54>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	0a12      	lsrs	r2, r2, #8
 80044be:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80044c0:	885a      	ldrh	r2, [r3, #2]
 80044c2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80044c4:	78da      	ldrb	r2, [r3, #3]
 80044c6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 80044c8:	791a      	ldrb	r2, [r3, #4]
 80044ca:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 80044cc:	795a      	ldrb	r2, [r3, #5]
 80044ce:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 80044d0:	799b      	ldrb	r3, [r3, #6]
 80044d2:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 80044d4:	e011      	b.n	80044fa <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80044d6:	788b      	ldrb	r3, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80044d8:	784a      	ldrb	r2, [r1, #1]
 80044da:	4809      	ldr	r0, [pc, #36]	; (8004500 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80044e2:	780a      	ldrb	r2, [r1, #0]
 80044e4:	4313      	orrs	r3, r2
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80044e6:	78ca      	ldrb	r2, [r1, #3]
 80044e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80044ec:	6003      	str	r3, [r0, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 80044ee:	790b      	ldrb	r3, [r1, #4]
 80044f0:	7103      	strb	r3, [r0, #4]
    LineCoding.paritytype = pbuf[5];
 80044f2:	794b      	ldrb	r3, [r1, #5]
 80044f4:	7143      	strb	r3, [r0, #5]
    LineCoding.datatype   = pbuf[6];
 80044f6:	798b      	ldrb	r3, [r1, #6]
 80044f8:	7183      	strb	r3, [r0, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 80044fa:	2000      	movs	r0, #0
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000160 	.word	0x20000160

08004504 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 8004504:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004506:	4c1c      	ldr	r4, [pc, #112]	; (8004578 <SPIx_Init+0x74>)
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 8004508:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff fa07 	bl	800391e <HAL_SPI_GetState>
 8004510:	2800      	cmp	r0, #0
 8004512:	d12e      	bne.n	8004572 <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <SPIx_Init+0x78>)
 8004516:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004518:	2318      	movs	r3, #24
 800451a:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800451c:	2307      	movs	r3, #7
 800451e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004520:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004524:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800452a:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800452c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004530:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <SPIx_Init+0x7c>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004534:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004536:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004538:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800453a:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800453c:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800453e:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004546:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800454e:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004550:	23e0      	movs	r3, #224	; 0xe0
 8004552:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004554:	2302      	movs	r3, #2
 8004556:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004558:	2303      	movs	r3, #3
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800455a:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800455c:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800455e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004562:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004564:	a901      	add	r1, sp, #4
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004566:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004568:	f7fd fc84 	bl	8001e74 <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 800456c:	4620      	mov	r0, r4
 800456e:	f7ff f81e 	bl	80035ae <HAL_SPI_Init>
  }
}
 8004572:	b006      	add	sp, #24
 8004574:	bd10      	pop	{r4, pc}
 8004576:	bf00      	nop
 8004578:	20000dc4 	.word	0x20000dc4
 800457c:	40013000 	.word	0x40013000
 8004580:	40021000 	.word	0x40021000

08004584 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800458e:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	480a      	ldr	r0, [pc, #40]	; (80045c0 <SPIx_WriteRead+0x3c>)
 8004598:	f10d 010f 	add.w	r1, sp, #15
 800459c:	f10d 0217 	add.w	r2, sp, #23
 80045a0:	2301      	movs	r3, #1
 80045a2:	f7ff f86f 	bl	8003684 <HAL_SPI_TransmitReceive>
 80045a6:	b120      	cbz	r0, 80045b2 <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80045a8:	4805      	ldr	r0, [pc, #20]	; (80045c0 <SPIx_WriteRead+0x3c>)
 80045aa:	f7ff f854 	bl	8003656 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 80045ae:	f7ff ffa9 	bl	8004504 <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 80045b2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80045b6:	b007      	add	sp, #28
 80045b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80045bc:	20000178 	.word	0x20000178
 80045c0:	20000dc4 	.word	0x20000dc4

080045c4 <I2Cx_Init>:
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 80045c4:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80045c6:	4c16      	ldr	r4, [pc, #88]	; (8004620 <I2Cx_Init+0x5c>)
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 80045c8:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80045ca:	4620      	mov	r0, r4
 80045cc:	f7fe ff36 	bl	800343c <HAL_I2C_GetState>
 80045d0:	bb18      	cbnz	r0, 800461a <I2Cx_Init+0x56>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <I2Cx_Init+0x60>)
 80045d4:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 80045d6:	2332      	movs	r3, #50	; 0x32
 80045d8:	60a3      	str	r3, [r4, #8]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80045da:	4d13      	ldr	r5, [pc, #76]	; (8004628 <I2Cx_Init+0x64>)
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80045dc:	6120      	str	r0, [r4, #16]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045de:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
    I2cHandle.Init.OwnAddress2 = 0;
 80045e0:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80045e2:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80045e4:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045e6:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80045e8:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80045ea:	4810      	ldr	r0, [pc, #64]	; (800462c <I2Cx_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80045ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f0:	616b      	str	r3, [r5, #20]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 80045f2:	23c0      	movs	r3, #192	; 0xc0
 80045f4:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80045fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8004600:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8004602:	eb0d 0103 	add.w	r1, sp, r3
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8004606:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8004608:	f7fd fc34 	bl	8001e74 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800460c:	69eb      	ldr	r3, [r5, #28]
 800460e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004612:	61eb      	str	r3, [r5, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8004614:	4620      	mov	r0, r4
 8004616:	f7fe fdb3 	bl	8003180 <HAL_I2C_Init>
  }
}
 800461a:	b007      	add	sp, #28
 800461c:	bd30      	pop	{r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	20000e24 	.word	0x20000e24
 8004624:	40005400 	.word	0x40005400
 8004628:	40021000 	.word	0x40021000
 800462c:	48000400 	.word	0x48000400

08004630 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004630:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004632:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004634:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004636:	b168      	cbz	r0, 8004654 <BSP_LED_Init+0x24>
 8004638:	2801      	cmp	r0, #1
 800463a:	d00b      	beq.n	8004654 <BSP_LED_Init+0x24>
 800463c:	2802      	cmp	r0, #2
 800463e:	d009      	beq.n	8004654 <BSP_LED_Init+0x24>
 8004640:	2803      	cmp	r0, #3
 8004642:	d007      	beq.n	8004654 <BSP_LED_Init+0x24>
 8004644:	2804      	cmp	r0, #4
 8004646:	d005      	beq.n	8004654 <BSP_LED_Init+0x24>
 8004648:	2805      	cmp	r0, #5
 800464a:	d003      	beq.n	8004654 <BSP_LED_Init+0x24>
 800464c:	2806      	cmp	r0, #6
 800464e:	d001      	beq.n	8004654 <BSP_LED_Init+0x24>
 8004650:	2807      	cmp	r0, #7
 8004652:	d104      	bne.n	800465e <BSP_LED_Init+0x2e>
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <BSP_LED_Init+0x5c>)
 8004656:	6953      	ldr	r3, [r2, #20]
 8004658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800465c:	6153      	str	r3, [r2, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004660:	4e0c      	ldr	r6, [pc, #48]	; (8004694 <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004662:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004666:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800466a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466c:	2301      	movs	r3, #1
 800466e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004670:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004672:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004674:	2303      	movs	r3, #3
 8004676:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004678:	f7fd fbfc 	bl	8001e74 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800467c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004680:	4629      	mov	r1, r5
 8004682:	2200      	movs	r2, #0
 8004684:	f7fd fcc0 	bl	8002008 <HAL_GPIO_WritePin>
}
 8004688:	b006      	add	sp, #24
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	08017210 	.word	0x08017210
 8004694:	20000184 	.word	0x20000184

08004698 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004698:	4a04      	ldr	r2, [pc, #16]	; (80046ac <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800469a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800469c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80046a0:	4a03      	ldr	r2, [pc, #12]	; (80046b0 <BSP_LED_On+0x18>)
 80046a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f7fd bcae 	b.w	8002008 <HAL_GPIO_WritePin>
 80046ac:	20000184 	.word	0x20000184
 80046b0:	08017210 	.word	0x08017210

080046b4 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80046b4:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80046b6:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80046b8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80046bc:	4a03      	ldr	r2, [pc, #12]	; (80046cc <BSP_LED_Off+0x18>)
 80046be:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f7fd bca0 	b.w	8002008 <HAL_GPIO_WritePin>
 80046c8:	20000184 	.word	0x20000184
 80046cc:	08017210 	.word	0x08017210

080046d0 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80046d2:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80046d4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80046d8:	4a03      	ldr	r2, [pc, #12]	; (80046e8 <BSP_LED_Toggle+0x18>)
 80046da:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80046de:	f7fd bc98 	b.w	8002012 <HAL_GPIO_TogglePin>
 80046e2:	bf00      	nop
 80046e4:	20000184 	.word	0x20000184
 80046e8:	08017210 	.word	0x08017210

080046ec <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <BSP_PB_Init+0x68>)
 80046f0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80046f2:	b918      	cbnz	r0, 80046fc <BSP_PB_Init+0x10>
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046fa:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8004704:	b969      	cbnz	r1, 8004722 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004706:	2301      	movs	r3, #1
 8004708:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800470a:	2302      	movs	r3, #2
 800470c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800470e:	2303      	movs	r3, #3
 8004710:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004714:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004716:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800471a:	a901      	add	r1, sp, #4
 800471c:	f7fd fbaa 	bl	8001e74 <HAL_GPIO_Init>
 8004720:	e016      	b.n	8004750 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004722:	2901      	cmp	r1, #1
 8004724:	d114      	bne.n	8004750 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004726:	2303      	movs	r3, #3
 8004728:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <BSP_PB_Init+0x70>)
 800472c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <BSP_PB_Init+0x6c>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004730:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004732:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004738:	a901      	add	r1, sp, #4

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800473c:	f7fd fb9a 	bl	8001e74 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004740:	2006      	movs	r0, #6
 8004742:	210f      	movs	r1, #15
 8004744:	4622      	mov	r2, r4
 8004746:	f7fd fb43 	bl	8001dd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800474a:	2006      	movs	r0, #6
 800474c:	f7fd fb70 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  }
}
 8004750:	b006      	add	sp, #24
 8004752:	bd10      	pop	{r4, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	2000017c 	.word	0x2000017c
 800475c:	10110000 	.word	0x10110000

08004760 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004760:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8004762:	4b03      	ldr	r3, [pc, #12]	; (8004770 <BSP_PB_GetState+0x10>)
 8004764:	2101      	movs	r1, #1
 8004766:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800476a:	f7fd fc47 	bl	8001ffc <HAL_GPIO_ReadPin>
}
 800476e:	bd08      	pop	{r3, pc}
 8004770:	2000017c 	.word	0x2000017c

08004774 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004778:	4c16      	ldr	r4, [pc, #88]	; (80047d4 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800477a:	4d17      	ldr	r5, [pc, #92]	; (80047d8 <GYRO_IO_Init+0x64>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800477c:	6963      	ldr	r3, [r4, #20]
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800477e:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004784:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004786:	2600      	movs	r6, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004788:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800478c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004790:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004792:	4628      	mov	r0, r5
 8004794:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004796:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800479a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800479e:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80047a0:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80047a2:	f7fd fb67 	bl	8001e74 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80047a6:	4642      	mov	r2, r8
 80047a8:	4628      	mov	r0, r5
 80047aa:	4649      	mov	r1, r9
 80047ac:	f7fd fc2c 	bl	8002008 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80047b0:	6963      	ldr	r3, [r4, #20]
 80047b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047b6:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80047b8:	4628      	mov	r0, r5
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80047ba:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80047bc:	a901      	add	r1, sp, #4
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80047be:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80047c0:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80047c2:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80047c4:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80047c6:	f7fd fb55 	bl	8001e74 <HAL_GPIO_Init>
  
  SPIx_Init();
 80047ca:	f7ff fe9b 	bl	8004504 <SPIx_Init>
}
 80047ce:	b007      	add	sp, #28
 80047d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	48001000 	.word	0x48001000

080047dc <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80047dc:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80047de:	b570      	push	{r4, r5, r6, lr}
 80047e0:	460d      	mov	r5, r1
 80047e2:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80047e4:	bf88      	it	hi
 80047e6:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80047ea:	480c      	ldr	r0, [pc, #48]	; (800481c <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80047ec:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80047ee:	2108      	movs	r1, #8
 80047f0:	2200      	movs	r2, #0
 80047f2:	f7fd fc09 	bl	8002008 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7ff fec4 	bl	8004584 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80047fc:	b134      	cbz	r4, 800480c <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 80047fe:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 8004802:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 8004804:	f7ff febe 	bl	8004584 <SPIx_WriteRead>
    NumByteToWrite--;
 8004808:	b2a4      	uxth	r4, r4
 800480a:	e7f7      	b.n	80047fc <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800480c:	4803      	ldr	r0, [pc, #12]	; (800481c <GYRO_IO_Write+0x40>)
 800480e:	2108      	movs	r1, #8
 8004810:	2201      	movs	r2, #1
}
 8004812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004816:	f7fd bbf7 	b.w	8002008 <HAL_GPIO_WritePin>
 800481a:	bf00      	nop
 800481c:	48001000 	.word	0x48001000

08004820 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8004820:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004822:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004824:	bf8c      	ite	hi
 8004826:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800482a:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800482e:	4606      	mov	r6, r0
 8004830:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004832:	480c      	ldr	r0, [pc, #48]	; (8004864 <GYRO_IO_Read+0x44>)
 8004834:	2108      	movs	r1, #8
 8004836:	2200      	movs	r2, #0
 8004838:	f7fd fbe6 	bl	8002008 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800483c:	4628      	mov	r0, r5
 800483e:	f7ff fea1 	bl	8004584 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004842:	b13c      	cbz	r4, 8004854 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004844:	2000      	movs	r0, #0
 8004846:	f7ff fe9d 	bl	8004584 <SPIx_WriteRead>
    NumByteToRead--;
 800484a:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800484c:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 8004850:	b2a4      	uxth	r4, r4
 8004852:	e7f6      	b.n	8004842 <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004854:	4803      	ldr	r0, [pc, #12]	; (8004864 <GYRO_IO_Read+0x44>)
 8004856:	2108      	movs	r1, #8
 8004858:	2201      	movs	r2, #1
}  
 800485a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800485e:	f7fd bbd3 	b.w	8002008 <HAL_GPIO_WritePin>
 8004862:	bf00      	nop
 8004864:	48001000 	.word	0x48001000

08004868 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <COMPASSACCELERO_IO_Init+0x5c>)
 800486a:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800486c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800486e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004872:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004874:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004876:	4d14      	ldr	r5, [pc, #80]	; (80048c8 <COMPASSACCELERO_IO_Init+0x60>)
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004878:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800487c:	b086      	sub	sp, #24
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800487e:	615a      	str	r2, [r3, #20]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8004880:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004882:	2400      	movs	r4, #0
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004884:	eb0d 0103 	add.w	r1, sp, r3
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004888:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800488a:	4628      	mov	r0, r5
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800488c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800488e:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004890:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004892:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004894:	f7fd faee 	bl	8001e74 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 8004898:	4622      	mov	r2, r4
 800489a:	4621      	mov	r1, r4
 800489c:	2008      	movs	r0, #8
 800489e:	f7fd fa97 	bl	8001dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80048a2:	2008      	movs	r0, #8
 80048a4:	f7fd fac4 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80048a8:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80048aa:	4628      	mov	r0, r5
 80048ac:	a901      	add	r1, sp, #4
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80048ae:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80048b0:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80048b2:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80048b4:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80048b6:	f7fd fadd 	bl	8001e74 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80048ba:	f7ff fe83 	bl	80045c4 <I2Cx_Init>
}
 80048be:	b006      	add	sp, #24
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	48001000 	.word	0x48001000

080048cc <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80048cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80048ce:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80048d0:	480e      	ldr	r0, [pc, #56]	; (800490c <COMPASSACCELERO_IO_ITConfig+0x40>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80048d2:	6953      	ldr	r3, [r2, #20]
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80048d4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80048d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048da:	6153      	str	r3, [r2, #20]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80048dc:	2330      	movs	r3, #48	; 0x30
 80048de:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <COMPASSACCELERO_IO_ITConfig+0x44>)
 80048e2:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80048e4:	2400      	movs	r4, #0
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80048e6:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80048e8:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80048ea:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80048ec:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80048ee:	f7fd fac1 	bl	8001e74 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 80048f2:	4621      	mov	r1, r4
 80048f4:	4622      	mov	r2, r4
 80048f6:	200a      	movs	r0, #10
 80048f8:	f7fd fa6a 	bl	8001dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80048fc:	200a      	movs	r0, #10
 80048fe:	f7fd fa97 	bl	8001e30 <HAL_NVIC_EnableIRQ>
  
}
 8004902:	b006      	add	sp, #24
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
 800490c:	48001000 	.word	0x48001000
 8004910:	10110000 	.word	0x10110000

08004914 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8004914:	b510      	push	{r4, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	ab06      	add	r3, sp, #24
 800491a:	4604      	mov	r4, r0
 800491c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004920:	460a      	mov	r2, r1
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4908      	ldr	r1, [pc, #32]	; (8004948 <COMPASSACCELERO_IO_Write+0x34>)
 8004926:	4809      	ldr	r0, [pc, #36]	; (800494c <COMPASSACCELERO_IO_Write+0x38>)
 8004928:	2301      	movs	r3, #1
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	6809      	ldr	r1, [r1, #0]
 800492e:	9102      	str	r1, [sp, #8]
 8004930:	4621      	mov	r1, r4
 8004932:	f7fe fc85 	bl	8003240 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004936:	b120      	cbz	r0, 8004942 <COMPASSACCELERO_IO_Write+0x2e>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004938:	4804      	ldr	r0, [pc, #16]	; (800494c <COMPASSACCELERO_IO_Write+0x38>)
 800493a:	f7fe fc6a 	bl	8003212 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800493e:	f7ff fe41 	bl	80045c4 <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 8004942:	b006      	add	sp, #24
 8004944:	bd10      	pop	{r4, pc}
 8004946:	bf00      	nop
 8004948:	20000180 	.word	0x20000180
 800494c:	20000e24 	.word	0x20000e24

08004950 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8004950:	b510      	push	{r4, lr}
 8004952:	b086      	sub	sp, #24
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 8004954:	ab06      	add	r3, sp, #24
 8004956:	2200      	movs	r2, #0
 8004958:	f803 2d01 	strb.w	r2, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800495c:	460a      	mov	r2, r1
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4909      	ldr	r1, [pc, #36]	; (8004988 <COMPASSACCELERO_IO_Read+0x38>)
 8004962:	2301      	movs	r3, #1
 8004964:	9301      	str	r3, [sp, #4]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8004966:	4604      	mov	r4, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004968:	6809      	ldr	r1, [r1, #0]
 800496a:	9102      	str	r1, [sp, #8]
 800496c:	4807      	ldr	r0, [pc, #28]	; (800498c <COMPASSACCELERO_IO_Read+0x3c>)
 800496e:	4621      	mov	r1, r4
 8004970:	f7fe fce2 	bl	8003338 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 8004974:	b120      	cbz	r0, 8004980 <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004976:	4805      	ldr	r0, [pc, #20]	; (800498c <COMPASSACCELERO_IO_Read+0x3c>)
 8004978:	f7fe fc4b 	bl	8003212 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800497c:	f7ff fe22 	bl	80045c4 <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 8004980:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004984:	b006      	add	sp, #24
 8004986:	bd10      	pop	{r4, pc}
 8004988:	20000180 	.word	0x20000180
 800498c:	20000e24 	.word	0x20000e24

08004990 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 8004990:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8004992:	4c09      	ldr	r4, [pc, #36]	; (80049b8 <BSP_ACCELERO_Init+0x28>)
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	4798      	blx	r3
 8004998:	2833      	cmp	r0, #51	; 0x33
 800499a:	d10b      	bne.n	80049b4 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800499c:	4d07      	ldr	r5, [pc, #28]	; (80049bc <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800499e:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80049a0:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80049a2:	f640 0047 	movw	r0, #2119	; 0x847
 80049a6:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	2090      	movs	r0, #144	; 0x90
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4798      	blx	r3

    ret = ACCELERO_OK;
 80049b0:	2000      	movs	r0, #0
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 80049b4:	2001      	movs	r0, #1
  }

  return ret;
}
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	200001a4 	.word	0x200001a4
 80049bc:	20000e5c 	.word	0x20000e5c

080049c0 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <BSP_ACCELERO_GetXYZ+0xc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	b103      	cbz	r3, 80049ca <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80049c8:	4718      	bx	r3
 80049ca:	4770      	bx	lr
 80049cc:	20000e5c 	.word	0x20000e5c

080049d0 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80049d0:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80049d2:	4c0e      	ldr	r4, [pc, #56]	; (8004a0c <BSP_GYRO_Init+0x3c>)
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	4798      	blx	r3
 80049d8:	28d4      	cmp	r0, #212	; 0xd4
 80049da:	4625      	mov	r5, r4
 80049dc:	d10f      	bne.n	80049fe <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80049de:	4c0c      	ldr	r4, [pc, #48]	; (8004a10 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 80049e0:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80049e2:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 80049e4:	f241 003f 	movw	r0, #4159	; 0x103f
 80049e8:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	2000      	movs	r0, #0
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	2010      	movs	r0, #16
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	4798      	blx	r3
	
    ret = GYRO_OK;
 80049fa:	2000      	movs	r0, #0
 80049fc:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	4798      	blx	r3
 8004a02:	28d5      	cmp	r0, #213	; 0xd5
 8004a04:	d0eb      	beq.n	80049de <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 8004a06:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200001d0 	.word	0x200001d0
 8004a10:	20000e60 	.word	0x20000e60

08004a14 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 8004a14:	4b02      	ldr	r3, [pc, #8]	; (8004a20 <BSP_GYRO_GetXYZ+0xc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	b103      	cbz	r3, 8004a1e <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8004a1c:	4718      	bx	r3
 8004a1e:	4770      	bx	lr
 8004a20:	20000e60 	.word	0x20000e60

08004a24 <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8004a24:	b510      	push	{r4, lr}
 8004a26:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8004a28:	f7ff ff1e 	bl	8004868 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8004a2c:	b2e2      	uxtb	r2, r4
 8004a2e:	2032      	movs	r0, #50	; 0x32
 8004a30:	2120      	movs	r1, #32
 8004a32:	f7ff ff6f 	bl	8004914 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8004a36:	2032      	movs	r0, #50	; 0x32
 8004a38:	2123      	movs	r1, #35	; 0x23
 8004a3a:	2200      	movs	r2, #0
}
 8004a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8004a40:	f7ff bf68 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004a44 <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8004a44:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8004a46:	f7ff ff0f 	bl	8004868 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8004a4a:	2032      	movs	r0, #50	; 0x32
 8004a4c:	210f      	movs	r1, #15

  return ctrl;
}
 8004a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8004a52:	f7ff bf7d 	b.w	8004950 <COMPASSACCELERO_IO_Read>

08004a56 <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8004a56:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004a58:	2124      	movs	r1, #36	; 0x24
 8004a5a:	2032      	movs	r0, #50	; 0x32
 8004a5c:	f7ff ff78 	bl	8004950 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8004a60:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8004a64:	2124      	movs	r1, #36	; 0x24
 8004a66:	2032      	movs	r0, #50	; 0x32
 8004a68:	b2d2      	uxtb	r2, r2
}
 8004a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8004a6e:	f7ff bf51 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004a72 <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8004a72:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004a74:	2121      	movs	r1, #33	; 0x21
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8004a76:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004a78:	2032      	movs	r0, #50	; 0x32
 8004a7a:	f7ff ff69 	bl	8004950 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8004a7e:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004a82:	4322      	orrs	r2, r4
 8004a84:	2032      	movs	r0, #50	; 0x32
 8004a86:	2121      	movs	r1, #33	; 0x21
}
 8004a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004a8c:	f7ff bf42 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004a90 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8004a90:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004a92:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8004a94:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004a96:	2032      	movs	r0, #50	; 0x32
 8004a98:	f7ff ff5a 	bl	8004950 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 8004a9c:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004aa0:	4322      	orrs	r2, r4
 8004aa2:	2032      	movs	r0, #50	; 0x32
 8004aa4:	2121      	movs	r1, #33	; 0x21
}
 8004aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004aaa:	f7ff bf33 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004aae <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8004aae:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004ab0:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	4605      	mov	r5, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004ab6:	2032      	movs	r0, #50	; 0x32
 8004ab8:	f7ff ff4a 	bl	8004950 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004abc:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004abe:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004ac0:	2032      	movs	r0, #50	; 0x32
 8004ac2:	f7ff ff45 	bl	8004950 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8004ac6:	2128      	movs	r1, #40	; 0x28
 8004ac8:	2032      	movs	r0, #50	; 0x32
 8004aca:	f7ff ff41 	bl	8004950 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004ace:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8004ad0:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004ad4:	2032      	movs	r0, #50	; 0x32
 8004ad6:	f7ff ff3b 	bl	8004950 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004ada:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004adc:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004ae0:	2032      	movs	r0, #50	; 0x32
 8004ae2:	f7ff ff35 	bl	8004950 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004ae6:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004ae8:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004aec:	2032      	movs	r0, #50	; 0x32
 8004aee:	f7ff ff2f 	bl	8004950 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004af2:	212c      	movs	r1, #44	; 0x2c

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004af4:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004af8:	2032      	movs	r0, #50	; 0x32
 8004afa:	f7ff ff29 	bl	8004950 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004afe:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004b00:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004b04:	2032      	movs	r0, #50	; 0x32
 8004b06:	f7ff ff23 	bl	8004950 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8004b0a:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004b0e:	f99d 6009 	ldrsb.w	r6, [sp, #9]
 8004b12:	f99d 7008 	ldrsb.w	r7, [sp, #8]
 8004b16:	f99d 200b 	ldrsb.w	r2, [sp, #11]
 8004b1a:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 8004b1e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 8004b22:	b240      	sxtb	r0, r0
 8004b24:	d116      	bne.n	8004b54 <LSM303DLHC_AccReadXYZ+0xa6>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8004b26:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004b2a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8004b2e:	f8ad 6000 	strh.w	r6, [sp]
 8004b32:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004b36:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8004b3a:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8004b3e:	2c20      	cmp	r4, #32
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8004b40:	f8ad 0004 	strh.w	r0, [sp, #4]
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8004b44:	d011      	beq.n	8004b6a <LSM303DLHC_AccReadXYZ+0xbc>
 8004b46:	2c30      	cmp	r4, #48	; 0x30
 8004b48:	d011      	beq.n	8004b6e <LSM303DLHC_AccReadXYZ+0xc0>
 8004b4a:	2c10      	cmp	r4, #16
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2302      	moveq	r3, #2
 8004b50:	2301      	movne	r3, #1
 8004b52:	e00d      	b.n	8004b70 <LSM303DLHC_AccReadXYZ+0xc2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8004b54:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8004b58:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8004b5c:	f8ad 6000 	strh.w	r6, [sp]
 8004b60:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004b64:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8004b68:	e7e7      	b.n	8004b3a <LSM303DLHC_AccReadXYZ+0x8c>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8004b6a:	2304      	movs	r3, #4
    break;
 8004b6c:	e000      	b.n	8004b70 <LSM303DLHC_AccReadXYZ+0xc2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8004b6e:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8004b70:	f8bd 2000 	ldrh.w	r2, [sp]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	fb12 f203 	smulbb	r2, r2, r3
 8004b7a:	802a      	strh	r2, [r5, #0]
 8004b7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004b80:	fb12 f203 	smulbb	r2, r2, r3
 8004b84:	806a      	strh	r2, [r5, #2]
 8004b86:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004b8a:	fb12 f303 	smulbb	r3, r2, r3
 8004b8e:	80ab      	strh	r3, [r5, #4]
  }

}
 8004b90:	b005      	add	sp, #20
 8004b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b94 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8004b94:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004b96:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8004b98:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004b9a:	2032      	movs	r0, #50	; 0x32
 8004b9c:	f7ff fed8 	bl	8004950 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8004ba0:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004ba4:	4322      	orrs	r2, r4
 8004ba6:	2032      	movs	r0, #50	; 0x32
 8004ba8:	2121      	movs	r1, #33	; 0x21
}
 8004baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004bae:	f7ff beb1 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004bb2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004bb2:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004bb4:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004bb6:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004bb8:	2032      	movs	r0, #50	; 0x32
 8004bba:	f7ff fec9 	bl	8004950 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8004bbe:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004bc2:	2122      	movs	r1, #34	; 0x22
 8004bc4:	2032      	movs	r0, #50	; 0x32
 8004bc6:	b2d2      	uxtb	r2, r2
}
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004bcc:	f7ff bea2 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004bd0 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004bd0:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004bd2:	2138      	movs	r1, #56	; 0x38
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004bd4:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004bd6:	2032      	movs	r0, #50	; 0x32
 8004bd8:	f7ff feba 	bl	8004950 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8004bdc:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8004be0:	2138      	movs	r1, #56	; 0x38
 8004be2:	2032      	movs	r0, #50	; 0x32
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	f7ff fe95 	bl	8004914 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8004bea:	2032      	movs	r0, #50	; 0x32
 8004bec:	213a      	movs	r1, #58	; 0x3a
 8004bee:	220a      	movs	r2, #10
 8004bf0:	f7ff fe90 	bl	8004914 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8004bf4:	2032      	movs	r0, #50	; 0x32
 8004bf6:	213b      	movs	r1, #59	; 0x3b
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	f7ff fe8b 	bl	8004914 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8004bfe:	2032      	movs	r0, #50	; 0x32
 8004c00:	213c      	movs	r1, #60	; 0x3c
 8004c02:	2205      	movs	r2, #5
 8004c04:	f7ff fe86 	bl	8004914 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8004c08:	2032      	movs	r0, #50	; 0x32
 8004c0a:	213d      	movs	r1, #61	; 0x3d
 8004c0c:	4602      	mov	r2, r0

}
 8004c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8004c12:	f7ff be7f 	b.w	8004914 <COMPASSACCELERO_IO_Write>

08004c16 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8004c16:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8004c18:	f7ff fe58 	bl	80048cc <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8004c1c:	2080      	movs	r0, #128	; 0x80
 8004c1e:	f7ff ffc8 	bl	8004bb2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8004c22:	2004      	movs	r0, #4
 8004c24:	f7ff ffb6 	bl	8004b94 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8004c28:	2010      	movs	r0, #16
  
}
 8004c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8004c2e:	f7ff bfcf 	b.w	8004bd0 <LSM303DLHC_AccClickITEnable>

08004c32 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8004c32:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8004c34:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 8004c36:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8004c38:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 8004c3a:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8004c3e:	f7ff fd99 	bl	8004774 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8004c42:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004c46:	2120      	movs	r1, #32
 8004c48:	4620      	mov	r0, r4
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f7ff fdc6 	bl	80047dc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004c50:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004c52:	4620      	mov	r0, r4
 8004c54:	2123      	movs	r1, #35	; 0x23
 8004c56:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004c58:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8004c5c:	f7ff fdbe 	bl	80047dc <GYRO_IO_Write>
}
 8004c60:	b003      	add	sp, #12
 8004c62:	bd30      	pop	{r4, r5, pc}

08004c64 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8004c64:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8004c66:	f7ff fd85 	bl	8004774 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8004c6a:	f10d 0007 	add.w	r0, sp, #7
 8004c6e:	210f      	movs	r1, #15
 8004c70:	2201      	movs	r2, #1
 8004c72:	f7ff fdd5 	bl	8004820 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 8004c76:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004c7a:	b003      	add	sp, #12
 8004c7c:	f85d fb04 	ldr.w	pc, [sp], #4

08004c80 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8004c80:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004c82:	2124      	movs	r1, #36	; 0x24
 8004c84:	f10d 0007 	add.w	r0, sp, #7
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f7ff fdc9 	bl	8004820 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004c92:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004c9a:	2124      	movs	r1, #36	; 0x24
 8004c9c:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8004c9e:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004ca2:	f7ff fd9b 	bl	80047dc <GYRO_IO_Write>
}
 8004ca6:	b003      	add	sp, #12
 8004ca8:	f85d fb04 	ldr.w	pc, [sp], #4

08004cac <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8004cac:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004cae:	2300      	movs	r3, #0
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8004cb0:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004cb2:	2130      	movs	r1, #48	; 0x30
 8004cb4:	f10d 0006 	add.w	r0, sp, #6
 8004cb8:	2201      	movs	r2, #1
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004cba:	f88d 3006 	strb.w	r3, [sp, #6]
 8004cbe:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004cc2:	f7ff fdad 	bl	8004820 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004cc6:	f10d 0007 	add.w	r0, sp, #7
 8004cca:	2122      	movs	r1, #34	; 0x22
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f7ff fda7 	bl	8004820 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8004cd2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 8004cd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8004cda:	f020 0020 	bic.w	r0, r0, #32
  ctrl3 |= ((uint8_t) Int1Config);
 8004cde:	4320      	orrs	r0, r4
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
 8004ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 8004ce4:	f88d 0007 	strb.w	r0, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004ce8:	2130      	movs	r1, #48	; 0x30
 8004cea:	f10d 0006 	add.w	r0, sp, #6
 8004cee:	2201      	movs	r2, #1
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004cf0:	f88d 3006 	strb.w	r3, [sp, #6]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8004cf4:	f7ff fd72 	bl	80047dc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8004cf8:	f10d 0007 	add.w	r0, sp, #7
 8004cfc:	2122      	movs	r1, #34	; 0x22
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f7ff fd6c 	bl	80047dc <GYRO_IO_Write>
}
 8004d04:	b002      	add	sp, #8
 8004d06:	bd10      	pop	{r4, pc}

08004d08 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004d08:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004d0a:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004d0c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004d0e:	2122      	movs	r1, #34	; 0x22
 8004d10:	f10d 0007 	add.w	r0, sp, #7
 8004d14:	f7ff fd84 	bl	8004820 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004d18:	b924      	cbnz	r4, 8004d24 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8004d1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8004d1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d22:	e007      	b.n	8004d34 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 8004d24:	2c01      	cmp	r4, #1
 8004d26:	d107      	bne.n	8004d38 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 8004d28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d2c:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004d38:	f10d 0007 	add.w	r0, sp, #7
 8004d3c:	2122      	movs	r1, #34	; 0x22
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f7ff fd4c 	bl	80047dc <GYRO_IO_Write>
}
 8004d44:	b002      	add	sp, #8
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004d48:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004d4a:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8004d4c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004d4e:	2122      	movs	r1, #34	; 0x22
 8004d50:	f10d 0007 	add.w	r0, sp, #7
 8004d54:	f7ff fd64 	bl	8004820 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004d58:	b924      	cbnz	r4, 8004d64 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 8004d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d62:	e005      	b.n	8004d70 <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 8004d64:	2c01      	cmp	r4, #1
 8004d66:	d105      	bne.n	8004d74 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 8004d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d6c:	f023 0308 	bic.w	r3, r3, #8
 8004d70:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004d74:	f10d 0007 	add.w	r0, sp, #7
 8004d78:	2122      	movs	r1, #34	; 0x22
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f7ff fd2e 	bl	80047dc <GYRO_IO_Write>
}
 8004d80:	b002      	add	sp, #8
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004d84:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004d86:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8004d88:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004d8a:	2121      	movs	r1, #33	; 0x21
 8004d8c:	f10d 0007 	add.w	r0, sp, #7
 8004d90:	f7ff fd46 	bl	8004820 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004d94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004d98:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 8004d9c:	4320      	orrs	r0, r4
 8004d9e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004da2:	2121      	movs	r1, #33	; 0x21
 8004da4:	f10d 0007 	add.w	r0, sp, #7
 8004da8:	2201      	movs	r2, #1
 8004daa:	f7ff fd17 	bl	80047dc <GYRO_IO_Write>
}
 8004dae:	b002      	add	sp, #8
 8004db0:	bd10      	pop	{r4, pc}

08004db2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004db2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004db4:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8004db6:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004db8:	2124      	movs	r1, #36	; 0x24
 8004dba:	f10d 0007 	add.w	r0, sp, #7
 8004dbe:	f7ff fd2f 	bl	8004820 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004dc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004dc6:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8004dca:	4320      	orrs	r0, r4
 8004dcc:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004dd0:	2124      	movs	r1, #36	; 0x24
 8004dd2:	f10d 0007 	add.w	r0, sp, #7
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f7ff fd00 	bl	80047dc <GYRO_IO_Write>
}
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd10      	pop	{r4, pc}

08004de0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b087      	sub	sp, #28
 8004de4:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8004de6:	a806      	add	r0, sp, #24
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8004de8:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 8004dea:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004dee:	2123      	movs	r1, #35	; 0x23
 8004df0:	2201      	movs	r2, #1
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8004dfe:	f7ff fd0f 	bl	8004820 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8004e02:	a802      	add	r0, sp, #8
 8004e04:	2128      	movs	r1, #40	; 0x28
 8004e06:	2206      	movs	r2, #6
 8004e08:	f7ff fd0a 	bl	8004820 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e10:	f89d 6009 	ldrb.w	r6, [sp, #9]
 8004e14:	f89d 7008 	ldrb.w	r7, [sp, #8]
 8004e18:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8004e1c:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8004e20:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8004e24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004e28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e2c:	d11a      	bne.n	8004e64 <L3GD20_ReadXYZAngRate+0x84>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004e2e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004e32:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8004e36:	f8ad 6010 	strh.w	r6, [sp, #16]
 8004e3a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004e3e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004e42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e46:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004e48:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004e4c:	d015      	beq.n	8004e7a <L3GD20_ReadXYZAngRate+0x9a>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d016      	beq.n	8004e80 <L3GD20_ReadXYZAngRate+0xa0>
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 8004e52:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004ea8 <L3GD20_ReadXYZAngRate+0xc8>
 8004e56:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004eac <L3GD20_ReadXYZAngRate+0xcc>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf08      	it	eq
 8004e5e:	eeb0 7a67 	vmoveq.f32	s14, s15
 8004e62:	e00f      	b.n	8004e84 <L3GD20_ReadXYZAngRate+0xa4>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8004e64:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8004e68:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8004e6c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8004e70:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004e74:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8004e78:	e7e3      	b.n	8004e42 <L3GD20_ReadXYZAngRate+0x62>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8004e7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004eb0 <L3GD20_ReadXYZAngRate+0xd0>
    break;
 8004e7e:	e001      	b.n	8004e84 <L3GD20_ReadXYZAngRate+0xa4>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8004e80:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004eb4 <L3GD20_ReadXYZAngRate+0xd4>
 8004e84:	4620      	mov	r0, r4
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004e86:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004e88:	aa04      	add	r2, sp, #16
 8004e8a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8004e8e:	ee07 2a90 	vmov	s15, r2
 8004e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004e96:	3301      	adds	r3, #1
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004e98:	ee67 7a87 	vmul.f32	s15, s15, s14
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004e9c:	2b03      	cmp	r3, #3
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8004e9e:	ece0 7a01 	vstmia	r0!, {s15}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8004ea2:	d1f1      	bne.n	8004e88 <L3GD20_ReadXYZAngRate+0xa8>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 8004ea4:	b007      	add	sp, #28
 8004ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	410c0000 	.word	0x410c0000
 8004eb0:	418c0000 	.word	0x418c0000
 8004eb4:	428c0000 	.word	0x428c0000

08004eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ef0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ebc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ebe:	e003      	b.n	8004ec8 <LoopCopyDataInit>

08004ec0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ec2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ec4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ec6:	3104      	adds	r1, #4

08004ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ec8:	480b      	ldr	r0, [pc, #44]	; (8004ef8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ecc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ece:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ed0:	d3f6      	bcc.n	8004ec0 <CopyDataInit>
	ldr	r2, =_sbss
 8004ed2:	4a0b      	ldr	r2, [pc, #44]	; (8004f00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ed4:	e002      	b.n	8004edc <LoopFillZerobss>

08004ed6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ed6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ed8:	f842 3b04 	str.w	r3, [r2], #4

08004edc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <LoopForever+0x16>)
	cmp	r2, r3
 8004ede:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ee0:	d3f9      	bcc.n	8004ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ee2:	f7fc fa4b 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ee6:	f000 f817 	bl	8004f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004eea:	f7fb fadf 	bl	80004ac <main>

08004eee <LoopForever>:

LoopForever:
    b LoopForever
 8004eee:	e7fe      	b.n	8004eee <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ef0:	20007fff 	.word	0x20007fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004ef4:	0801733c 	.word	0x0801733c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ef8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004efc:	20000a3c 	.word	0x20000a3c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004f00:	20000a3c 	.word	0x20000a3c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004f04:	20001c84 	.word	0x20001c84

08004f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f08:	e7fe      	b.n	8004f08 <ADC1_2_IRQHandler>
	...

08004f0c <__errno>:
 8004f0c:	4b01      	ldr	r3, [pc, #4]	; (8004f14 <__errno+0x8>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000628 	.word	0x20000628

08004f18 <__libc_init_array>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4e0f      	ldr	r6, [pc, #60]	; (8004f58 <__libc_init_array+0x40>)
 8004f1c:	4d0f      	ldr	r5, [pc, #60]	; (8004f5c <__libc_init_array+0x44>)
 8004f1e:	1b76      	subs	r6, r6, r5
 8004f20:	10b6      	asrs	r6, r6, #2
 8004f22:	bf18      	it	ne
 8004f24:	2400      	movne	r4, #0
 8004f26:	d005      	beq.n	8004f34 <__libc_init_array+0x1c>
 8004f28:	3401      	adds	r4, #1
 8004f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2e:	4798      	blx	r3
 8004f30:	42a6      	cmp	r6, r4
 8004f32:	d1f9      	bne.n	8004f28 <__libc_init_array+0x10>
 8004f34:	4e0a      	ldr	r6, [pc, #40]	; (8004f60 <__libc_init_array+0x48>)
 8004f36:	4d0b      	ldr	r5, [pc, #44]	; (8004f64 <__libc_init_array+0x4c>)
 8004f38:	1b76      	subs	r6, r6, r5
 8004f3a:	f001 fe5f 	bl	8006bfc <_init>
 8004f3e:	10b6      	asrs	r6, r6, #2
 8004f40:	bf18      	it	ne
 8004f42:	2400      	movne	r4, #0
 8004f44:	d006      	beq.n	8004f54 <__libc_init_array+0x3c>
 8004f46:	3401      	adds	r4, #1
 8004f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4c:	4798      	blx	r3
 8004f4e:	42a6      	cmp	r6, r4
 8004f50:	d1f9      	bne.n	8004f46 <__libc_init_array+0x2e>
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	bf00      	nop
 8004f58:	08017330 	.word	0x08017330
 8004f5c:	08017330 	.word	0x08017330
 8004f60:	08017338 	.word	0x08017338
 8004f64:	08017330 	.word	0x08017330

08004f68 <memset>:
 8004f68:	b470      	push	{r4, r5, r6}
 8004f6a:	0784      	lsls	r4, r0, #30
 8004f6c:	d046      	beq.n	8004ffc <memset+0x94>
 8004f6e:	1e54      	subs	r4, r2, #1
 8004f70:	2a00      	cmp	r2, #0
 8004f72:	d041      	beq.n	8004ff8 <memset+0x90>
 8004f74:	b2cd      	uxtb	r5, r1
 8004f76:	4603      	mov	r3, r0
 8004f78:	e002      	b.n	8004f80 <memset+0x18>
 8004f7a:	1e62      	subs	r2, r4, #1
 8004f7c:	b3e4      	cbz	r4, 8004ff8 <memset+0x90>
 8004f7e:	4614      	mov	r4, r2
 8004f80:	f803 5b01 	strb.w	r5, [r3], #1
 8004f84:	079a      	lsls	r2, r3, #30
 8004f86:	d1f8      	bne.n	8004f7a <memset+0x12>
 8004f88:	2c03      	cmp	r4, #3
 8004f8a:	d92e      	bls.n	8004fea <memset+0x82>
 8004f8c:	b2cd      	uxtb	r5, r1
 8004f8e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004f92:	2c0f      	cmp	r4, #15
 8004f94:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004f98:	d919      	bls.n	8004fce <memset+0x66>
 8004f9a:	f103 0210 	add.w	r2, r3, #16
 8004f9e:	4626      	mov	r6, r4
 8004fa0:	3e10      	subs	r6, #16
 8004fa2:	2e0f      	cmp	r6, #15
 8004fa4:	f842 5c10 	str.w	r5, [r2, #-16]
 8004fa8:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004fac:	f842 5c08 	str.w	r5, [r2, #-8]
 8004fb0:	f842 5c04 	str.w	r5, [r2, #-4]
 8004fb4:	f102 0210 	add.w	r2, r2, #16
 8004fb8:	d8f2      	bhi.n	8004fa0 <memset+0x38>
 8004fba:	f1a4 0210 	sub.w	r2, r4, #16
 8004fbe:	f022 020f 	bic.w	r2, r2, #15
 8004fc2:	f004 040f 	and.w	r4, r4, #15
 8004fc6:	3210      	adds	r2, #16
 8004fc8:	2c03      	cmp	r4, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	d90d      	bls.n	8004fea <memset+0x82>
 8004fce:	461e      	mov	r6, r3
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	3a04      	subs	r2, #4
 8004fd4:	2a03      	cmp	r2, #3
 8004fd6:	f846 5b04 	str.w	r5, [r6], #4
 8004fda:	d8fa      	bhi.n	8004fd2 <memset+0x6a>
 8004fdc:	1f22      	subs	r2, r4, #4
 8004fde:	f022 0203 	bic.w	r2, r2, #3
 8004fe2:	3204      	adds	r2, #4
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f004 0403 	and.w	r4, r4, #3
 8004fea:	b12c      	cbz	r4, 8004ff8 <memset+0x90>
 8004fec:	b2c9      	uxtb	r1, r1
 8004fee:	441c      	add	r4, r3
 8004ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	d1fb      	bne.n	8004ff0 <memset+0x88>
 8004ff8:	bc70      	pop	{r4, r5, r6}
 8004ffa:	4770      	bx	lr
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	4603      	mov	r3, r0
 8005000:	e7c2      	b.n	8004f88 <memset+0x20>
 8005002:	bf00      	nop

08005004 <putchar>:
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <putchar+0x10>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4601      	mov	r1, r0
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f001 b9d7 	b.w	80063c0 <_putc_r>
 8005012:	bf00      	nop
 8005014:	20000628 	.word	0x20000628

08005018 <_puts_r>:
 8005018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501a:	4605      	mov	r5, r0
 800501c:	b089      	sub	sp, #36	; 0x24
 800501e:	4608      	mov	r0, r1
 8005020:	460c      	mov	r4, r1
 8005022:	f000 f92f 	bl	8005284 <strlen>
 8005026:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005028:	4f13      	ldr	r7, [pc, #76]	; (8005078 <_puts_r+0x60>)
 800502a:	9404      	str	r4, [sp, #16]
 800502c:	2601      	movs	r6, #1
 800502e:	1c44      	adds	r4, r0, #1
 8005030:	a904      	add	r1, sp, #16
 8005032:	2202      	movs	r2, #2
 8005034:	9403      	str	r4, [sp, #12]
 8005036:	9005      	str	r0, [sp, #20]
 8005038:	68ac      	ldr	r4, [r5, #8]
 800503a:	9706      	str	r7, [sp, #24]
 800503c:	9607      	str	r6, [sp, #28]
 800503e:	9101      	str	r1, [sp, #4]
 8005040:	9202      	str	r2, [sp, #8]
 8005042:	b1ab      	cbz	r3, 8005070 <_puts_r+0x58>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	049a      	lsls	r2, r3, #18
 8005048:	d406      	bmi.n	8005058 <_puts_r+0x40>
 800504a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800504c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	6662      	str	r2, [r4, #100]	; 0x64
 8005058:	4628      	mov	r0, r5
 800505a:	4621      	mov	r1, r4
 800505c:	aa01      	add	r2, sp, #4
 800505e:	f000 fcad 	bl	80059bc <__sfvwrite_r>
 8005062:	2800      	cmp	r0, #0
 8005064:	bf14      	ite	ne
 8005066:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800506a:	200a      	moveq	r0, #10
 800506c:	b009      	add	sp, #36	; 0x24
 800506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005070:	4628      	mov	r0, r5
 8005072:	f000 fb5d 	bl	8005730 <__sinit>
 8005076:	e7e5      	b.n	8005044 <_puts_r+0x2c>
 8005078:	0801732c 	.word	0x0801732c

0800507c <puts>:
 800507c:	4b02      	ldr	r3, [pc, #8]	; (8005088 <puts+0xc>)
 800507e:	4601      	mov	r1, r0
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	f7ff bfc9 	b.w	8005018 <_puts_r>
 8005086:	bf00      	nop
 8005088:	20000628 	.word	0x20000628

0800508c <setvbuf>:
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	4c3a      	ldr	r4, [pc, #232]	; (800517c <setvbuf+0xf0>)
 8005092:	6826      	ldr	r6, [r4, #0]
 8005094:	460d      	mov	r5, r1
 8005096:	4604      	mov	r4, r0
 8005098:	4690      	mov	r8, r2
 800509a:	461f      	mov	r7, r3
 800509c:	b116      	cbz	r6, 80050a4 <setvbuf+0x18>
 800509e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d03c      	beq.n	800511e <setvbuf+0x92>
 80050a4:	f1b8 0f02 	cmp.w	r8, #2
 80050a8:	d82f      	bhi.n	800510a <setvbuf+0x7e>
 80050aa:	2f00      	cmp	r7, #0
 80050ac:	db2d      	blt.n	800510a <setvbuf+0x7e>
 80050ae:	4621      	mov	r1, r4
 80050b0:	4630      	mov	r0, r6
 80050b2:	f000 faa9 	bl	8005608 <_fflush_r>
 80050b6:	89a1      	ldrh	r1, [r4, #12]
 80050b8:	2300      	movs	r3, #0
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	61a3      	str	r3, [r4, #24]
 80050be:	060b      	lsls	r3, r1, #24
 80050c0:	d427      	bmi.n	8005112 <setvbuf+0x86>
 80050c2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
 80050c6:	b289      	uxth	r1, r1
 80050c8:	f1b8 0f02 	cmp.w	r8, #2
 80050cc:	81a1      	strh	r1, [r4, #12]
 80050ce:	d02a      	beq.n	8005126 <setvbuf+0x9a>
 80050d0:	2d00      	cmp	r5, #0
 80050d2:	d036      	beq.n	8005142 <setvbuf+0xb6>
 80050d4:	f1b8 0f01 	cmp.w	r8, #1
 80050d8:	d011      	beq.n	80050fe <setvbuf+0x72>
 80050da:	b289      	uxth	r1, r1
 80050dc:	f001 0008 	and.w	r0, r1, #8
 80050e0:	4b27      	ldr	r3, [pc, #156]	; (8005180 <setvbuf+0xf4>)
 80050e2:	63f3      	str	r3, [r6, #60]	; 0x3c
 80050e4:	b280      	uxth	r0, r0
 80050e6:	6025      	str	r5, [r4, #0]
 80050e8:	6125      	str	r5, [r4, #16]
 80050ea:	6167      	str	r7, [r4, #20]
 80050ec:	b178      	cbz	r0, 800510e <setvbuf+0x82>
 80050ee:	f011 0f03 	tst.w	r1, #3
 80050f2:	bf18      	it	ne
 80050f4:	2700      	movne	r7, #0
 80050f6:	60a7      	str	r7, [r4, #8]
 80050f8:	2000      	movs	r0, #0
 80050fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050fe:	f041 0101 	orr.w	r1, r1, #1
 8005102:	427b      	negs	r3, r7
 8005104:	81a1      	strh	r1, [r4, #12]
 8005106:	61a3      	str	r3, [r4, #24]
 8005108:	e7e7      	b.n	80050da <setvbuf+0x4e>
 800510a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005112:	6921      	ldr	r1, [r4, #16]
 8005114:	4630      	mov	r0, r6
 8005116:	f000 fb79 	bl	800580c <_free_r>
 800511a:	89a1      	ldrh	r1, [r4, #12]
 800511c:	e7d1      	b.n	80050c2 <setvbuf+0x36>
 800511e:	4630      	mov	r0, r6
 8005120:	f000 fb06 	bl	8005730 <__sinit>
 8005124:	e7be      	b.n	80050a4 <setvbuf+0x18>
 8005126:	2000      	movs	r0, #0
 8005128:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800512c:	f041 0102 	orr.w	r1, r1, #2
 8005130:	2500      	movs	r5, #0
 8005132:	2201      	movs	r2, #1
 8005134:	81a1      	strh	r1, [r4, #12]
 8005136:	60a5      	str	r5, [r4, #8]
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	6162      	str	r2, [r4, #20]
 800513e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005142:	2f00      	cmp	r7, #0
 8005144:	bf08      	it	eq
 8005146:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800514a:	4638      	mov	r0, r7
 800514c:	f000 fdec 	bl	8005d28 <malloc>
 8005150:	4605      	mov	r5, r0
 8005152:	b128      	cbz	r0, 8005160 <setvbuf+0xd4>
 8005154:	89a1      	ldrh	r1, [r4, #12]
 8005156:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800515a:	b289      	uxth	r1, r1
 800515c:	81a1      	strh	r1, [r4, #12]
 800515e:	e7b9      	b.n	80050d4 <setvbuf+0x48>
 8005160:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005164:	f000 fde0 	bl	8005d28 <malloc>
 8005168:	4605      	mov	r5, r0
 800516a:	b918      	cbnz	r0, 8005174 <setvbuf+0xe8>
 800516c:	89a1      	ldrh	r1, [r4, #12]
 800516e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005172:	e7d9      	b.n	8005128 <setvbuf+0x9c>
 8005174:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005178:	e7ec      	b.n	8005154 <setvbuf+0xc8>
 800517a:	bf00      	nop
 800517c:	20000628 	.word	0x20000628
 8005180:	08005635 	.word	0x08005635

08005184 <strcasecmp>:
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <strcasecmp+0x40>)
 8005186:	b430      	push	{r4, r5}
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	e002      	b.n	8005192 <strcasecmp+0xe>
 800518c:	1ad2      	subs	r2, r2, r3
 800518e:	d116      	bne.n	80051be <strcasecmp+0x3a>
 8005190:	b1ab      	cbz	r3, 80051be <strcasecmp+0x3a>
 8005192:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005196:	192b      	adds	r3, r5, r4
 8005198:	4622      	mov	r2, r4
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051a6:	bf08      	it	eq
 80051a8:	f104 0220 	addeq.w	r2, r4, #32
 80051ac:	18ec      	adds	r4, r5, r3
 80051ae:	7864      	ldrb	r4, [r4, #1]
 80051b0:	f004 0403 	and.w	r4, r4, #3
 80051b4:	2c01      	cmp	r4, #1
 80051b6:	d1e9      	bne.n	800518c <strcasecmp+0x8>
 80051b8:	3320      	adds	r3, #32
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	d0e9      	beq.n	8005192 <strcasecmp+0xe>
 80051be:	4610      	mov	r0, r2
 80051c0:	bc30      	pop	{r4, r5}
 80051c2:	4770      	bx	lr
 80051c4:	200001fc 	.word	0x200001fc

080051c8 <strcpy>:
 80051c8:	ea80 0201 	eor.w	r2, r0, r1
 80051cc:	4684      	mov	ip, r0
 80051ce:	f012 0f03 	tst.w	r2, #3
 80051d2:	d14f      	bne.n	8005274 <strcpy+0xac>
 80051d4:	f011 0f03 	tst.w	r1, #3
 80051d8:	d132      	bne.n	8005240 <strcpy+0x78>
 80051da:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80051de:	f011 0f04 	tst.w	r1, #4
 80051e2:	f851 3b04 	ldr.w	r3, [r1], #4
 80051e6:	d00b      	beq.n	8005200 <strcpy+0x38>
 80051e8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80051ec:	439a      	bics	r2, r3
 80051ee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80051f2:	bf04      	itt	eq
 80051f4:	f84c 3b04 	streq.w	r3, [ip], #4
 80051f8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80051fc:	d116      	bne.n	800522c <strcpy+0x64>
 80051fe:	bf00      	nop
 8005200:	f851 4b04 	ldr.w	r4, [r1], #4
 8005204:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005208:	439a      	bics	r2, r3
 800520a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800520e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8005212:	d10b      	bne.n	800522c <strcpy+0x64>
 8005214:	f84c 3b04 	str.w	r3, [ip], #4
 8005218:	43a2      	bics	r2, r4
 800521a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800521e:	bf04      	itt	eq
 8005220:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005224:	f84c 4b04 	streq.w	r4, [ip], #4
 8005228:	d0ea      	beq.n	8005200 <strcpy+0x38>
 800522a:	4623      	mov	r3, r4
 800522c:	f80c 3b01 	strb.w	r3, [ip], #1
 8005230:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005234:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005238:	d1f8      	bne.n	800522c <strcpy+0x64>
 800523a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	f011 0f01 	tst.w	r1, #1
 8005244:	d006      	beq.n	8005254 <strcpy+0x8c>
 8005246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800524a:	f80c 2b01 	strb.w	r2, [ip], #1
 800524e:	2a00      	cmp	r2, #0
 8005250:	bf08      	it	eq
 8005252:	4770      	bxeq	lr
 8005254:	f011 0f02 	tst.w	r1, #2
 8005258:	d0bf      	beq.n	80051da <strcpy+0x12>
 800525a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800525e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8005262:	bf16      	itet	ne
 8005264:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005268:	f88c 2000 	strbeq.w	r2, [ip]
 800526c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8005270:	d1b3      	bne.n	80051da <strcpy+0x12>
 8005272:	4770      	bx	lr
 8005274:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005278:	f80c 2b01 	strb.w	r2, [ip], #1
 800527c:	2a00      	cmp	r2, #0
 800527e:	d1f9      	bne.n	8005274 <strcpy+0xac>
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <strlen>:
 8005284:	f020 0103 	bic.w	r1, r0, #3
 8005288:	f010 0003 	ands.w	r0, r0, #3
 800528c:	f1c0 0000 	rsb	r0, r0, #0
 8005290:	f851 3b04 	ldr.w	r3, [r1], #4
 8005294:	f100 0c04 	add.w	ip, r0, #4
 8005298:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800529c:	f06f 0200 	mvn.w	r2, #0
 80052a0:	bf1c      	itt	ne
 80052a2:	fa22 f20c 	lsrne.w	r2, r2, ip
 80052a6:	4313      	orrne	r3, r2
 80052a8:	f04f 0c01 	mov.w	ip, #1
 80052ac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80052b0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80052b4:	eba3 020c 	sub.w	r2, r3, ip
 80052b8:	ea22 0203 	bic.w	r2, r2, r3
 80052bc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80052c0:	bf04      	itt	eq
 80052c2:	f851 3b04 	ldreq.w	r3, [r1], #4
 80052c6:	3004      	addeq	r0, #4
 80052c8:	d0f4      	beq.n	80052b4 <strlen+0x30>
 80052ca:	f1c2 0100 	rsb	r1, r2, #0
 80052ce:	ea02 0201 	and.w	r2, r2, r1
 80052d2:	fab2 f282 	clz	r2, r2
 80052d6:	f1c2 021f 	rsb	r2, r2, #31
 80052da:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80052de:	4770      	bx	lr

080052e0 <strtok>:
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <strtok+0xc>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	2301      	movs	r3, #1
 80052e6:	325c      	adds	r2, #92	; 0x5c
 80052e8:	f000 b802 	b.w	80052f0 <__strtok_r>
 80052ec:	20000628 	.word	0x20000628

080052f0 <__strtok_r>:
 80052f0:	b4f0      	push	{r4, r5, r6, r7}
 80052f2:	b320      	cbz	r0, 800533e <__strtok_r+0x4e>
 80052f4:	4607      	mov	r7, r0
 80052f6:	460d      	mov	r5, r1
 80052f8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80052fc:	e001      	b.n	8005302 <__strtok_r+0x12>
 80052fe:	42a6      	cmp	r6, r4
 8005300:	d016      	beq.n	8005330 <__strtok_r+0x40>
 8005302:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005306:	2c00      	cmp	r4, #0
 8005308:	d1f9      	bne.n	80052fe <__strtok_r+0xe>
 800530a:	b1ee      	cbz	r6, 8005348 <__strtok_r+0x58>
 800530c:	463e      	mov	r6, r7
 800530e:	460c      	mov	r4, r1
 8005310:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005314:	e000      	b.n	8005318 <__strtok_r+0x28>
 8005316:	b173      	cbz	r3, 8005336 <__strtok_r+0x46>
 8005318:	f814 3b01 	ldrb.w	r3, [r4], #1
 800531c:	42ab      	cmp	r3, r5
 800531e:	d1fa      	bne.n	8005316 <__strtok_r+0x26>
 8005320:	b15d      	cbz	r5, 800533a <__strtok_r+0x4a>
 8005322:	2300      	movs	r3, #0
 8005324:	703b      	strb	r3, [r7, #0]
 8005326:	6016      	str	r6, [r2, #0]
 8005328:	4606      	mov	r6, r0
 800532a:	4630      	mov	r0, r6
 800532c:	bcf0      	pop	{r4, r5, r6, r7}
 800532e:	4770      	bx	lr
 8005330:	b163      	cbz	r3, 800534c <__strtok_r+0x5c>
 8005332:	4638      	mov	r0, r7
 8005334:	e7de      	b.n	80052f4 <__strtok_r+0x4>
 8005336:	4637      	mov	r7, r6
 8005338:	e7e8      	b.n	800530c <__strtok_r+0x1c>
 800533a:	462e      	mov	r6, r5
 800533c:	e7f3      	b.n	8005326 <__strtok_r+0x36>
 800533e:	6810      	ldr	r0, [r2, #0]
 8005340:	2800      	cmp	r0, #0
 8005342:	d1d7      	bne.n	80052f4 <__strtok_r+0x4>
 8005344:	4606      	mov	r6, r0
 8005346:	e7f0      	b.n	800532a <__strtok_r+0x3a>
 8005348:	6016      	str	r6, [r2, #0]
 800534a:	e7ee      	b.n	800532a <__strtok_r+0x3a>
 800534c:	6017      	str	r7, [r2, #0]
 800534e:	4606      	mov	r6, r0
 8005350:	7003      	strb	r3, [r0, #0]
 8005352:	e7ea      	b.n	800532a <__strtok_r+0x3a>

08005354 <_strtoul_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4c46      	ldr	r4, [pc, #280]	; (8005474 <_strtoul_r+0x120>)
 800535a:	460f      	mov	r7, r1
 800535c:	f8d4 e000 	ldr.w	lr, [r4]
 8005360:	e000      	b.n	8005364 <_strtoul_r+0x10>
 8005362:	4627      	mov	r7, r4
 8005364:	463c      	mov	r4, r7
 8005366:	f814 5b01 	ldrb.w	r5, [r4], #1
 800536a:	eb0e 0605 	add.w	r6, lr, r5
 800536e:	7876      	ldrb	r6, [r6, #1]
 8005370:	f006 0608 	and.w	r6, r6, #8
 8005374:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 8005378:	2e00      	cmp	r6, #0
 800537a:	d1f2      	bne.n	8005362 <_strtoul_r+0xe>
 800537c:	2d2d      	cmp	r5, #45	; 0x2d
 800537e:	d051      	beq.n	8005424 <_strtoul_r+0xd0>
 8005380:	2d2b      	cmp	r5, #43	; 0x2b
 8005382:	bf04      	itt	eq
 8005384:	787d      	ldrbeq	r5, [r7, #1]
 8005386:	1cbc      	addeq	r4, r7, #2
 8005388:	b15b      	cbz	r3, 80053a2 <_strtoul_r+0x4e>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d05b      	beq.n	8005446 <_strtoul_r+0xf2>
 800538e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005392:	fbb9 f9f3 	udiv	r9, r9, r3
 8005396:	fb03 fb09 	mul.w	fp, r3, r9
 800539a:	ea6f 0b0b 	mvn.w	fp, fp
 800539e:	469a      	mov	sl, r3
 80053a0:	e007      	b.n	80053b2 <_strtoul_r+0x5e>
 80053a2:	2d30      	cmp	r5, #48	; 0x30
 80053a4:	d043      	beq.n	800542e <_strtoul_r+0xda>
 80053a6:	230a      	movs	r3, #10
 80053a8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005478 <_strtoul_r+0x124>
 80053ac:	469a      	mov	sl, r3
 80053ae:	f04f 0b05 	mov.w	fp, #5
 80053b2:	2700      	movs	r7, #0
 80053b4:	46bc      	mov	ip, r7
 80053b6:	e00c      	b.n	80053d2 <_strtoul_r+0x7e>
 80053b8:	3d30      	subs	r5, #48	; 0x30
 80053ba:	42ab      	cmp	r3, r5
 80053bc:	dd19      	ble.n	80053f2 <_strtoul_r+0x9e>
 80053be:	1c7e      	adds	r6, r7, #1
 80053c0:	d005      	beq.n	80053ce <_strtoul_r+0x7a>
 80053c2:	45cc      	cmp	ip, r9
 80053c4:	d824      	bhi.n	8005410 <_strtoul_r+0xbc>
 80053c6:	d021      	beq.n	800540c <_strtoul_r+0xb8>
 80053c8:	fb0a 5c0c 	mla	ip, sl, ip, r5
 80053cc:	2701      	movs	r7, #1
 80053ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053d2:	eb0e 0605 	add.w	r6, lr, r5
 80053d6:	7876      	ldrb	r6, [r6, #1]
 80053d8:	f016 0f04 	tst.w	r6, #4
 80053dc:	d1ec      	bne.n	80053b8 <_strtoul_r+0x64>
 80053de:	f016 0603 	ands.w	r6, r6, #3
 80053e2:	d006      	beq.n	80053f2 <_strtoul_r+0x9e>
 80053e4:	2e01      	cmp	r6, #1
 80053e6:	bf0c      	ite	eq
 80053e8:	2637      	moveq	r6, #55	; 0x37
 80053ea:	2657      	movne	r6, #87	; 0x57
 80053ec:	1bad      	subs	r5, r5, r6
 80053ee:	42ab      	cmp	r3, r5
 80053f0:	dce5      	bgt.n	80053be <_strtoul_r+0x6a>
 80053f2:	2f00      	cmp	r7, #0
 80053f4:	db11      	blt.n	800541a <_strtoul_r+0xc6>
 80053f6:	f1c8 0000 	rsb	r0, r8, #0
 80053fa:	ea8c 0000 	eor.w	r0, ip, r0
 80053fe:	4440      	add	r0, r8
 8005400:	b14a      	cbz	r2, 8005416 <_strtoul_r+0xc2>
 8005402:	b107      	cbz	r7, 8005406 <_strtoul_r+0xb2>
 8005404:	1e61      	subs	r1, r4, #1
 8005406:	6011      	str	r1, [r2, #0]
 8005408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	455d      	cmp	r5, fp
 800540e:	dddb      	ble.n	80053c8 <_strtoul_r+0x74>
 8005410:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005414:	e7db      	b.n	80053ce <_strtoul_r+0x7a>
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	2322      	movs	r3, #34	; 0x22
 800541c:	6003      	str	r3, [r0, #0]
 800541e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005422:	e7ed      	b.n	8005400 <_strtoul_r+0xac>
 8005424:	1cbc      	adds	r4, r7, #2
 8005426:	787d      	ldrb	r5, [r7, #1]
 8005428:	f04f 0801 	mov.w	r8, #1
 800542c:	e7ac      	b.n	8005388 <_strtoul_r+0x34>
 800542e:	7823      	ldrb	r3, [r4, #0]
 8005430:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005434:	2b58      	cmp	r3, #88	; 0x58
 8005436:	d013      	beq.n	8005460 <_strtoul_r+0x10c>
 8005438:	2308      	movs	r3, #8
 800543a:	469a      	mov	sl, r3
 800543c:	f04f 0b07 	mov.w	fp, #7
 8005440:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8005444:	e7b5      	b.n	80053b2 <_strtoul_r+0x5e>
 8005446:	2d30      	cmp	r5, #48	; 0x30
 8005448:	d005      	beq.n	8005456 <_strtoul_r+0x102>
 800544a:	f04f 0b0f 	mov.w	fp, #15
 800544e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8005452:	469a      	mov	sl, r3
 8005454:	e7ad      	b.n	80053b2 <_strtoul_r+0x5e>
 8005456:	7826      	ldrb	r6, [r4, #0]
 8005458:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800545c:	2e58      	cmp	r6, #88	; 0x58
 800545e:	d1f4      	bne.n	800544a <_strtoul_r+0xf6>
 8005460:	f04f 0a10 	mov.w	sl, #16
 8005464:	7865      	ldrb	r5, [r4, #1]
 8005466:	4653      	mov	r3, sl
 8005468:	f04f 0b0f 	mov.w	fp, #15
 800546c:	3402      	adds	r4, #2
 800546e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8005472:	e79e      	b.n	80053b2 <_strtoul_r+0x5e>
 8005474:	200001fc 	.word	0x200001fc
 8005478:	19999999 	.word	0x19999999

0800547c <strtoul>:
 800547c:	b430      	push	{r4, r5}
 800547e:	4c04      	ldr	r4, [pc, #16]	; (8005490 <strtoul+0x14>)
 8005480:	460d      	mov	r5, r1
 8005482:	4613      	mov	r3, r2
 8005484:	4601      	mov	r1, r0
 8005486:	462a      	mov	r2, r5
 8005488:	6820      	ldr	r0, [r4, #0]
 800548a:	bc30      	pop	{r4, r5}
 800548c:	f7ff bf62 	b.w	8005354 <_strtoul_r>
 8005490:	20000628 	.word	0x20000628

08005494 <register_fini>:
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <register_fini+0xc>)
 8005496:	b113      	cbz	r3, 800549e <register_fini+0xa>
 8005498:	4802      	ldr	r0, [pc, #8]	; (80054a4 <register_fini+0x10>)
 800549a:	f000 b805 	b.w	80054a8 <atexit>
 800549e:	4770      	bx	lr
 80054a0:	00000000 	.word	0x00000000
 80054a4:	08005745 	.word	0x08005745

080054a8 <atexit>:
 80054a8:	4601      	mov	r1, r0
 80054aa:	2000      	movs	r0, #0
 80054ac:	4602      	mov	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	f001 baa0 	b.w	80069f4 <__register_exitproc>

080054b4 <__sflush_r>:
 80054b4:	898b      	ldrh	r3, [r1, #12]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054bc:	460d      	mov	r5, r1
 80054be:	0711      	lsls	r1, r2, #28
 80054c0:	4680      	mov	r8, r0
 80054c2:	d43c      	bmi.n	800553e <__sflush_r+0x8a>
 80054c4:	686a      	ldr	r2, [r5, #4]
 80054c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	81ab      	strh	r3, [r5, #12]
 80054ce:	dd65      	ble.n	800559c <__sflush_r+0xe8>
 80054d0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	d04b      	beq.n	800556e <__sflush_r+0xba>
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054dc:	2100      	movs	r1, #0
 80054de:	b292      	uxth	r2, r2
 80054e0:	f8d8 4000 	ldr.w	r4, [r8]
 80054e4:	f8c8 1000 	str.w	r1, [r8]
 80054e8:	2a00      	cmp	r2, #0
 80054ea:	d05b      	beq.n	80055a4 <__sflush_r+0xf0>
 80054ec:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80054ee:	075f      	lsls	r7, r3, #29
 80054f0:	d505      	bpl.n	80054fe <__sflush_r+0x4a>
 80054f2:	6869      	ldr	r1, [r5, #4]
 80054f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80054f6:	1a52      	subs	r2, r2, r1
 80054f8:	b10b      	cbz	r3, 80054fe <__sflush_r+0x4a>
 80054fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80054fc:	1ad2      	subs	r2, r2, r3
 80054fe:	4640      	mov	r0, r8
 8005500:	69e9      	ldr	r1, [r5, #28]
 8005502:	2300      	movs	r3, #0
 8005504:	47b0      	blx	r6
 8005506:	1c46      	adds	r6, r0, #1
 8005508:	d056      	beq.n	80055b8 <__sflush_r+0x104>
 800550a:	89ab      	ldrh	r3, [r5, #12]
 800550c:	692a      	ldr	r2, [r5, #16]
 800550e:	602a      	str	r2, [r5, #0]
 8005510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005514:	b29b      	uxth	r3, r3
 8005516:	2200      	movs	r2, #0
 8005518:	606a      	str	r2, [r5, #4]
 800551a:	04da      	lsls	r2, r3, #19
 800551c:	81ab      	strh	r3, [r5, #12]
 800551e:	d43b      	bmi.n	8005598 <__sflush_r+0xe4>
 8005520:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005522:	f8c8 4000 	str.w	r4, [r8]
 8005526:	b311      	cbz	r1, 800556e <__sflush_r+0xba>
 8005528:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800552c:	4299      	cmp	r1, r3
 800552e:	d002      	beq.n	8005536 <__sflush_r+0x82>
 8005530:	4640      	mov	r0, r8
 8005532:	f000 f96b 	bl	800580c <_free_r>
 8005536:	2000      	movs	r0, #0
 8005538:	6328      	str	r0, [r5, #48]	; 0x30
 800553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553e:	692e      	ldr	r6, [r5, #16]
 8005540:	b1ae      	cbz	r6, 800556e <__sflush_r+0xba>
 8005542:	682c      	ldr	r4, [r5, #0]
 8005544:	602e      	str	r6, [r5, #0]
 8005546:	0791      	lsls	r1, r2, #30
 8005548:	bf0c      	ite	eq
 800554a:	696b      	ldreq	r3, [r5, #20]
 800554c:	2300      	movne	r3, #0
 800554e:	1ba4      	subs	r4, r4, r6
 8005550:	60ab      	str	r3, [r5, #8]
 8005552:	e00a      	b.n	800556a <__sflush_r+0xb6>
 8005554:	4632      	mov	r2, r6
 8005556:	4623      	mov	r3, r4
 8005558:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800555a:	69e9      	ldr	r1, [r5, #28]
 800555c:	4640      	mov	r0, r8
 800555e:	47b8      	blx	r7
 8005560:	2800      	cmp	r0, #0
 8005562:	eba4 0400 	sub.w	r4, r4, r0
 8005566:	4406      	add	r6, r0
 8005568:	dd04      	ble.n	8005574 <__sflush_r+0xc0>
 800556a:	2c00      	cmp	r4, #0
 800556c:	dcf2      	bgt.n	8005554 <__sflush_r+0xa0>
 800556e:	2000      	movs	r0, #0
 8005570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005574:	89ab      	ldrh	r3, [r5, #12]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	81ab      	strh	r3, [r5, #12]
 800557c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005584:	89ab      	ldrh	r3, [r5, #12]
 8005586:	692a      	ldr	r2, [r5, #16]
 8005588:	6069      	str	r1, [r5, #4]
 800558a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800558e:	b29b      	uxth	r3, r3
 8005590:	81ab      	strh	r3, [r5, #12]
 8005592:	04db      	lsls	r3, r3, #19
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	d5c3      	bpl.n	8005520 <__sflush_r+0x6c>
 8005598:	6528      	str	r0, [r5, #80]	; 0x50
 800559a:	e7c1      	b.n	8005520 <__sflush_r+0x6c>
 800559c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800559e:	2a00      	cmp	r2, #0
 80055a0:	dc96      	bgt.n	80054d0 <__sflush_r+0x1c>
 80055a2:	e7e4      	b.n	800556e <__sflush_r+0xba>
 80055a4:	2301      	movs	r3, #1
 80055a6:	4640      	mov	r0, r8
 80055a8:	69e9      	ldr	r1, [r5, #28]
 80055aa:	47b0      	blx	r6
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4602      	mov	r2, r0
 80055b0:	d019      	beq.n	80055e6 <__sflush_r+0x132>
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80055b6:	e79a      	b.n	80054ee <__sflush_r+0x3a>
 80055b8:	f8d8 1000 	ldr.w	r1, [r8]
 80055bc:	2900      	cmp	r1, #0
 80055be:	d0e1      	beq.n	8005584 <__sflush_r+0xd0>
 80055c0:	291d      	cmp	r1, #29
 80055c2:	d007      	beq.n	80055d4 <__sflush_r+0x120>
 80055c4:	2916      	cmp	r1, #22
 80055c6:	d005      	beq.n	80055d4 <__sflush_r+0x120>
 80055c8:	89ab      	ldrh	r3, [r5, #12]
 80055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ce:	81ab      	strh	r3, [r5, #12]
 80055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d4:	89ab      	ldrh	r3, [r5, #12]
 80055d6:	692a      	ldr	r2, [r5, #16]
 80055d8:	602a      	str	r2, [r5, #0]
 80055da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055de:	2200      	movs	r2, #0
 80055e0:	81ab      	strh	r3, [r5, #12]
 80055e2:	606a      	str	r2, [r5, #4]
 80055e4:	e79c      	b.n	8005520 <__sflush_r+0x6c>
 80055e6:	f8d8 3000 	ldr.w	r3, [r8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0e1      	beq.n	80055b2 <__sflush_r+0xfe>
 80055ee:	2b1d      	cmp	r3, #29
 80055f0:	d007      	beq.n	8005602 <__sflush_r+0x14e>
 80055f2:	2b16      	cmp	r3, #22
 80055f4:	d005      	beq.n	8005602 <__sflush_r+0x14e>
 80055f6:	89ab      	ldrh	r3, [r5, #12]
 80055f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fc:	81ab      	strh	r3, [r5, #12]
 80055fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005602:	f8c8 4000 	str.w	r4, [r8]
 8005606:	e7b2      	b.n	800556e <__sflush_r+0xba>

08005608 <_fflush_r>:
 8005608:	b510      	push	{r4, lr}
 800560a:	4604      	mov	r4, r0
 800560c:	b082      	sub	sp, #8
 800560e:	b108      	cbz	r0, 8005614 <_fflush_r+0xc>
 8005610:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005612:	b153      	cbz	r3, 800562a <_fflush_r+0x22>
 8005614:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005618:	b908      	cbnz	r0, 800561e <_fflush_r+0x16>
 800561a:	b002      	add	sp, #8
 800561c:	bd10      	pop	{r4, pc}
 800561e:	4620      	mov	r0, r4
 8005620:	b002      	add	sp, #8
 8005622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005626:	f7ff bf45 	b.w	80054b4 <__sflush_r>
 800562a:	9101      	str	r1, [sp, #4]
 800562c:	f000 f880 	bl	8005730 <__sinit>
 8005630:	9901      	ldr	r1, [sp, #4]
 8005632:	e7ef      	b.n	8005614 <_fflush_r+0xc>

08005634 <_cleanup_r>:
 8005634:	4901      	ldr	r1, [pc, #4]	; (800563c <_cleanup_r+0x8>)
 8005636:	f000 bb4d 	b.w	8005cd4 <_fwalk_reent>
 800563a:	bf00      	nop
 800563c:	08006a99 	.word	0x08006a99

08005640 <__sinit.part.1>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	4b35      	ldr	r3, [pc, #212]	; (800571c <__sinit.part.1+0xdc>)
 8005646:	6845      	ldr	r5, [r0, #4]
 8005648:	63c3      	str	r3, [r0, #60]	; 0x3c
 800564a:	2400      	movs	r4, #0
 800564c:	4607      	mov	r7, r0
 800564e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8005652:	2304      	movs	r3, #4
 8005654:	2103      	movs	r1, #3
 8005656:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800565a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800565e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8005662:	b083      	sub	sp, #12
 8005664:	602c      	str	r4, [r5, #0]
 8005666:	606c      	str	r4, [r5, #4]
 8005668:	60ac      	str	r4, [r5, #8]
 800566a:	666c      	str	r4, [r5, #100]	; 0x64
 800566c:	81ec      	strh	r4, [r5, #14]
 800566e:	612c      	str	r4, [r5, #16]
 8005670:	616c      	str	r4, [r5, #20]
 8005672:	61ac      	str	r4, [r5, #24]
 8005674:	81ab      	strh	r3, [r5, #12]
 8005676:	4621      	mov	r1, r4
 8005678:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800567c:	2208      	movs	r2, #8
 800567e:	f7ff fc73 	bl	8004f68 <memset>
 8005682:	68be      	ldr	r6, [r7, #8]
 8005684:	f8df b098 	ldr.w	fp, [pc, #152]	; 8005720 <__sinit.part.1+0xe0>
 8005688:	f8df a098 	ldr.w	sl, [pc, #152]	; 8005724 <__sinit.part.1+0xe4>
 800568c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8005728 <__sinit.part.1+0xe8>
 8005690:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800572c <__sinit.part.1+0xec>
 8005694:	f8c5 b020 	str.w	fp, [r5, #32]
 8005698:	2301      	movs	r3, #1
 800569a:	2209      	movs	r2, #9
 800569c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80056a0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80056a4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80056a8:	61ed      	str	r5, [r5, #28]
 80056aa:	4621      	mov	r1, r4
 80056ac:	81f3      	strh	r3, [r6, #14]
 80056ae:	81b2      	strh	r2, [r6, #12]
 80056b0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80056b4:	6034      	str	r4, [r6, #0]
 80056b6:	6074      	str	r4, [r6, #4]
 80056b8:	60b4      	str	r4, [r6, #8]
 80056ba:	6674      	str	r4, [r6, #100]	; 0x64
 80056bc:	6134      	str	r4, [r6, #16]
 80056be:	6174      	str	r4, [r6, #20]
 80056c0:	61b4      	str	r4, [r6, #24]
 80056c2:	2208      	movs	r2, #8
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	f7ff fc4f 	bl	8004f68 <memset>
 80056ca:	68fd      	ldr	r5, [r7, #12]
 80056cc:	61f6      	str	r6, [r6, #28]
 80056ce:	2012      	movs	r0, #18
 80056d0:	2202      	movs	r2, #2
 80056d2:	f8c6 b020 	str.w	fp, [r6, #32]
 80056d6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80056da:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80056de:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80056e2:	4621      	mov	r1, r4
 80056e4:	81a8      	strh	r0, [r5, #12]
 80056e6:	81ea      	strh	r2, [r5, #14]
 80056e8:	602c      	str	r4, [r5, #0]
 80056ea:	606c      	str	r4, [r5, #4]
 80056ec:	60ac      	str	r4, [r5, #8]
 80056ee:	666c      	str	r4, [r5, #100]	; 0x64
 80056f0:	612c      	str	r4, [r5, #16]
 80056f2:	616c      	str	r4, [r5, #20]
 80056f4:	61ac      	str	r4, [r5, #24]
 80056f6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80056fa:	2208      	movs	r2, #8
 80056fc:	f7ff fc34 	bl	8004f68 <memset>
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	61ed      	str	r5, [r5, #28]
 8005704:	f8c5 b020 	str.w	fp, [r5, #32]
 8005708:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800570c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8005710:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8005714:	63bb      	str	r3, [r7, #56]	; 0x38
 8005716:	b003      	add	sp, #12
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	08005635 	.word	0x08005635
 8005720:	08006805 	.word	0x08006805
 8005724:	08006829 	.word	0x08006829
 8005728:	08006861 	.word	0x08006861
 800572c:	08006881 	.word	0x08006881

08005730 <__sinit>:
 8005730:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005732:	b103      	cbz	r3, 8005736 <__sinit+0x6>
 8005734:	4770      	bx	lr
 8005736:	f7ff bf83 	b.w	8005640 <__sinit.part.1>
 800573a:	bf00      	nop

0800573c <__sfp_lock_acquire>:
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop

08005740 <__sfp_lock_release>:
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop

08005744 <__libc_fini_array>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <__libc_fini_array+0x24>)
 8005748:	4d08      	ldr	r5, [pc, #32]	; (800576c <__libc_fini_array+0x28>)
 800574a:	1aed      	subs	r5, r5, r3
 800574c:	10ac      	asrs	r4, r5, #2
 800574e:	bf18      	it	ne
 8005750:	18ed      	addne	r5, r5, r3
 8005752:	d005      	beq.n	8005760 <__libc_fini_array+0x1c>
 8005754:	3c01      	subs	r4, #1
 8005756:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800575a:	4798      	blx	r3
 800575c:	2c00      	cmp	r4, #0
 800575e:	d1f9      	bne.n	8005754 <__libc_fini_array+0x10>
 8005760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005764:	f001 ba50 	b.w	8006c08 <_fini>
 8005768:	08017338 	.word	0x08017338
 800576c:	0801733c 	.word	0x0801733c

08005770 <_malloc_trim_r>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	4f23      	ldr	r7, [pc, #140]	; (8005800 <_malloc_trim_r+0x90>)
 8005774:	460c      	mov	r4, r1
 8005776:	4606      	mov	r6, r0
 8005778:	f000 fe1e 	bl	80063b8 <__malloc_lock>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	685d      	ldr	r5, [r3, #4]
 8005780:	f025 0503 	bic.w	r5, r5, #3
 8005784:	1b29      	subs	r1, r5, r4
 8005786:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800578a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800578e:	f021 010f 	bic.w	r1, r1, #15
 8005792:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8005796:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800579a:	db07      	blt.n	80057ac <_malloc_trim_r+0x3c>
 800579c:	4630      	mov	r0, r6
 800579e:	2100      	movs	r1, #0
 80057a0:	f7fb f8da 	bl	8000958 <_sbrk_r>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	442b      	add	r3, r5
 80057a8:	4298      	cmp	r0, r3
 80057aa:	d004      	beq.n	80057b6 <_malloc_trim_r+0x46>
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 fe05 	bl	80063bc <__malloc_unlock>
 80057b2:	2000      	movs	r0, #0
 80057b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b6:	4630      	mov	r0, r6
 80057b8:	4261      	negs	r1, r4
 80057ba:	f7fb f8cd 	bl	8000958 <_sbrk_r>
 80057be:	3001      	adds	r0, #1
 80057c0:	d00d      	beq.n	80057de <_malloc_trim_r+0x6e>
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <_malloc_trim_r+0x94>)
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	6819      	ldr	r1, [r3, #0]
 80057c8:	1b2d      	subs	r5, r5, r4
 80057ca:	f045 0501 	orr.w	r5, r5, #1
 80057ce:	4630      	mov	r0, r6
 80057d0:	1b09      	subs	r1, r1, r4
 80057d2:	6055      	str	r5, [r2, #4]
 80057d4:	6019      	str	r1, [r3, #0]
 80057d6:	f000 fdf1 	bl	80063bc <__malloc_unlock>
 80057da:	2001      	movs	r0, #1
 80057dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057de:	4630      	mov	r0, r6
 80057e0:	2100      	movs	r1, #0
 80057e2:	f7fb f8b9 	bl	8000958 <_sbrk_r>
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	1a83      	subs	r3, r0, r2
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	ddde      	ble.n	80057ac <_malloc_trim_r+0x3c>
 80057ee:	4c06      	ldr	r4, [pc, #24]	; (8005808 <_malloc_trim_r+0x98>)
 80057f0:	4904      	ldr	r1, [pc, #16]	; (8005804 <_malloc_trim_r+0x94>)
 80057f2:	6824      	ldr	r4, [r4, #0]
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	1b00      	subs	r0, r0, r4
 80057fa:	6053      	str	r3, [r2, #4]
 80057fc:	6008      	str	r0, [r1, #0]
 80057fe:	e7d5      	b.n	80057ac <_malloc_trim_r+0x3c>
 8005800:	2000062c 	.word	0x2000062c
 8005804:	20000e70 	.word	0x20000e70
 8005808:	20000a38 	.word	0x20000a38

0800580c <_free_r>:
 800580c:	2900      	cmp	r1, #0
 800580e:	d04e      	beq.n	80058ae <_free_r+0xa2>
 8005810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005814:	460c      	mov	r4, r1
 8005816:	4680      	mov	r8, r0
 8005818:	f000 fdce 	bl	80063b8 <__malloc_lock>
 800581c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8005820:	4962      	ldr	r1, [pc, #392]	; (80059ac <_free_r+0x1a0>)
 8005822:	f027 0201 	bic.w	r2, r7, #1
 8005826:	f1a4 0508 	sub.w	r5, r4, #8
 800582a:	18ab      	adds	r3, r5, r2
 800582c:	688e      	ldr	r6, [r1, #8]
 800582e:	6858      	ldr	r0, [r3, #4]
 8005830:	429e      	cmp	r6, r3
 8005832:	f020 0003 	bic.w	r0, r0, #3
 8005836:	d05a      	beq.n	80058ee <_free_r+0xe2>
 8005838:	07fe      	lsls	r6, r7, #31
 800583a:	6058      	str	r0, [r3, #4]
 800583c:	d40b      	bmi.n	8005856 <_free_r+0x4a>
 800583e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8005842:	1bed      	subs	r5, r5, r7
 8005844:	f101 0e08 	add.w	lr, r1, #8
 8005848:	68ac      	ldr	r4, [r5, #8]
 800584a:	4574      	cmp	r4, lr
 800584c:	443a      	add	r2, r7
 800584e:	d067      	beq.n	8005920 <_free_r+0x114>
 8005850:	68ef      	ldr	r7, [r5, #12]
 8005852:	60e7      	str	r7, [r4, #12]
 8005854:	60bc      	str	r4, [r7, #8]
 8005856:	181c      	adds	r4, r3, r0
 8005858:	6864      	ldr	r4, [r4, #4]
 800585a:	07e4      	lsls	r4, r4, #31
 800585c:	d40c      	bmi.n	8005878 <_free_r+0x6c>
 800585e:	4f54      	ldr	r7, [pc, #336]	; (80059b0 <_free_r+0x1a4>)
 8005860:	689c      	ldr	r4, [r3, #8]
 8005862:	42bc      	cmp	r4, r7
 8005864:	4402      	add	r2, r0
 8005866:	d07c      	beq.n	8005962 <_free_r+0x156>
 8005868:	68d8      	ldr	r0, [r3, #12]
 800586a:	60e0      	str	r0, [r4, #12]
 800586c:	f042 0301 	orr.w	r3, r2, #1
 8005870:	6084      	str	r4, [r0, #8]
 8005872:	606b      	str	r3, [r5, #4]
 8005874:	50aa      	str	r2, [r5, r2]
 8005876:	e003      	b.n	8005880 <_free_r+0x74>
 8005878:	f042 0301 	orr.w	r3, r2, #1
 800587c:	606b      	str	r3, [r5, #4]
 800587e:	50aa      	str	r2, [r5, r2]
 8005880:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005884:	d214      	bcs.n	80058b0 <_free_r+0xa4>
 8005886:	08d2      	lsrs	r2, r2, #3
 8005888:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800588c:	6848      	ldr	r0, [r1, #4]
 800588e:	689f      	ldr	r7, [r3, #8]
 8005890:	60af      	str	r7, [r5, #8]
 8005892:	1092      	asrs	r2, r2, #2
 8005894:	2401      	movs	r4, #1
 8005896:	fa04 f202 	lsl.w	r2, r4, r2
 800589a:	4310      	orrs	r0, r2
 800589c:	60eb      	str	r3, [r5, #12]
 800589e:	6048      	str	r0, [r1, #4]
 80058a0:	609d      	str	r5, [r3, #8]
 80058a2:	60fd      	str	r5, [r7, #12]
 80058a4:	4640      	mov	r0, r8
 80058a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058aa:	f000 bd87 	b.w	80063bc <__malloc_unlock>
 80058ae:	4770      	bx	lr
 80058b0:	0a53      	lsrs	r3, r2, #9
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d847      	bhi.n	8005946 <_free_r+0x13a>
 80058b6:	0993      	lsrs	r3, r2, #6
 80058b8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80058bc:	0060      	lsls	r0, r4, #1
 80058be:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80058c2:	493a      	ldr	r1, [pc, #232]	; (80059ac <_free_r+0x1a0>)
 80058c4:	6883      	ldr	r3, [r0, #8]
 80058c6:	4283      	cmp	r3, r0
 80058c8:	d043      	beq.n	8005952 <_free_r+0x146>
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	f021 0103 	bic.w	r1, r1, #3
 80058d0:	4291      	cmp	r1, r2
 80058d2:	d902      	bls.n	80058da <_free_r+0xce>
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	d1f7      	bne.n	80058ca <_free_r+0xbe>
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	60ea      	str	r2, [r5, #12]
 80058de:	60ab      	str	r3, [r5, #8]
 80058e0:	4640      	mov	r0, r8
 80058e2:	6095      	str	r5, [r2, #8]
 80058e4:	60dd      	str	r5, [r3, #12]
 80058e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	f000 bd67 	b.w	80063bc <__malloc_unlock>
 80058ee:	07ff      	lsls	r7, r7, #31
 80058f0:	4402      	add	r2, r0
 80058f2:	d407      	bmi.n	8005904 <_free_r+0xf8>
 80058f4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80058f8:	1aed      	subs	r5, r5, r3
 80058fa:	441a      	add	r2, r3
 80058fc:	68a8      	ldr	r0, [r5, #8]
 80058fe:	68eb      	ldr	r3, [r5, #12]
 8005900:	60c3      	str	r3, [r0, #12]
 8005902:	6098      	str	r0, [r3, #8]
 8005904:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <_free_r+0x1a8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0001 	orr.w	r0, r2, #1
 800590c:	429a      	cmp	r2, r3
 800590e:	6068      	str	r0, [r5, #4]
 8005910:	608d      	str	r5, [r1, #8]
 8005912:	d3c7      	bcc.n	80058a4 <_free_r+0x98>
 8005914:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <_free_r+0x1ac>)
 8005916:	4640      	mov	r0, r8
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	f7ff ff29 	bl	8005770 <_malloc_trim_r>
 800591e:	e7c1      	b.n	80058a4 <_free_r+0x98>
 8005920:	1819      	adds	r1, r3, r0
 8005922:	6849      	ldr	r1, [r1, #4]
 8005924:	07c9      	lsls	r1, r1, #31
 8005926:	d409      	bmi.n	800593c <_free_r+0x130>
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4402      	add	r2, r0
 800592e:	f042 0001 	orr.w	r0, r2, #1
 8005932:	60d9      	str	r1, [r3, #12]
 8005934:	608b      	str	r3, [r1, #8]
 8005936:	6068      	str	r0, [r5, #4]
 8005938:	50aa      	str	r2, [r5, r2]
 800593a:	e7b3      	b.n	80058a4 <_free_r+0x98>
 800593c:	f042 0301 	orr.w	r3, r2, #1
 8005940:	606b      	str	r3, [r5, #4]
 8005942:	50aa      	str	r2, [r5, r2]
 8005944:	e7ae      	b.n	80058a4 <_free_r+0x98>
 8005946:	2b14      	cmp	r3, #20
 8005948:	d814      	bhi.n	8005974 <_free_r+0x168>
 800594a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800594e:	0060      	lsls	r0, r4, #1
 8005950:	e7b5      	b.n	80058be <_free_r+0xb2>
 8005952:	684a      	ldr	r2, [r1, #4]
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	2001      	movs	r0, #1
 8005958:	40a0      	lsls	r0, r4
 800595a:	4302      	orrs	r2, r0
 800595c:	604a      	str	r2, [r1, #4]
 800595e:	461a      	mov	r2, r3
 8005960:	e7bc      	b.n	80058dc <_free_r+0xd0>
 8005962:	f042 0301 	orr.w	r3, r2, #1
 8005966:	614d      	str	r5, [r1, #20]
 8005968:	610d      	str	r5, [r1, #16]
 800596a:	60ec      	str	r4, [r5, #12]
 800596c:	60ac      	str	r4, [r5, #8]
 800596e:	606b      	str	r3, [r5, #4]
 8005970:	50aa      	str	r2, [r5, r2]
 8005972:	e797      	b.n	80058a4 <_free_r+0x98>
 8005974:	2b54      	cmp	r3, #84	; 0x54
 8005976:	d804      	bhi.n	8005982 <_free_r+0x176>
 8005978:	0b13      	lsrs	r3, r2, #12
 800597a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800597e:	0060      	lsls	r0, r4, #1
 8005980:	e79d      	b.n	80058be <_free_r+0xb2>
 8005982:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005986:	d804      	bhi.n	8005992 <_free_r+0x186>
 8005988:	0bd3      	lsrs	r3, r2, #15
 800598a:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800598e:	0060      	lsls	r0, r4, #1
 8005990:	e795      	b.n	80058be <_free_r+0xb2>
 8005992:	f240 5054 	movw	r0, #1364	; 0x554
 8005996:	4283      	cmp	r3, r0
 8005998:	d804      	bhi.n	80059a4 <_free_r+0x198>
 800599a:	0c93      	lsrs	r3, r2, #18
 800599c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80059a0:	0060      	lsls	r0, r4, #1
 80059a2:	e78c      	b.n	80058be <_free_r+0xb2>
 80059a4:	20fc      	movs	r0, #252	; 0xfc
 80059a6:	247e      	movs	r4, #126	; 0x7e
 80059a8:	e789      	b.n	80058be <_free_r+0xb2>
 80059aa:	bf00      	nop
 80059ac:	2000062c 	.word	0x2000062c
 80059b0:	20000634 	.word	0x20000634
 80059b4:	20000a34 	.word	0x20000a34
 80059b8:	20000e6c 	.word	0x20000e6c

080059bc <__sfvwrite_r>:
 80059bc:	6893      	ldr	r3, [r2, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d07a      	beq.n	8005ab8 <__sfvwrite_r+0xfc>
 80059c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80059ca:	f01e 0f08 	tst.w	lr, #8
 80059ce:	b083      	sub	sp, #12
 80059d0:	460c      	mov	r4, r1
 80059d2:	4681      	mov	r9, r0
 80059d4:	4616      	mov	r6, r2
 80059d6:	d026      	beq.n	8005a26 <__sfvwrite_r+0x6a>
 80059d8:	690b      	ldr	r3, [r1, #16]
 80059da:	b323      	cbz	r3, 8005a26 <__sfvwrite_r+0x6a>
 80059dc:	f00e 0802 	and.w	r8, lr, #2
 80059e0:	fa1f f088 	uxth.w	r0, r8
 80059e4:	6835      	ldr	r5, [r6, #0]
 80059e6:	b370      	cbz	r0, 8005a46 <__sfvwrite_r+0x8a>
 80059e8:	f04f 0a00 	mov.w	sl, #0
 80059ec:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8005cd0 <__sfvwrite_r+0x314>
 80059f0:	46d0      	mov	r8, sl
 80059f2:	45d8      	cmp	r8, fp
 80059f4:	4643      	mov	r3, r8
 80059f6:	4652      	mov	r2, sl
 80059f8:	bf28      	it	cs
 80059fa:	465b      	movcs	r3, fp
 80059fc:	4648      	mov	r0, r9
 80059fe:	f1b8 0f00 	cmp.w	r8, #0
 8005a02:	d053      	beq.n	8005aac <__sfvwrite_r+0xf0>
 8005a04:	69e1      	ldr	r1, [r4, #28]
 8005a06:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005a08:	47b8      	blx	r7
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	dd73      	ble.n	8005af6 <__sfvwrite_r+0x13a>
 8005a0e:	68b3      	ldr	r3, [r6, #8]
 8005a10:	1a1b      	subs	r3, r3, r0
 8005a12:	4482      	add	sl, r0
 8005a14:	ebc0 0808 	rsb	r8, r0, r8
 8005a18:	60b3      	str	r3, [r6, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e9      	bne.n	80059f2 <__sfvwrite_r+0x36>
 8005a1e:	2000      	movs	r0, #0
 8005a20:	b003      	add	sp, #12
 8005a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a26:	4648      	mov	r0, r9
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f000 ff81 	bl	8006930 <__swsetup_r>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8145 	bne.w	8005cbe <__sfvwrite_r+0x302>
 8005a34:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8005a38:	6835      	ldr	r5, [r6, #0]
 8005a3a:	f00e 0802 	and.w	r8, lr, #2
 8005a3e:	fa1f f088 	uxth.w	r0, r8
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d1d0      	bne.n	80059e8 <__sfvwrite_r+0x2c>
 8005a46:	f01e 0b01 	ands.w	fp, lr, #1
 8005a4a:	d15d      	bne.n	8005b08 <__sfvwrite_r+0x14c>
 8005a4c:	46d8      	mov	r8, fp
 8005a4e:	f1b8 0f00 	cmp.w	r8, #0
 8005a52:	d025      	beq.n	8005aa0 <__sfvwrite_r+0xe4>
 8005a54:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8005a58:	68a7      	ldr	r7, [r4, #8]
 8005a5a:	d02f      	beq.n	8005abc <__sfvwrite_r+0x100>
 8005a5c:	45b8      	cmp	r8, r7
 8005a5e:	46ba      	mov	sl, r7
 8005a60:	f0c0 80a9 	bcc.w	8005bb6 <__sfvwrite_r+0x1fa>
 8005a64:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8005a68:	f040 80b6 	bne.w	8005bd8 <__sfvwrite_r+0x21c>
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	4652      	mov	r2, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	f000 fc3d 	bl	80062f0 <memmove>
 8005a76:	68a0      	ldr	r0, [r4, #8]
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	1bc0      	subs	r0, r0, r7
 8005a7c:	eb02 030a 	add.w	r3, r2, sl
 8005a80:	60a0      	str	r0, [r4, #8]
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	4640      	mov	r0, r8
 8005a86:	68b3      	ldr	r3, [r6, #8]
 8005a88:	1a1b      	subs	r3, r3, r0
 8005a8a:	4483      	add	fp, r0
 8005a8c:	ebc0 0808 	rsb	r8, r0, r8
 8005a90:	60b3      	str	r3, [r6, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0c3      	beq.n	8005a1e <__sfvwrite_r+0x62>
 8005a96:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8005a9a:	f1b8 0f00 	cmp.w	r8, #0
 8005a9e:	d1d9      	bne.n	8005a54 <__sfvwrite_r+0x98>
 8005aa0:	f8d5 b000 	ldr.w	fp, [r5]
 8005aa4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005aa8:	3508      	adds	r5, #8
 8005aaa:	e7d0      	b.n	8005a4e <__sfvwrite_r+0x92>
 8005aac:	f8d5 a000 	ldr.w	sl, [r5]
 8005ab0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005ab4:	3508      	adds	r5, #8
 8005ab6:	e79c      	b.n	80059f2 <__sfvwrite_r+0x36>
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4770      	bx	lr
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	4298      	cmp	r0, r3
 8005ac2:	d803      	bhi.n	8005acc <__sfvwrite_r+0x110>
 8005ac4:	6962      	ldr	r2, [r4, #20]
 8005ac6:	4590      	cmp	r8, r2
 8005ac8:	f080 80b9 	bcs.w	8005c3e <__sfvwrite_r+0x282>
 8005acc:	4547      	cmp	r7, r8
 8005ace:	bf28      	it	cs
 8005ad0:	4647      	movcs	r7, r8
 8005ad2:	463a      	mov	r2, r7
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	f000 fc0b 	bl	80062f0 <memmove>
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	1bdb      	subs	r3, r3, r7
 8005ae0:	443a      	add	r2, r7
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	6022      	str	r2, [r4, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d14a      	bne.n	8005b80 <__sfvwrite_r+0x1c4>
 8005aea:	4648      	mov	r0, r9
 8005aec:	4621      	mov	r1, r4
 8005aee:	f7ff fd8b 	bl	8005608 <_fflush_r>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d044      	beq.n	8005b80 <__sfvwrite_r+0x1c4>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	b003      	add	sp, #12
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	4680      	mov	r8, r0
 8005b0a:	9000      	str	r0, [sp, #0]
 8005b0c:	4683      	mov	fp, r0
 8005b0e:	4682      	mov	sl, r0
 8005b10:	f1ba 0f00 	cmp.w	sl, #0
 8005b14:	d02c      	beq.n	8005b70 <__sfvwrite_r+0x1b4>
 8005b16:	9b00      	ldr	r3, [sp, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d050      	beq.n	8005bbe <__sfvwrite_r+0x202>
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	6921      	ldr	r1, [r4, #16]
 8005b20:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005b24:	6962      	ldr	r2, [r4, #20]
 8005b26:	45d0      	cmp	r8, sl
 8005b28:	4643      	mov	r3, r8
 8005b2a:	bf28      	it	cs
 8005b2c:	4653      	movcs	r3, sl
 8005b2e:	4288      	cmp	r0, r1
 8005b30:	461f      	mov	r7, r3
 8005b32:	d904      	bls.n	8005b3e <__sfvwrite_r+0x182>
 8005b34:	eb0e 0c02 	add.w	ip, lr, r2
 8005b38:	4563      	cmp	r3, ip
 8005b3a:	f300 8092 	bgt.w	8005c62 <__sfvwrite_r+0x2a6>
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	db20      	blt.n	8005b84 <__sfvwrite_r+0x1c8>
 8005b42:	4613      	mov	r3, r2
 8005b44:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005b46:	69e1      	ldr	r1, [r4, #28]
 8005b48:	4648      	mov	r0, r9
 8005b4a:	465a      	mov	r2, fp
 8005b4c:	47b8      	blx	r7
 8005b4e:	1e07      	subs	r7, r0, #0
 8005b50:	ddd1      	ble.n	8005af6 <__sfvwrite_r+0x13a>
 8005b52:	ebb8 0807 	subs.w	r8, r8, r7
 8005b56:	d025      	beq.n	8005ba4 <__sfvwrite_r+0x1e8>
 8005b58:	68b3      	ldr	r3, [r6, #8]
 8005b5a:	1bdb      	subs	r3, r3, r7
 8005b5c:	44bb      	add	fp, r7
 8005b5e:	ebc7 0a0a 	rsb	sl, r7, sl
 8005b62:	60b3      	str	r3, [r6, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f43f af5a 	beq.w	8005a1e <__sfvwrite_r+0x62>
 8005b6a:	f1ba 0f00 	cmp.w	sl, #0
 8005b6e:	d1d2      	bne.n	8005b16 <__sfvwrite_r+0x15a>
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8d5 b000 	ldr.w	fp, [r5]
 8005b76:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	3508      	adds	r5, #8
 8005b7e:	e7c7      	b.n	8005b10 <__sfvwrite_r+0x154>
 8005b80:	4638      	mov	r0, r7
 8005b82:	e780      	b.n	8005a86 <__sfvwrite_r+0xca>
 8005b84:	461a      	mov	r2, r3
 8005b86:	4659      	mov	r1, fp
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	f000 fbb1 	bl	80062f0 <memmove>
 8005b8e:	68a2      	ldr	r2, [r4, #8]
 8005b90:	6821      	ldr	r1, [r4, #0]
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	ebb8 0807 	subs.w	r8, r8, r7
 8005b98:	eba2 0203 	sub.w	r2, r2, r3
 8005b9c:	440b      	add	r3, r1
 8005b9e:	60a2      	str	r2, [r4, #8]
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	d1d9      	bne.n	8005b58 <__sfvwrite_r+0x19c>
 8005ba4:	4648      	mov	r0, r9
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	f7ff fd2e 	bl	8005608 <_fflush_r>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d1a2      	bne.n	8005af6 <__sfvwrite_r+0x13a>
 8005bb0:	f8cd 8000 	str.w	r8, [sp]
 8005bb4:	e7d0      	b.n	8005b58 <__sfvwrite_r+0x19c>
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	4647      	mov	r7, r8
 8005bba:	46c2      	mov	sl, r8
 8005bbc:	e757      	b.n	8005a6e <__sfvwrite_r+0xb2>
 8005bbe:	4658      	mov	r0, fp
 8005bc0:	210a      	movs	r1, #10
 8005bc2:	4652      	mov	r2, sl
 8005bc4:	f000 fb4a 	bl	800625c <memchr>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d073      	beq.n	8005cb4 <__sfvwrite_r+0x2f8>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	2301      	movs	r3, #1
 8005bd0:	ebcb 0800 	rsb	r8, fp, r0
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	e7a1      	b.n	8005b1c <__sfvwrite_r+0x160>
 8005bd8:	6967      	ldr	r7, [r4, #20]
 8005bda:	6921      	ldr	r1, [r4, #16]
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005be8:	1c58      	adds	r0, r3, #1
 8005bea:	107f      	asrs	r7, r7, #1
 8005bec:	4440      	add	r0, r8
 8005bee:	4287      	cmp	r7, r0
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	bf3c      	itt	cc
 8005bf4:	4607      	movcc	r7, r0
 8005bf6:	463a      	movcc	r2, r7
 8005bf8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	d046      	beq.n	8005c8e <__sfvwrite_r+0x2d2>
 8005c00:	4611      	mov	r1, r2
 8005c02:	4648      	mov	r0, r9
 8005c04:	f000 f898 	bl	8005d38 <_malloc_r>
 8005c08:	9b00      	ldr	r3, [sp, #0]
 8005c0a:	4682      	mov	sl, r0
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d059      	beq.n	8005cc4 <__sfvwrite_r+0x308>
 8005c10:	461a      	mov	r2, r3
 8005c12:	6921      	ldr	r1, [r4, #16]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	f7fa fb27 	bl	8000268 <memcpy>
 8005c1a:	89a2      	ldrh	r2, [r4, #12]
 8005c1c:	9b00      	ldr	r3, [sp, #0]
 8005c1e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c26:	81a2      	strh	r2, [r4, #12]
 8005c28:	eb0a 0003 	add.w	r0, sl, r3
 8005c2c:	1afb      	subs	r3, r7, r3
 8005c2e:	f8c4 a010 	str.w	sl, [r4, #16]
 8005c32:	6167      	str	r7, [r4, #20]
 8005c34:	6020      	str	r0, [r4, #0]
 8005c36:	60a3      	str	r3, [r4, #8]
 8005c38:	4647      	mov	r7, r8
 8005c3a:	46c2      	mov	sl, r8
 8005c3c:	e717      	b.n	8005a6e <__sfvwrite_r+0xb2>
 8005c3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005c42:	4543      	cmp	r3, r8
 8005c44:	bf28      	it	cs
 8005c46:	4643      	movcs	r3, r8
 8005c48:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005c4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c4e:	4648      	mov	r0, r9
 8005c50:	fb03 f302 	mul.w	r3, r3, r2
 8005c54:	69e1      	ldr	r1, [r4, #28]
 8005c56:	465a      	mov	r2, fp
 8005c58:	47b8      	blx	r7
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f73f af13 	bgt.w	8005a86 <__sfvwrite_r+0xca>
 8005c60:	e749      	b.n	8005af6 <__sfvwrite_r+0x13a>
 8005c62:	4662      	mov	r2, ip
 8005c64:	4659      	mov	r1, fp
 8005c66:	f8cd c004 	str.w	ip, [sp, #4]
 8005c6a:	f000 fb41 	bl	80062f0 <memmove>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c74:	4463      	add	r3, ip
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	4648      	mov	r0, r9
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	f7ff fcc4 	bl	8005608 <_fflush_r>
 8005c80:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c84:	2800      	cmp	r0, #0
 8005c86:	f47f af36 	bne.w	8005af6 <__sfvwrite_r+0x13a>
 8005c8a:	4667      	mov	r7, ip
 8005c8c:	e761      	b.n	8005b52 <__sfvwrite_r+0x196>
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f000 fbc2 	bl	8006418 <_realloc_r>
 8005c94:	9b00      	ldr	r3, [sp, #0]
 8005c96:	4682      	mov	sl, r0
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d1c5      	bne.n	8005c28 <__sfvwrite_r+0x26c>
 8005c9c:	4648      	mov	r0, r9
 8005c9e:	6921      	ldr	r1, [r4, #16]
 8005ca0:	f7ff fdb4 	bl	800580c <_free_r>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	220c      	movs	r2, #12
 8005ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f8c9 2000 	str.w	r2, [r9]
 8005cb2:	e721      	b.n	8005af8 <__sfvwrite_r+0x13c>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f10a 0801 	add.w	r8, sl, #1
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	e72e      	b.n	8005b1c <__sfvwrite_r+0x160>
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc2:	e6ad      	b.n	8005a20 <__sfvwrite_r+0x64>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	f8c9 3000 	str.w	r3, [r9]
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	e714      	b.n	8005af8 <__sfvwrite_r+0x13c>
 8005cce:	bf00      	nop
 8005cd0:	7ffffc00 	.word	0x7ffffc00

08005cd4 <_fwalk_reent>:
 8005cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8005cdc:	d01f      	beq.n	8005d1e <_fwalk_reent+0x4a>
 8005cde:	4688      	mov	r8, r1
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	687d      	ldr	r5, [r7, #4]
 8005ce8:	68bc      	ldr	r4, [r7, #8]
 8005cea:	3d01      	subs	r5, #1
 8005cec:	d411      	bmi.n	8005d12 <_fwalk_reent+0x3e>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005cf6:	d908      	bls.n	8005d0a <_fwalk_reent+0x36>
 8005cf8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4630      	mov	r0, r6
 8005d02:	d002      	beq.n	8005d0a <_fwalk_reent+0x36>
 8005d04:	47c0      	blx	r8
 8005d06:	ea49 0900 	orr.w	r9, r9, r0
 8005d0a:	1c6b      	adds	r3, r5, #1
 8005d0c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8005d10:	d1ed      	bne.n	8005cee <_fwalk_reent+0x1a>
 8005d12:	683f      	ldr	r7, [r7, #0]
 8005d14:	2f00      	cmp	r7, #0
 8005d16:	d1e6      	bne.n	8005ce6 <_fwalk_reent+0x12>
 8005d18:	4648      	mov	r0, r9
 8005d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1e:	46b9      	mov	r9, r7
 8005d20:	4648      	mov	r0, r9
 8005d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d26:	bf00      	nop

08005d28 <malloc>:
 8005d28:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <malloc+0xc>)
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	f000 b803 	b.w	8005d38 <_malloc_r>
 8005d32:	bf00      	nop
 8005d34:	20000628 	.word	0x20000628

08005d38 <_malloc_r>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	f101 050b 	add.w	r5, r1, #11
 8005d40:	2d16      	cmp	r5, #22
 8005d42:	b083      	sub	sp, #12
 8005d44:	4606      	mov	r6, r0
 8005d46:	d927      	bls.n	8005d98 <_malloc_r+0x60>
 8005d48:	f035 0507 	bics.w	r5, r5, #7
 8005d4c:	f100 80b6 	bmi.w	8005ebc <_malloc_r+0x184>
 8005d50:	42a9      	cmp	r1, r5
 8005d52:	f200 80b3 	bhi.w	8005ebc <_malloc_r+0x184>
 8005d56:	f000 fb2f 	bl	80063b8 <__malloc_lock>
 8005d5a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005d5e:	d222      	bcs.n	8005da6 <_malloc_r+0x6e>
 8005d60:	4fc2      	ldr	r7, [pc, #776]	; (800606c <_malloc_r+0x334>)
 8005d62:	08e8      	lsrs	r0, r5, #3
 8005d64:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8005d68:	68dc      	ldr	r4, [r3, #12]
 8005d6a:	429c      	cmp	r4, r3
 8005d6c:	f000 81c8 	beq.w	8006100 <_malloc_r+0x3c8>
 8005d70:	6863      	ldr	r3, [r4, #4]
 8005d72:	68e1      	ldr	r1, [r4, #12]
 8005d74:	68a5      	ldr	r5, [r4, #8]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	4423      	add	r3, r4
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	60e9      	str	r1, [r5, #12]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	608d      	str	r5, [r1, #8]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	f000 fb17 	bl	80063bc <__malloc_unlock>
 8005d8e:	3408      	adds	r4, #8
 8005d90:	4620      	mov	r0, r4
 8005d92:	b003      	add	sp, #12
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	2910      	cmp	r1, #16
 8005d9a:	f200 808f 	bhi.w	8005ebc <_malloc_r+0x184>
 8005d9e:	f000 fb0b 	bl	80063b8 <__malloc_lock>
 8005da2:	2510      	movs	r5, #16
 8005da4:	e7dc      	b.n	8005d60 <_malloc_r+0x28>
 8005da6:	0a68      	lsrs	r0, r5, #9
 8005da8:	f000 808f 	beq.w	8005eca <_malloc_r+0x192>
 8005dac:	2804      	cmp	r0, #4
 8005dae:	f200 8154 	bhi.w	800605a <_malloc_r+0x322>
 8005db2:	09a8      	lsrs	r0, r5, #6
 8005db4:	3038      	adds	r0, #56	; 0x38
 8005db6:	0041      	lsls	r1, r0, #1
 8005db8:	4fac      	ldr	r7, [pc, #688]	; (800606c <_malloc_r+0x334>)
 8005dba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8005dbe:	68cc      	ldr	r4, [r1, #12]
 8005dc0:	42a1      	cmp	r1, r4
 8005dc2:	d106      	bne.n	8005dd2 <_malloc_r+0x9a>
 8005dc4:	e00c      	b.n	8005de0 <_malloc_r+0xa8>
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	f280 8082 	bge.w	8005ed0 <_malloc_r+0x198>
 8005dcc:	68e4      	ldr	r4, [r4, #12]
 8005dce:	42a1      	cmp	r1, r4
 8005dd0:	d006      	beq.n	8005de0 <_malloc_r+0xa8>
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	f023 0303 	bic.w	r3, r3, #3
 8005dd8:	1b5a      	subs	r2, r3, r5
 8005dda:	2a0f      	cmp	r2, #15
 8005ddc:	ddf3      	ble.n	8005dc6 <_malloc_r+0x8e>
 8005dde:	3801      	subs	r0, #1
 8005de0:	3001      	adds	r0, #1
 8005de2:	49a2      	ldr	r1, [pc, #648]	; (800606c <_malloc_r+0x334>)
 8005de4:	693c      	ldr	r4, [r7, #16]
 8005de6:	f101 0e08 	add.w	lr, r1, #8
 8005dea:	4574      	cmp	r4, lr
 8005dec:	f000 817d 	beq.w	80060ea <_malloc_r+0x3b2>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	1b5a      	subs	r2, r3, r5
 8005df8:	2a0f      	cmp	r2, #15
 8005dfa:	f300 8163 	bgt.w	80060c4 <_malloc_r+0x38c>
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	f8c1 e014 	str.w	lr, [r1, #20]
 8005e04:	f8c1 e010 	str.w	lr, [r1, #16]
 8005e08:	da73      	bge.n	8005ef2 <_malloc_r+0x1ba>
 8005e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0e:	f080 8139 	bcs.w	8006084 <_malloc_r+0x34c>
 8005e12:	08db      	lsrs	r3, r3, #3
 8005e14:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8005e18:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8005e1c:	684a      	ldr	r2, [r1, #4]
 8005e1e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8005e22:	f8c4 9008 	str.w	r9, [r4, #8]
 8005e26:	2301      	movs	r3, #1
 8005e28:	fa03 f30c 	lsl.w	r3, r3, ip
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c4 800c 	str.w	r8, [r4, #12]
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	f8c8 4008 	str.w	r4, [r8, #8]
 8005e38:	f8c9 400c 	str.w	r4, [r9, #12]
 8005e3c:	1082      	asrs	r2, r0, #2
 8005e3e:	2401      	movs	r4, #1
 8005e40:	4094      	lsls	r4, r2
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d862      	bhi.n	8005f0c <_malloc_r+0x1d4>
 8005e46:	4223      	tst	r3, r4
 8005e48:	d106      	bne.n	8005e58 <_malloc_r+0x120>
 8005e4a:	f020 0003 	bic.w	r0, r0, #3
 8005e4e:	0064      	lsls	r4, r4, #1
 8005e50:	4223      	tst	r3, r4
 8005e52:	f100 0004 	add.w	r0, r0, #4
 8005e56:	d0fa      	beq.n	8005e4e <_malloc_r+0x116>
 8005e58:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8005e5c:	46c4      	mov	ip, r8
 8005e5e:	4681      	mov	r9, r0
 8005e60:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005e64:	459c      	cmp	ip, r3
 8005e66:	d107      	bne.n	8005e78 <_malloc_r+0x140>
 8005e68:	e141      	b.n	80060ee <_malloc_r+0x3b6>
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	f280 8151 	bge.w	8006112 <_malloc_r+0x3da>
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	459c      	cmp	ip, r3
 8005e74:	f000 813b 	beq.w	80060ee <_malloc_r+0x3b6>
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	f022 0203 	bic.w	r2, r2, #3
 8005e7e:	1b51      	subs	r1, r2, r5
 8005e80:	290f      	cmp	r1, #15
 8005e82:	ddf2      	ble.n	8005e6a <_malloc_r+0x132>
 8005e84:	461c      	mov	r4, r3
 8005e86:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005e8a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8005e8e:	195a      	adds	r2, r3, r5
 8005e90:	f045 0901 	orr.w	r9, r5, #1
 8005e94:	f041 0501 	orr.w	r5, r1, #1
 8005e98:	f8c3 9004 	str.w	r9, [r3, #4]
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8005ea2:	f8cc 8008 	str.w	r8, [ip, #8]
 8005ea6:	617a      	str	r2, [r7, #20]
 8005ea8:	613a      	str	r2, [r7, #16]
 8005eaa:	f8c2 e00c 	str.w	lr, [r2, #12]
 8005eae:	f8c2 e008 	str.w	lr, [r2, #8]
 8005eb2:	6055      	str	r5, [r2, #4]
 8005eb4:	5051      	str	r1, [r2, r1]
 8005eb6:	f000 fa81 	bl	80063bc <__malloc_unlock>
 8005eba:	e769      	b.n	8005d90 <_malloc_r+0x58>
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	b003      	add	sp, #12
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	217e      	movs	r1, #126	; 0x7e
 8005ecc:	203f      	movs	r0, #63	; 0x3f
 8005ece:	e773      	b.n	8005db8 <_malloc_r+0x80>
 8005ed0:	4423      	add	r3, r4
 8005ed2:	68e1      	ldr	r1, [r4, #12]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	68a5      	ldr	r5, [r4, #8]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	60e9      	str	r1, [r5, #12]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	608d      	str	r5, [r1, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	f000 fa6a 	bl	80063bc <__malloc_unlock>
 8005ee8:	3408      	adds	r4, #8
 8005eea:	4620      	mov	r0, r4
 8005eec:	b003      	add	sp, #12
 8005eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef2:	4423      	add	r3, r4
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	f000 fa5d 	bl	80063bc <__malloc_unlock>
 8005f02:	3408      	adds	r4, #8
 8005f04:	4620      	mov	r0, r4
 8005f06:	b003      	add	sp, #12
 8005f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0c:	68bc      	ldr	r4, [r7, #8]
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	f023 0803 	bic.w	r8, r3, #3
 8005f14:	4545      	cmp	r5, r8
 8005f16:	d804      	bhi.n	8005f22 <_malloc_r+0x1ea>
 8005f18:	ebc5 0308 	rsb	r3, r5, r8
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	f300 808c 	bgt.w	800603a <_malloc_r+0x302>
 8005f22:	4b53      	ldr	r3, [pc, #332]	; (8006070 <_malloc_r+0x338>)
 8005f24:	f8df a158 	ldr.w	sl, [pc, #344]	; 8006080 <_malloc_r+0x348>
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	f8da 3000 	ldr.w	r3, [sl]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	442a      	add	r2, r5
 8005f32:	eb04 0b08 	add.w	fp, r4, r8
 8005f36:	f000 8150 	beq.w	80061da <_malloc_r+0x4a2>
 8005f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f3e:	320f      	adds	r2, #15
 8005f40:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005f44:	f022 020f 	bic.w	r2, r2, #15
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	9201      	str	r2, [sp, #4]
 8005f4e:	f7fa fd03 	bl	8000958 <_sbrk_r>
 8005f52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f56:	4681      	mov	r9, r0
 8005f58:	9a01      	ldr	r2, [sp, #4]
 8005f5a:	f000 8147 	beq.w	80061ec <_malloc_r+0x4b4>
 8005f5e:	4583      	cmp	fp, r0
 8005f60:	f200 80ee 	bhi.w	8006140 <_malloc_r+0x408>
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <_malloc_r+0x33c>)
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	45cb      	cmp	fp, r9
 8005f6a:	4411      	add	r1, r2
 8005f6c:	6019      	str	r1, [r3, #0]
 8005f6e:	f000 8142 	beq.w	80061f6 <_malloc_r+0x4be>
 8005f72:	f8da 0000 	ldr.w	r0, [sl]
 8005f76:	f8df e108 	ldr.w	lr, [pc, #264]	; 8006080 <_malloc_r+0x348>
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	bf1b      	ittet	ne
 8005f7e:	ebcb 0b09 	rsbne	fp, fp, r9
 8005f82:	4459      	addne	r1, fp
 8005f84:	f8ce 9000 	streq.w	r9, [lr]
 8005f88:	6019      	strne	r1, [r3, #0]
 8005f8a:	f019 0107 	ands.w	r1, r9, #7
 8005f8e:	f000 8107 	beq.w	80061a0 <_malloc_r+0x468>
 8005f92:	f1c1 0008 	rsb	r0, r1, #8
 8005f96:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8005f9a:	4481      	add	r9, r0
 8005f9c:	3108      	adds	r1, #8
 8005f9e:	444a      	add	r2, r9
 8005fa0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005fa4:	ebc2 0a01 	rsb	sl, r2, r1
 8005fa8:	4651      	mov	r1, sl
 8005faa:	4630      	mov	r0, r6
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	f7fa fcd3 	bl	8000958 <_sbrk_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	f000 812c 	beq.w	8006212 <_malloc_r+0x4da>
 8005fba:	ebc9 0200 	rsb	r2, r9, r0
 8005fbe:	4452      	add	r2, sl
 8005fc0:	f042 0201 	orr.w	r2, r2, #1
 8005fc4:	6819      	ldr	r1, [r3, #0]
 8005fc6:	f8c7 9008 	str.w	r9, [r7, #8]
 8005fca:	4451      	add	r1, sl
 8005fcc:	42bc      	cmp	r4, r7
 8005fce:	f8c9 2004 	str.w	r2, [r9, #4]
 8005fd2:	6019      	str	r1, [r3, #0]
 8005fd4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8006074 <_malloc_r+0x33c>
 8005fd8:	d016      	beq.n	8006008 <_malloc_r+0x2d0>
 8005fda:	f1b8 0f0f 	cmp.w	r8, #15
 8005fde:	f240 80ee 	bls.w	80061be <_malloc_r+0x486>
 8005fe2:	6862      	ldr	r2, [r4, #4]
 8005fe4:	f1a8 030c 	sub.w	r3, r8, #12
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	18e0      	adds	r0, r4, r3
 8005fee:	f002 0201 	and.w	r2, r2, #1
 8005ff2:	f04f 0e05 	mov.w	lr, #5
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	2b0f      	cmp	r3, #15
 8005ffa:	6062      	str	r2, [r4, #4]
 8005ffc:	f8c0 e004 	str.w	lr, [r0, #4]
 8006000:	f8c0 e008 	str.w	lr, [r0, #8]
 8006004:	f200 8109 	bhi.w	800621a <_malloc_r+0x4e2>
 8006008:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <_malloc_r+0x340>)
 800600a:	68bc      	ldr	r4, [r7, #8]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4291      	cmp	r1, r2
 8006010:	bf88      	it	hi
 8006012:	6019      	strhi	r1, [r3, #0]
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <_malloc_r+0x344>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4291      	cmp	r1, r2
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	bf88      	it	hi
 800601e:	6019      	strhi	r1, [r3, #0]
 8006020:	f022 0203 	bic.w	r2, r2, #3
 8006024:	4295      	cmp	r5, r2
 8006026:	eba2 0305 	sub.w	r3, r2, r5
 800602a:	d801      	bhi.n	8006030 <_malloc_r+0x2f8>
 800602c:	2b0f      	cmp	r3, #15
 800602e:	dc04      	bgt.n	800603a <_malloc_r+0x302>
 8006030:	4630      	mov	r0, r6
 8006032:	f000 f9c3 	bl	80063bc <__malloc_unlock>
 8006036:	2400      	movs	r4, #0
 8006038:	e6aa      	b.n	8005d90 <_malloc_r+0x58>
 800603a:	1962      	adds	r2, r4, r5
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	f045 0501 	orr.w	r5, r5, #1
 8006044:	6065      	str	r5, [r4, #4]
 8006046:	4630      	mov	r0, r6
 8006048:	60ba      	str	r2, [r7, #8]
 800604a:	6053      	str	r3, [r2, #4]
 800604c:	f000 f9b6 	bl	80063bc <__malloc_unlock>
 8006050:	3408      	adds	r4, #8
 8006052:	4620      	mov	r0, r4
 8006054:	b003      	add	sp, #12
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605a:	2814      	cmp	r0, #20
 800605c:	d968      	bls.n	8006130 <_malloc_r+0x3f8>
 800605e:	2854      	cmp	r0, #84	; 0x54
 8006060:	f200 8097 	bhi.w	8006192 <_malloc_r+0x45a>
 8006064:	0b28      	lsrs	r0, r5, #12
 8006066:	306e      	adds	r0, #110	; 0x6e
 8006068:	0041      	lsls	r1, r0, #1
 800606a:	e6a5      	b.n	8005db8 <_malloc_r+0x80>
 800606c:	2000062c 	.word	0x2000062c
 8006070:	20000e6c 	.word	0x20000e6c
 8006074:	20000e70 	.word	0x20000e70
 8006078:	20000e68 	.word	0x20000e68
 800607c:	20000e64 	.word	0x20000e64
 8006080:	20000a38 	.word	0x20000a38
 8006084:	0a5a      	lsrs	r2, r3, #9
 8006086:	2a04      	cmp	r2, #4
 8006088:	d955      	bls.n	8006136 <_malloc_r+0x3fe>
 800608a:	2a14      	cmp	r2, #20
 800608c:	f200 80a7 	bhi.w	80061de <_malloc_r+0x4a6>
 8006090:	325b      	adds	r2, #91	; 0x5b
 8006092:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006096:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800609a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006258 <_malloc_r+0x520>
 800609e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80060a2:	4561      	cmp	r1, ip
 80060a4:	d07f      	beq.n	80061a6 <_malloc_r+0x46e>
 80060a6:	684a      	ldr	r2, [r1, #4]
 80060a8:	f022 0203 	bic.w	r2, r2, #3
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d202      	bcs.n	80060b6 <_malloc_r+0x37e>
 80060b0:	6889      	ldr	r1, [r1, #8]
 80060b2:	458c      	cmp	ip, r1
 80060b4:	d1f7      	bne.n	80060a6 <_malloc_r+0x36e>
 80060b6:	68ca      	ldr	r2, [r1, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60e2      	str	r2, [r4, #12]
 80060bc:	60a1      	str	r1, [r4, #8]
 80060be:	6094      	str	r4, [r2, #8]
 80060c0:	60cc      	str	r4, [r1, #12]
 80060c2:	e6bb      	b.n	8005e3c <_malloc_r+0x104>
 80060c4:	1963      	adds	r3, r4, r5
 80060c6:	f042 0701 	orr.w	r7, r2, #1
 80060ca:	f045 0501 	orr.w	r5, r5, #1
 80060ce:	6065      	str	r5, [r4, #4]
 80060d0:	4630      	mov	r0, r6
 80060d2:	614b      	str	r3, [r1, #20]
 80060d4:	610b      	str	r3, [r1, #16]
 80060d6:	f8c3 e00c 	str.w	lr, [r3, #12]
 80060da:	f8c3 e008 	str.w	lr, [r3, #8]
 80060de:	605f      	str	r7, [r3, #4]
 80060e0:	509a      	str	r2, [r3, r2]
 80060e2:	3408      	adds	r4, #8
 80060e4:	f000 f96a 	bl	80063bc <__malloc_unlock>
 80060e8:	e652      	b.n	8005d90 <_malloc_r+0x58>
 80060ea:	684b      	ldr	r3, [r1, #4]
 80060ec:	e6a6      	b.n	8005e3c <_malloc_r+0x104>
 80060ee:	f109 0901 	add.w	r9, r9, #1
 80060f2:	f019 0f03 	tst.w	r9, #3
 80060f6:	f10c 0c08 	add.w	ip, ip, #8
 80060fa:	f47f aeb1 	bne.w	8005e60 <_malloc_r+0x128>
 80060fe:	e02c      	b.n	800615a <_malloc_r+0x422>
 8006100:	f104 0308 	add.w	r3, r4, #8
 8006104:	6964      	ldr	r4, [r4, #20]
 8006106:	42a3      	cmp	r3, r4
 8006108:	bf08      	it	eq
 800610a:	3002      	addeq	r0, #2
 800610c:	f43f ae69 	beq.w	8005de2 <_malloc_r+0xaa>
 8006110:	e62e      	b.n	8005d70 <_malloc_r+0x38>
 8006112:	441a      	add	r2, r3
 8006114:	461c      	mov	r4, r3
 8006116:	6851      	ldr	r1, [r2, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800611e:	f041 0101 	orr.w	r1, r1, #1
 8006122:	6051      	str	r1, [r2, #4]
 8006124:	4630      	mov	r0, r6
 8006126:	60eb      	str	r3, [r5, #12]
 8006128:	609d      	str	r5, [r3, #8]
 800612a:	f000 f947 	bl	80063bc <__malloc_unlock>
 800612e:	e62f      	b.n	8005d90 <_malloc_r+0x58>
 8006130:	305b      	adds	r0, #91	; 0x5b
 8006132:	0041      	lsls	r1, r0, #1
 8006134:	e640      	b.n	8005db8 <_malloc_r+0x80>
 8006136:	099a      	lsrs	r2, r3, #6
 8006138:	3238      	adds	r2, #56	; 0x38
 800613a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800613e:	e7aa      	b.n	8006096 <_malloc_r+0x35e>
 8006140:	42bc      	cmp	r4, r7
 8006142:	4b45      	ldr	r3, [pc, #276]	; (8006258 <_malloc_r+0x520>)
 8006144:	f43f af0e 	beq.w	8005f64 <_malloc_r+0x22c>
 8006148:	689c      	ldr	r4, [r3, #8]
 800614a:	6862      	ldr	r2, [r4, #4]
 800614c:	f022 0203 	bic.w	r2, r2, #3
 8006150:	e768      	b.n	8006024 <_malloc_r+0x2ec>
 8006152:	f8d8 8000 	ldr.w	r8, [r8]
 8006156:	4598      	cmp	r8, r3
 8006158:	d17c      	bne.n	8006254 <_malloc_r+0x51c>
 800615a:	f010 0f03 	tst.w	r0, #3
 800615e:	f1a8 0308 	sub.w	r3, r8, #8
 8006162:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8006166:	d1f4      	bne.n	8006152 <_malloc_r+0x41a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	ea23 0304 	bic.w	r3, r3, r4
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	0064      	lsls	r4, r4, #1
 8006172:	429c      	cmp	r4, r3
 8006174:	f63f aeca 	bhi.w	8005f0c <_malloc_r+0x1d4>
 8006178:	2c00      	cmp	r4, #0
 800617a:	f43f aec7 	beq.w	8005f0c <_malloc_r+0x1d4>
 800617e:	4223      	tst	r3, r4
 8006180:	4648      	mov	r0, r9
 8006182:	f47f ae69 	bne.w	8005e58 <_malloc_r+0x120>
 8006186:	0064      	lsls	r4, r4, #1
 8006188:	4223      	tst	r3, r4
 800618a:	f100 0004 	add.w	r0, r0, #4
 800618e:	d0fa      	beq.n	8006186 <_malloc_r+0x44e>
 8006190:	e662      	b.n	8005e58 <_malloc_r+0x120>
 8006192:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8006196:	d818      	bhi.n	80061ca <_malloc_r+0x492>
 8006198:	0be8      	lsrs	r0, r5, #15
 800619a:	3077      	adds	r0, #119	; 0x77
 800619c:	0041      	lsls	r1, r0, #1
 800619e:	e60b      	b.n	8005db8 <_malloc_r+0x80>
 80061a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061a4:	e6fb      	b.n	8005f9e <_malloc_r+0x266>
 80061a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061aa:	1092      	asrs	r2, r2, #2
 80061ac:	f04f 0c01 	mov.w	ip, #1
 80061b0:	fa0c f202 	lsl.w	r2, ip, r2
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80061ba:	460a      	mov	r2, r1
 80061bc:	e77d      	b.n	80060ba <_malloc_r+0x382>
 80061be:	2301      	movs	r3, #1
 80061c0:	f8c9 3004 	str.w	r3, [r9, #4]
 80061c4:	464c      	mov	r4, r9
 80061c6:	2200      	movs	r2, #0
 80061c8:	e72c      	b.n	8006024 <_malloc_r+0x2ec>
 80061ca:	f240 5354 	movw	r3, #1364	; 0x554
 80061ce:	4298      	cmp	r0, r3
 80061d0:	d81c      	bhi.n	800620c <_malloc_r+0x4d4>
 80061d2:	0ca8      	lsrs	r0, r5, #18
 80061d4:	307c      	adds	r0, #124	; 0x7c
 80061d6:	0041      	lsls	r1, r0, #1
 80061d8:	e5ee      	b.n	8005db8 <_malloc_r+0x80>
 80061da:	3210      	adds	r2, #16
 80061dc:	e6b4      	b.n	8005f48 <_malloc_r+0x210>
 80061de:	2a54      	cmp	r2, #84	; 0x54
 80061e0:	d823      	bhi.n	800622a <_malloc_r+0x4f2>
 80061e2:	0b1a      	lsrs	r2, r3, #12
 80061e4:	326e      	adds	r2, #110	; 0x6e
 80061e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80061ea:	e754      	b.n	8006096 <_malloc_r+0x35e>
 80061ec:	68bc      	ldr	r4, [r7, #8]
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	f022 0203 	bic.w	r2, r2, #3
 80061f4:	e716      	b.n	8006024 <_malloc_r+0x2ec>
 80061f6:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f47f aeb9 	bne.w	8005f72 <_malloc_r+0x23a>
 8006200:	4442      	add	r2, r8
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	e6fd      	b.n	8006008 <_malloc_r+0x2d0>
 800620c:	21fc      	movs	r1, #252	; 0xfc
 800620e:	207e      	movs	r0, #126	; 0x7e
 8006210:	e5d2      	b.n	8005db8 <_malloc_r+0x80>
 8006212:	2201      	movs	r2, #1
 8006214:	f04f 0a00 	mov.w	sl, #0
 8006218:	e6d4      	b.n	8005fc4 <_malloc_r+0x28c>
 800621a:	f104 0108 	add.w	r1, r4, #8
 800621e:	4630      	mov	r0, r6
 8006220:	f7ff faf4 	bl	800580c <_free_r>
 8006224:	f8da 1000 	ldr.w	r1, [sl]
 8006228:	e6ee      	b.n	8006008 <_malloc_r+0x2d0>
 800622a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800622e:	d804      	bhi.n	800623a <_malloc_r+0x502>
 8006230:	0bda      	lsrs	r2, r3, #15
 8006232:	3277      	adds	r2, #119	; 0x77
 8006234:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8006238:	e72d      	b.n	8006096 <_malloc_r+0x35e>
 800623a:	f240 5154 	movw	r1, #1364	; 0x554
 800623e:	428a      	cmp	r2, r1
 8006240:	d804      	bhi.n	800624c <_malloc_r+0x514>
 8006242:	0c9a      	lsrs	r2, r3, #18
 8006244:	327c      	adds	r2, #124	; 0x7c
 8006246:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800624a:	e724      	b.n	8006096 <_malloc_r+0x35e>
 800624c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8006250:	227e      	movs	r2, #126	; 0x7e
 8006252:	e720      	b.n	8006096 <_malloc_r+0x35e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	e78b      	b.n	8006170 <_malloc_r+0x438>
 8006258:	2000062c 	.word	0x2000062c

0800625c <memchr>:
 800625c:	0783      	lsls	r3, r0, #30
 800625e:	b470      	push	{r4, r5, r6}
 8006260:	b2c9      	uxtb	r1, r1
 8006262:	d040      	beq.n	80062e6 <memchr+0x8a>
 8006264:	1e54      	subs	r4, r2, #1
 8006266:	2a00      	cmp	r2, #0
 8006268:	d03f      	beq.n	80062ea <memchr+0x8e>
 800626a:	7803      	ldrb	r3, [r0, #0]
 800626c:	428b      	cmp	r3, r1
 800626e:	bf18      	it	ne
 8006270:	1c43      	addne	r3, r0, #1
 8006272:	d106      	bne.n	8006282 <memchr+0x26>
 8006274:	e01d      	b.n	80062b2 <memchr+0x56>
 8006276:	b1f4      	cbz	r4, 80062b6 <memchr+0x5a>
 8006278:	7802      	ldrb	r2, [r0, #0]
 800627a:	428a      	cmp	r2, r1
 800627c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006280:	d017      	beq.n	80062b2 <memchr+0x56>
 8006282:	f013 0f03 	tst.w	r3, #3
 8006286:	4618      	mov	r0, r3
 8006288:	f103 0301 	add.w	r3, r3, #1
 800628c:	d1f3      	bne.n	8006276 <memchr+0x1a>
 800628e:	2c03      	cmp	r4, #3
 8006290:	d814      	bhi.n	80062bc <memchr+0x60>
 8006292:	b184      	cbz	r4, 80062b6 <memchr+0x5a>
 8006294:	7803      	ldrb	r3, [r0, #0]
 8006296:	428b      	cmp	r3, r1
 8006298:	d00b      	beq.n	80062b2 <memchr+0x56>
 800629a:	1905      	adds	r5, r0, r4
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	e002      	b.n	80062a6 <memchr+0x4a>
 80062a0:	7802      	ldrb	r2, [r0, #0]
 80062a2:	428a      	cmp	r2, r1
 80062a4:	d005      	beq.n	80062b2 <memchr+0x56>
 80062a6:	42ab      	cmp	r3, r5
 80062a8:	4618      	mov	r0, r3
 80062aa:	f103 0301 	add.w	r3, r3, #1
 80062ae:	d1f7      	bne.n	80062a0 <memchr+0x44>
 80062b0:	2000      	movs	r0, #0
 80062b2:	bc70      	pop	{r4, r5, r6}
 80062b4:	4770      	bx	lr
 80062b6:	4620      	mov	r0, r4
 80062b8:	bc70      	pop	{r4, r5, r6}
 80062ba:	4770      	bx	lr
 80062bc:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80062c0:	4602      	mov	r2, r0
 80062c2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80062c6:	4610      	mov	r0, r2
 80062c8:	3204      	adds	r2, #4
 80062ca:	6803      	ldr	r3, [r0, #0]
 80062cc:	4073      	eors	r3, r6
 80062ce:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80062d2:	ea25 0303 	bic.w	r3, r5, r3
 80062d6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80062da:	d1da      	bne.n	8006292 <memchr+0x36>
 80062dc:	3c04      	subs	r4, #4
 80062de:	2c03      	cmp	r4, #3
 80062e0:	4610      	mov	r0, r2
 80062e2:	d8f0      	bhi.n	80062c6 <memchr+0x6a>
 80062e4:	e7d5      	b.n	8006292 <memchr+0x36>
 80062e6:	4614      	mov	r4, r2
 80062e8:	e7d1      	b.n	800628e <memchr+0x32>
 80062ea:	4610      	mov	r0, r2
 80062ec:	e7e1      	b.n	80062b2 <memchr+0x56>
 80062ee:	bf00      	nop

080062f0 <memmove>:
 80062f0:	4288      	cmp	r0, r1
 80062f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f4:	d90d      	bls.n	8006312 <memmove+0x22>
 80062f6:	188b      	adds	r3, r1, r2
 80062f8:	4298      	cmp	r0, r3
 80062fa:	d20a      	bcs.n	8006312 <memmove+0x22>
 80062fc:	1881      	adds	r1, r0, r2
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d054      	beq.n	80063ac <memmove+0xbc>
 8006302:	1a9a      	subs	r2, r3, r2
 8006304:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006308:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800630c:	4293      	cmp	r3, r2
 800630e:	d1f9      	bne.n	8006304 <memmove+0x14>
 8006310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006312:	2a0f      	cmp	r2, #15
 8006314:	d948      	bls.n	80063a8 <memmove+0xb8>
 8006316:	ea40 0301 	orr.w	r3, r0, r1
 800631a:	079b      	lsls	r3, r3, #30
 800631c:	d147      	bne.n	80063ae <memmove+0xbe>
 800631e:	f100 0410 	add.w	r4, r0, #16
 8006322:	f101 0310 	add.w	r3, r1, #16
 8006326:	4615      	mov	r5, r2
 8006328:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800632c:	f844 6c10 	str.w	r6, [r4, #-16]
 8006330:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8006334:	f844 6c0c 	str.w	r6, [r4, #-12]
 8006338:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800633c:	f844 6c08 	str.w	r6, [r4, #-8]
 8006340:	3d10      	subs	r5, #16
 8006342:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8006346:	f844 6c04 	str.w	r6, [r4, #-4]
 800634a:	2d0f      	cmp	r5, #15
 800634c:	f103 0310 	add.w	r3, r3, #16
 8006350:	f104 0410 	add.w	r4, r4, #16
 8006354:	d8e8      	bhi.n	8006328 <memmove+0x38>
 8006356:	f1a2 0310 	sub.w	r3, r2, #16
 800635a:	f023 030f 	bic.w	r3, r3, #15
 800635e:	f002 0e0f 	and.w	lr, r2, #15
 8006362:	3310      	adds	r3, #16
 8006364:	f1be 0f03 	cmp.w	lr, #3
 8006368:	4419      	add	r1, r3
 800636a:	4403      	add	r3, r0
 800636c:	d921      	bls.n	80063b2 <memmove+0xc2>
 800636e:	1f1e      	subs	r6, r3, #4
 8006370:	460d      	mov	r5, r1
 8006372:	4674      	mov	r4, lr
 8006374:	3c04      	subs	r4, #4
 8006376:	f855 7b04 	ldr.w	r7, [r5], #4
 800637a:	f846 7f04 	str.w	r7, [r6, #4]!
 800637e:	2c03      	cmp	r4, #3
 8006380:	d8f8      	bhi.n	8006374 <memmove+0x84>
 8006382:	f1ae 0404 	sub.w	r4, lr, #4
 8006386:	f024 0403 	bic.w	r4, r4, #3
 800638a:	3404      	adds	r4, #4
 800638c:	4423      	add	r3, r4
 800638e:	4421      	add	r1, r4
 8006390:	f002 0203 	and.w	r2, r2, #3
 8006394:	b152      	cbz	r2, 80063ac <memmove+0xbc>
 8006396:	3b01      	subs	r3, #1
 8006398:	440a      	add	r2, r1
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a2:	4291      	cmp	r1, r2
 80063a4:	d1f9      	bne.n	800639a <memmove+0xaa>
 80063a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a8:	4603      	mov	r3, r0
 80063aa:	e7f3      	b.n	8006394 <memmove+0xa4>
 80063ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ae:	4603      	mov	r3, r0
 80063b0:	e7f1      	b.n	8006396 <memmove+0xa6>
 80063b2:	4672      	mov	r2, lr
 80063b4:	e7ee      	b.n	8006394 <memmove+0xa4>
 80063b6:	bf00      	nop

080063b8 <__malloc_lock>:
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop

080063bc <__malloc_unlock>:
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop

080063c0 <_putc_r>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	460d      	mov	r5, r1
 80063c4:	4614      	mov	r4, r2
 80063c6:	4606      	mov	r6, r0
 80063c8:	b108      	cbz	r0, 80063ce <_putc_r+0xe>
 80063ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063cc:	b1d3      	cbz	r3, 8006404 <_putc_r+0x44>
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	db06      	blt.n	80063e6 <_putc_r+0x26>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	701d      	strb	r5, [r3, #0]
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	6022      	str	r2, [r4, #0]
 80063e2:	7818      	ldrb	r0, [r3, #0]
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	69a2      	ldr	r2, [r4, #24]
 80063e8:	4293      	cmp	r3, r2
 80063ea:	db0e      	blt.n	800640a <_putc_r+0x4a>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	701d      	strb	r5, [r3, #0]
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	7819      	ldrb	r1, [r3, #0]
 80063f4:	290a      	cmp	r1, #10
 80063f6:	d1f2      	bne.n	80063de <_putc_r+0x1e>
 80063f8:	4630      	mov	r0, r6
 80063fa:	4622      	mov	r2, r4
 80063fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006400:	f000 ba42 	b.w	8006888 <__swbuf_r>
 8006404:	f7ff f994 	bl	8005730 <__sinit>
 8006408:	e7e1      	b.n	80063ce <_putc_r+0xe>
 800640a:	4630      	mov	r0, r6
 800640c:	4629      	mov	r1, r5
 800640e:	4622      	mov	r2, r4
 8006410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006414:	f000 ba38 	b.w	8006888 <__swbuf_r>

08006418 <_realloc_r>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	4617      	mov	r7, r2
 800641e:	b083      	sub	sp, #12
 8006420:	460e      	mov	r6, r1
 8006422:	2900      	cmp	r1, #0
 8006424:	f000 80e7 	beq.w	80065f6 <_realloc_r+0x1de>
 8006428:	4681      	mov	r9, r0
 800642a:	f107 050b 	add.w	r5, r7, #11
 800642e:	f7ff ffc3 	bl	80063b8 <__malloc_lock>
 8006432:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006436:	2d16      	cmp	r5, #22
 8006438:	f023 0403 	bic.w	r4, r3, #3
 800643c:	f1a6 0808 	sub.w	r8, r6, #8
 8006440:	d84c      	bhi.n	80064dc <_realloc_r+0xc4>
 8006442:	2210      	movs	r2, #16
 8006444:	4615      	mov	r5, r2
 8006446:	42af      	cmp	r7, r5
 8006448:	d84d      	bhi.n	80064e6 <_realloc_r+0xce>
 800644a:	4294      	cmp	r4, r2
 800644c:	f280 8084 	bge.w	8006558 <_realloc_r+0x140>
 8006450:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8006800 <_realloc_r+0x3e8>
 8006454:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006458:	eb08 0104 	add.w	r1, r8, r4
 800645c:	4288      	cmp	r0, r1
 800645e:	f000 80d6 	beq.w	800660e <_realloc_r+0x1f6>
 8006462:	6848      	ldr	r0, [r1, #4]
 8006464:	f020 0e01 	bic.w	lr, r0, #1
 8006468:	448e      	add	lr, r1
 800646a:	f8de e004 	ldr.w	lr, [lr, #4]
 800646e:	f01e 0f01 	tst.w	lr, #1
 8006472:	d13f      	bne.n	80064f4 <_realloc_r+0xdc>
 8006474:	f020 0003 	bic.w	r0, r0, #3
 8006478:	4420      	add	r0, r4
 800647a:	4290      	cmp	r0, r2
 800647c:	f280 80c1 	bge.w	8006602 <_realloc_r+0x1ea>
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	f100 808f 	bmi.w	80065a4 <_realloc_r+0x18c>
 8006486:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800648a:	ebc3 0a08 	rsb	sl, r3, r8
 800648e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	eb00 0e03 	add.w	lr, r0, r3
 800649a:	4596      	cmp	lr, r2
 800649c:	db34      	blt.n	8006508 <_realloc_r+0xf0>
 800649e:	68cb      	ldr	r3, [r1, #12]
 80064a0:	688a      	ldr	r2, [r1, #8]
 80064a2:	4657      	mov	r7, sl
 80064a4:	60d3      	str	r3, [r2, #12]
 80064a6:	609a      	str	r2, [r3, #8]
 80064a8:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80064ac:	f8da 300c 	ldr.w	r3, [sl, #12]
 80064b0:	60cb      	str	r3, [r1, #12]
 80064b2:	1f22      	subs	r2, r4, #4
 80064b4:	2a24      	cmp	r2, #36	; 0x24
 80064b6:	6099      	str	r1, [r3, #8]
 80064b8:	f200 8136 	bhi.w	8006728 <_realloc_r+0x310>
 80064bc:	2a13      	cmp	r2, #19
 80064be:	f240 80fd 	bls.w	80066bc <_realloc_r+0x2a4>
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	f8ca 3008 	str.w	r3, [sl, #8]
 80064c8:	6873      	ldr	r3, [r6, #4]
 80064ca:	f8ca 300c 	str.w	r3, [sl, #12]
 80064ce:	2a1b      	cmp	r2, #27
 80064d0:	f200 8140 	bhi.w	8006754 <_realloc_r+0x33c>
 80064d4:	3608      	adds	r6, #8
 80064d6:	f10a 0310 	add.w	r3, sl, #16
 80064da:	e0f0      	b.n	80066be <_realloc_r+0x2a6>
 80064dc:	f025 0507 	bic.w	r5, r5, #7
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	462a      	mov	r2, r5
 80064e4:	daaf      	bge.n	8006446 <_realloc_r+0x2e>
 80064e6:	230c      	movs	r3, #12
 80064e8:	2000      	movs	r0, #0
 80064ea:	f8c9 3000 	str.w	r3, [r9]
 80064ee:	b003      	add	sp, #12
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	07d9      	lsls	r1, r3, #31
 80064f6:	d455      	bmi.n	80065a4 <_realloc_r+0x18c>
 80064f8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80064fc:	ebc3 0a08 	rsb	sl, r3, r8
 8006500:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006504:	f023 0303 	bic.w	r3, r3, #3
 8006508:	4423      	add	r3, r4
 800650a:	4293      	cmp	r3, r2
 800650c:	db4a      	blt.n	80065a4 <_realloc_r+0x18c>
 800650e:	4657      	mov	r7, sl
 8006510:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006514:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8006518:	1f22      	subs	r2, r4, #4
 800651a:	2a24      	cmp	r2, #36	; 0x24
 800651c:	60c1      	str	r1, [r0, #12]
 800651e:	6088      	str	r0, [r1, #8]
 8006520:	f200 810e 	bhi.w	8006740 <_realloc_r+0x328>
 8006524:	2a13      	cmp	r2, #19
 8006526:	f240 8109 	bls.w	800673c <_realloc_r+0x324>
 800652a:	6831      	ldr	r1, [r6, #0]
 800652c:	f8ca 1008 	str.w	r1, [sl, #8]
 8006530:	6871      	ldr	r1, [r6, #4]
 8006532:	f8ca 100c 	str.w	r1, [sl, #12]
 8006536:	2a1b      	cmp	r2, #27
 8006538:	f200 8121 	bhi.w	800677e <_realloc_r+0x366>
 800653c:	3608      	adds	r6, #8
 800653e:	f10a 0210 	add.w	r2, sl, #16
 8006542:	6831      	ldr	r1, [r6, #0]
 8006544:	6011      	str	r1, [r2, #0]
 8006546:	6871      	ldr	r1, [r6, #4]
 8006548:	6051      	str	r1, [r2, #4]
 800654a:	68b1      	ldr	r1, [r6, #8]
 800654c:	6091      	str	r1, [r2, #8]
 800654e:	461c      	mov	r4, r3
 8006550:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006554:	463e      	mov	r6, r7
 8006556:	46d0      	mov	r8, sl
 8006558:	1b62      	subs	r2, r4, r5
 800655a:	2a0f      	cmp	r2, #15
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	d80e      	bhi.n	8006580 <_realloc_r+0x168>
 8006562:	4323      	orrs	r3, r4
 8006564:	4444      	add	r4, r8
 8006566:	f8c8 3004 	str.w	r3, [r8, #4]
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	4648      	mov	r0, r9
 8006574:	f7ff ff22 	bl	80063bc <__malloc_unlock>
 8006578:	4630      	mov	r0, r6
 800657a:	b003      	add	sp, #12
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006580:	eb08 0105 	add.w	r1, r8, r5
 8006584:	431d      	orrs	r5, r3
 8006586:	f042 0301 	orr.w	r3, r2, #1
 800658a:	440a      	add	r2, r1
 800658c:	f8c8 5004 	str.w	r5, [r8, #4]
 8006590:	604b      	str	r3, [r1, #4]
 8006592:	6853      	ldr	r3, [r2, #4]
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	3108      	adds	r1, #8
 800659a:	6053      	str	r3, [r2, #4]
 800659c:	4648      	mov	r0, r9
 800659e:	f7ff f935 	bl	800580c <_free_r>
 80065a2:	e7e6      	b.n	8006572 <_realloc_r+0x15a>
 80065a4:	4639      	mov	r1, r7
 80065a6:	4648      	mov	r0, r9
 80065a8:	f7ff fbc6 	bl	8005d38 <_malloc_r>
 80065ac:	4607      	mov	r7, r0
 80065ae:	b1d8      	cbz	r0, 80065e8 <_realloc_r+0x1d0>
 80065b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80065b4:	f023 0201 	bic.w	r2, r3, #1
 80065b8:	4442      	add	r2, r8
 80065ba:	f1a0 0108 	sub.w	r1, r0, #8
 80065be:	4291      	cmp	r1, r2
 80065c0:	f000 80ac 	beq.w	800671c <_realloc_r+0x304>
 80065c4:	1f22      	subs	r2, r4, #4
 80065c6:	2a24      	cmp	r2, #36	; 0x24
 80065c8:	f200 8099 	bhi.w	80066fe <_realloc_r+0x2e6>
 80065cc:	2a13      	cmp	r2, #19
 80065ce:	d86a      	bhi.n	80066a6 <_realloc_r+0x28e>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4632      	mov	r2, r6
 80065d4:	6811      	ldr	r1, [r2, #0]
 80065d6:	6019      	str	r1, [r3, #0]
 80065d8:	6851      	ldr	r1, [r2, #4]
 80065da:	6059      	str	r1, [r3, #4]
 80065dc:	6892      	ldr	r2, [r2, #8]
 80065de:	609a      	str	r2, [r3, #8]
 80065e0:	4631      	mov	r1, r6
 80065e2:	4648      	mov	r0, r9
 80065e4:	f7ff f912 	bl	800580c <_free_r>
 80065e8:	4648      	mov	r0, r9
 80065ea:	f7ff fee7 	bl	80063bc <__malloc_unlock>
 80065ee:	4638      	mov	r0, r7
 80065f0:	b003      	add	sp, #12
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	4611      	mov	r1, r2
 80065f8:	b003      	add	sp, #12
 80065fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fe:	f7ff bb9b 	b.w	8005d38 <_malloc_r>
 8006602:	68ca      	ldr	r2, [r1, #12]
 8006604:	6889      	ldr	r1, [r1, #8]
 8006606:	4604      	mov	r4, r0
 8006608:	60ca      	str	r2, [r1, #12]
 800660a:	6091      	str	r1, [r2, #8]
 800660c:	e7a4      	b.n	8006558 <_realloc_r+0x140>
 800660e:	6841      	ldr	r1, [r0, #4]
 8006610:	f021 0103 	bic.w	r1, r1, #3
 8006614:	4421      	add	r1, r4
 8006616:	f105 0010 	add.w	r0, r5, #16
 800661a:	4281      	cmp	r1, r0
 800661c:	da5b      	bge.n	80066d6 <_realloc_r+0x2be>
 800661e:	07db      	lsls	r3, r3, #31
 8006620:	d4c0      	bmi.n	80065a4 <_realloc_r+0x18c>
 8006622:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006626:	ebc3 0a08 	rsb	sl, r3, r8
 800662a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	eb01 0c03 	add.w	ip, r1, r3
 8006636:	4560      	cmp	r0, ip
 8006638:	f73f af66 	bgt.w	8006508 <_realloc_r+0xf0>
 800663c:	4657      	mov	r7, sl
 800663e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006642:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006646:	1f22      	subs	r2, r4, #4
 8006648:	2a24      	cmp	r2, #36	; 0x24
 800664a:	60cb      	str	r3, [r1, #12]
 800664c:	6099      	str	r1, [r3, #8]
 800664e:	f200 80b8 	bhi.w	80067c2 <_realloc_r+0x3aa>
 8006652:	2a13      	cmp	r2, #19
 8006654:	f240 80a9 	bls.w	80067aa <_realloc_r+0x392>
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	f8ca 3008 	str.w	r3, [sl, #8]
 800665e:	6873      	ldr	r3, [r6, #4]
 8006660:	f8ca 300c 	str.w	r3, [sl, #12]
 8006664:	2a1b      	cmp	r2, #27
 8006666:	f200 80b5 	bhi.w	80067d4 <_realloc_r+0x3bc>
 800666a:	3608      	adds	r6, #8
 800666c:	f10a 0310 	add.w	r3, sl, #16
 8006670:	6832      	ldr	r2, [r6, #0]
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	6872      	ldr	r2, [r6, #4]
 8006676:	605a      	str	r2, [r3, #4]
 8006678:	68b2      	ldr	r2, [r6, #8]
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	eb0a 0205 	add.w	r2, sl, r5
 8006680:	ebc5 030c 	rsb	r3, r5, ip
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	f8cb 2008 	str.w	r2, [fp, #8]
 800668c:	6053      	str	r3, [r2, #4]
 800668e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	431d      	orrs	r5, r3
 8006698:	4648      	mov	r0, r9
 800669a:	f8ca 5004 	str.w	r5, [sl, #4]
 800669e:	f7ff fe8d 	bl	80063bc <__malloc_unlock>
 80066a2:	4638      	mov	r0, r7
 80066a4:	e769      	b.n	800657a <_realloc_r+0x162>
 80066a6:	6833      	ldr	r3, [r6, #0]
 80066a8:	6003      	str	r3, [r0, #0]
 80066aa:	6873      	ldr	r3, [r6, #4]
 80066ac:	6043      	str	r3, [r0, #4]
 80066ae:	2a1b      	cmp	r2, #27
 80066b0:	d829      	bhi.n	8006706 <_realloc_r+0x2ee>
 80066b2:	f100 0308 	add.w	r3, r0, #8
 80066b6:	f106 0208 	add.w	r2, r6, #8
 80066ba:	e78b      	b.n	80065d4 <_realloc_r+0x1bc>
 80066bc:	463b      	mov	r3, r7
 80066be:	6832      	ldr	r2, [r6, #0]
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	6872      	ldr	r2, [r6, #4]
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	68b2      	ldr	r2, [r6, #8]
 80066c8:	609a      	str	r2, [r3, #8]
 80066ca:	463e      	mov	r6, r7
 80066cc:	4674      	mov	r4, lr
 80066ce:	f8da 3004 	ldr.w	r3, [sl, #4]
 80066d2:	46d0      	mov	r8, sl
 80066d4:	e740      	b.n	8006558 <_realloc_r+0x140>
 80066d6:	eb08 0205 	add.w	r2, r8, r5
 80066da:	1b4b      	subs	r3, r1, r5
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	f8cb 2008 	str.w	r2, [fp, #8]
 80066e4:	6053      	str	r3, [r2, #4]
 80066e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	431d      	orrs	r5, r3
 80066f0:	4648      	mov	r0, r9
 80066f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80066f6:	f7ff fe61 	bl	80063bc <__malloc_unlock>
 80066fa:	4630      	mov	r0, r6
 80066fc:	e73d      	b.n	800657a <_realloc_r+0x162>
 80066fe:	4631      	mov	r1, r6
 8006700:	f7ff fdf6 	bl	80062f0 <memmove>
 8006704:	e76c      	b.n	80065e0 <_realloc_r+0x1c8>
 8006706:	68b3      	ldr	r3, [r6, #8]
 8006708:	6083      	str	r3, [r0, #8]
 800670a:	68f3      	ldr	r3, [r6, #12]
 800670c:	60c3      	str	r3, [r0, #12]
 800670e:	2a24      	cmp	r2, #36	; 0x24
 8006710:	d02c      	beq.n	800676c <_realloc_r+0x354>
 8006712:	f100 0310 	add.w	r3, r0, #16
 8006716:	f106 0210 	add.w	r2, r6, #16
 800671a:	e75b      	b.n	80065d4 <_realloc_r+0x1bc>
 800671c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006720:	f022 0203 	bic.w	r2, r2, #3
 8006724:	4414      	add	r4, r2
 8006726:	e717      	b.n	8006558 <_realloc_r+0x140>
 8006728:	4631      	mov	r1, r6
 800672a:	4638      	mov	r0, r7
 800672c:	4674      	mov	r4, lr
 800672e:	463e      	mov	r6, r7
 8006730:	f7ff fdde 	bl	80062f0 <memmove>
 8006734:	46d0      	mov	r8, sl
 8006736:	f8da 3004 	ldr.w	r3, [sl, #4]
 800673a:	e70d      	b.n	8006558 <_realloc_r+0x140>
 800673c:	463a      	mov	r2, r7
 800673e:	e700      	b.n	8006542 <_realloc_r+0x12a>
 8006740:	4631      	mov	r1, r6
 8006742:	4638      	mov	r0, r7
 8006744:	461c      	mov	r4, r3
 8006746:	463e      	mov	r6, r7
 8006748:	f7ff fdd2 	bl	80062f0 <memmove>
 800674c:	46d0      	mov	r8, sl
 800674e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006752:	e701      	b.n	8006558 <_realloc_r+0x140>
 8006754:	68b3      	ldr	r3, [r6, #8]
 8006756:	f8ca 3010 	str.w	r3, [sl, #16]
 800675a:	68f3      	ldr	r3, [r6, #12]
 800675c:	f8ca 3014 	str.w	r3, [sl, #20]
 8006760:	2a24      	cmp	r2, #36	; 0x24
 8006762:	d018      	beq.n	8006796 <_realloc_r+0x37e>
 8006764:	3610      	adds	r6, #16
 8006766:	f10a 0318 	add.w	r3, sl, #24
 800676a:	e7a8      	b.n	80066be <_realloc_r+0x2a6>
 800676c:	6933      	ldr	r3, [r6, #16]
 800676e:	6103      	str	r3, [r0, #16]
 8006770:	6973      	ldr	r3, [r6, #20]
 8006772:	6143      	str	r3, [r0, #20]
 8006774:	f106 0218 	add.w	r2, r6, #24
 8006778:	f100 0318 	add.w	r3, r0, #24
 800677c:	e72a      	b.n	80065d4 <_realloc_r+0x1bc>
 800677e:	68b1      	ldr	r1, [r6, #8]
 8006780:	f8ca 1010 	str.w	r1, [sl, #16]
 8006784:	68f1      	ldr	r1, [r6, #12]
 8006786:	f8ca 1014 	str.w	r1, [sl, #20]
 800678a:	2a24      	cmp	r2, #36	; 0x24
 800678c:	d00f      	beq.n	80067ae <_realloc_r+0x396>
 800678e:	3610      	adds	r6, #16
 8006790:	f10a 0218 	add.w	r2, sl, #24
 8006794:	e6d5      	b.n	8006542 <_realloc_r+0x12a>
 8006796:	6933      	ldr	r3, [r6, #16]
 8006798:	f8ca 3018 	str.w	r3, [sl, #24]
 800679c:	6973      	ldr	r3, [r6, #20]
 800679e:	f8ca 301c 	str.w	r3, [sl, #28]
 80067a2:	3618      	adds	r6, #24
 80067a4:	f10a 0320 	add.w	r3, sl, #32
 80067a8:	e789      	b.n	80066be <_realloc_r+0x2a6>
 80067aa:	463b      	mov	r3, r7
 80067ac:	e760      	b.n	8006670 <_realloc_r+0x258>
 80067ae:	6932      	ldr	r2, [r6, #16]
 80067b0:	f8ca 2018 	str.w	r2, [sl, #24]
 80067b4:	6972      	ldr	r2, [r6, #20]
 80067b6:	f8ca 201c 	str.w	r2, [sl, #28]
 80067ba:	3618      	adds	r6, #24
 80067bc:	f10a 0220 	add.w	r2, sl, #32
 80067c0:	e6bf      	b.n	8006542 <_realloc_r+0x12a>
 80067c2:	4631      	mov	r1, r6
 80067c4:	4638      	mov	r0, r7
 80067c6:	f8cd c004 	str.w	ip, [sp, #4]
 80067ca:	f7ff fd91 	bl	80062f0 <memmove>
 80067ce:	f8dd c004 	ldr.w	ip, [sp, #4]
 80067d2:	e753      	b.n	800667c <_realloc_r+0x264>
 80067d4:	68b3      	ldr	r3, [r6, #8]
 80067d6:	f8ca 3010 	str.w	r3, [sl, #16]
 80067da:	68f3      	ldr	r3, [r6, #12]
 80067dc:	f8ca 3014 	str.w	r3, [sl, #20]
 80067e0:	2a24      	cmp	r2, #36	; 0x24
 80067e2:	d003      	beq.n	80067ec <_realloc_r+0x3d4>
 80067e4:	3610      	adds	r6, #16
 80067e6:	f10a 0318 	add.w	r3, sl, #24
 80067ea:	e741      	b.n	8006670 <_realloc_r+0x258>
 80067ec:	6933      	ldr	r3, [r6, #16]
 80067ee:	f8ca 3018 	str.w	r3, [sl, #24]
 80067f2:	6973      	ldr	r3, [r6, #20]
 80067f4:	f8ca 301c 	str.w	r3, [sl, #28]
 80067f8:	3618      	adds	r6, #24
 80067fa:	f10a 0320 	add.w	r3, sl, #32
 80067fe:	e737      	b.n	8006670 <_realloc_r+0x258>
 8006800:	2000062c 	.word	0x2000062c

08006804 <__sread>:
 8006804:	b510      	push	{r4, lr}
 8006806:	460c      	mov	r4, r1
 8006808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680c:	f7fa f998 	bl	8000b40 <_read_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	db03      	blt.n	800681c <__sread+0x18>
 8006814:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006816:	4403      	add	r3, r0
 8006818:	6523      	str	r3, [r4, #80]	; 0x50
 800681a:	bd10      	pop	{r4, pc}
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop

08006828 <__swrite>:
 8006828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682c:	4616      	mov	r6, r2
 800682e:	898a      	ldrh	r2, [r1, #12]
 8006830:	461d      	mov	r5, r3
 8006832:	05d3      	lsls	r3, r2, #23
 8006834:	460c      	mov	r4, r1
 8006836:	4607      	mov	r7, r0
 8006838:	d506      	bpl.n	8006848 <__swrite+0x20>
 800683a:	2200      	movs	r2, #0
 800683c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006840:	2302      	movs	r3, #2
 8006842:	f7fa f8ad 	bl	80009a0 <_lseek_r>
 8006846:	89a2      	ldrh	r2, [r4, #12]
 8006848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006850:	81a2      	strh	r2, [r4, #12]
 8006852:	4638      	mov	r0, r7
 8006854:	4632      	mov	r2, r6
 8006856:	462b      	mov	r3, r5
 8006858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685c:	f7fa b9fa 	b.w	8000c54 <_write_r>

08006860 <__sseek>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f7fa f89a 	bl	80009a0 <_lseek_r>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	1c42      	adds	r2, r0, #1
 8006870:	bf0e      	itee	eq
 8006872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800687a:	6520      	strne	r0, [r4, #80]	; 0x50
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	bd10      	pop	{r4, pc}

08006880 <__sclose>:
 8006880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006884:	f7fa b882 	b.w	800098c <_close_r>

08006888 <__swbuf_r>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	460d      	mov	r5, r1
 800688c:	4614      	mov	r4, r2
 800688e:	4606      	mov	r6, r0
 8006890:	b110      	cbz	r0, 8006898 <__swbuf_r+0x10>
 8006892:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	d048      	beq.n	800692a <__swbuf_r+0xa2>
 8006898:	89a2      	ldrh	r2, [r4, #12]
 800689a:	69a3      	ldr	r3, [r4, #24]
 800689c:	60a3      	str	r3, [r4, #8]
 800689e:	b291      	uxth	r1, r2
 80068a0:	0708      	lsls	r0, r1, #28
 80068a2:	d538      	bpl.n	8006916 <__swbuf_r+0x8e>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d035      	beq.n	8006916 <__swbuf_r+0x8e>
 80068aa:	0489      	lsls	r1, r1, #18
 80068ac:	b2ed      	uxtb	r5, r5
 80068ae:	d515      	bpl.n	80068dc <__swbuf_r+0x54>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	6961      	ldr	r1, [r4, #20]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	428b      	cmp	r3, r1
 80068b8:	da1c      	bge.n	80068f4 <__swbuf_r+0x6c>
 80068ba:	3301      	adds	r3, #1
 80068bc:	68a1      	ldr	r1, [r4, #8]
 80068be:	1c50      	adds	r0, r2, #1
 80068c0:	3901      	subs	r1, #1
 80068c2:	60a1      	str	r1, [r4, #8]
 80068c4:	6020      	str	r0, [r4, #0]
 80068c6:	7015      	strb	r5, [r2, #0]
 80068c8:	6962      	ldr	r2, [r4, #20]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d01a      	beq.n	8006904 <__swbuf_r+0x7c>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	07db      	lsls	r3, r3, #31
 80068d2:	d501      	bpl.n	80068d8 <__swbuf_r+0x50>
 80068d4:	2d0a      	cmp	r5, #10
 80068d6:	d015      	beq.n	8006904 <__swbuf_r+0x7c>
 80068d8:	4628      	mov	r0, r5
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80068de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80068e6:	81a2      	strh	r2, [r4, #12]
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	6661      	str	r1, [r4, #100]	; 0x64
 80068ec:	6961      	ldr	r1, [r4, #20]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	428b      	cmp	r3, r1
 80068f2:	dbe2      	blt.n	80068ba <__swbuf_r+0x32>
 80068f4:	4630      	mov	r0, r6
 80068f6:	4621      	mov	r1, r4
 80068f8:	f7fe fe86 	bl	8005608 <_fflush_r>
 80068fc:	b940      	cbnz	r0, 8006910 <__swbuf_r+0x88>
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	2301      	movs	r3, #1
 8006902:	e7db      	b.n	80068bc <__swbuf_r+0x34>
 8006904:	4630      	mov	r0, r6
 8006906:	4621      	mov	r1, r4
 8006908:	f7fe fe7e 	bl	8005608 <_fflush_r>
 800690c:	2800      	cmp	r0, #0
 800690e:	d0e3      	beq.n	80068d8 <__swbuf_r+0x50>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	4630      	mov	r0, r6
 8006918:	4621      	mov	r1, r4
 800691a:	f000 f809 	bl	8006930 <__swsetup_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	d1f6      	bne.n	8006910 <__swbuf_r+0x88>
 8006922:	89a2      	ldrh	r2, [r4, #12]
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	b291      	uxth	r1, r2
 8006928:	e7bf      	b.n	80068aa <__swbuf_r+0x22>
 800692a:	f7fe ff01 	bl	8005730 <__sinit>
 800692e:	e7b3      	b.n	8006898 <__swbuf_r+0x10>

08006930 <__swsetup_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4b2f      	ldr	r3, [pc, #188]	; (80069f0 <__swsetup_r+0xc0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4605      	mov	r5, r0
 8006938:	460c      	mov	r4, r1
 800693a:	b113      	cbz	r3, 8006942 <__swsetup_r+0x12>
 800693c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693e:	2a00      	cmp	r2, #0
 8006940:	d036      	beq.n	80069b0 <__swsetup_r+0x80>
 8006942:	89a2      	ldrh	r2, [r4, #12]
 8006944:	b293      	uxth	r3, r2
 8006946:	0718      	lsls	r0, r3, #28
 8006948:	d50c      	bpl.n	8006964 <__swsetup_r+0x34>
 800694a:	6920      	ldr	r0, [r4, #16]
 800694c:	b1a8      	cbz	r0, 800697a <__swsetup_r+0x4a>
 800694e:	f013 0201 	ands.w	r2, r3, #1
 8006952:	d01e      	beq.n	8006992 <__swsetup_r+0x62>
 8006954:	6963      	ldr	r3, [r4, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	425b      	negs	r3, r3
 800695a:	61a3      	str	r3, [r4, #24]
 800695c:	60a2      	str	r2, [r4, #8]
 800695e:	b1f0      	cbz	r0, 800699e <__swsetup_r+0x6e>
 8006960:	2000      	movs	r0, #0
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	06d9      	lsls	r1, r3, #27
 8006966:	d53b      	bpl.n	80069e0 <__swsetup_r+0xb0>
 8006968:	0758      	lsls	r0, r3, #29
 800696a:	d425      	bmi.n	80069b8 <__swsetup_r+0x88>
 800696c:	6920      	ldr	r0, [r4, #16]
 800696e:	f042 0308 	orr.w	r3, r2, #8
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	b29b      	uxth	r3, r3
 8006976:	2800      	cmp	r0, #0
 8006978:	d1e9      	bne.n	800694e <__swsetup_r+0x1e>
 800697a:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800697e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006982:	d0e4      	beq.n	800694e <__swsetup_r+0x1e>
 8006984:	4628      	mov	r0, r5
 8006986:	4621      	mov	r1, r4
 8006988:	f000 f8c8 	bl	8006b1c <__smakebuf_r>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	6920      	ldr	r0, [r4, #16]
 8006990:	e7dd      	b.n	800694e <__swsetup_r+0x1e>
 8006992:	0799      	lsls	r1, r3, #30
 8006994:	bf58      	it	pl
 8006996:	6962      	ldrpl	r2, [r4, #20]
 8006998:	60a2      	str	r2, [r4, #8]
 800699a:	2800      	cmp	r0, #0
 800699c:	d1e0      	bne.n	8006960 <__swsetup_r+0x30>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	061a      	lsls	r2, r3, #24
 80069a2:	d5de      	bpl.n	8006962 <__swsetup_r+0x32>
 80069a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe febd 	bl	8005730 <__sinit>
 80069b6:	e7c4      	b.n	8006942 <__swsetup_r+0x12>
 80069b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80069ba:	b149      	cbz	r1, 80069d0 <__swsetup_r+0xa0>
 80069bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80069c0:	4299      	cmp	r1, r3
 80069c2:	d003      	beq.n	80069cc <__swsetup_r+0x9c>
 80069c4:	4628      	mov	r0, r5
 80069c6:	f7fe ff21 	bl	800580c <_free_r>
 80069ca:	89a2      	ldrh	r2, [r4, #12]
 80069cc:	2300      	movs	r3, #0
 80069ce:	6323      	str	r3, [r4, #48]	; 0x30
 80069d0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80069d4:	2300      	movs	r3, #0
 80069d6:	6920      	ldr	r0, [r4, #16]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	b292      	uxth	r2, r2
 80069dc:	6020      	str	r0, [r4, #0]
 80069de:	e7c6      	b.n	800696e <__swsetup_r+0x3e>
 80069e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069e4:	2309      	movs	r3, #9
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ec:	81a2      	strh	r2, [r4, #12]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000628 	.word	0x20000628

080069f4 <__register_exitproc>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	4c25      	ldr	r4, [pc, #148]	; (8006a90 <__register_exitproc+0x9c>)
 80069fa:	6825      	ldr	r5, [r4, #0]
 80069fc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8006a00:	4606      	mov	r6, r0
 8006a02:	4688      	mov	r8, r1
 8006a04:	4692      	mov	sl, r2
 8006a06:	4699      	mov	r9, r3
 8006a08:	b3cc      	cbz	r4, 8006a7e <__register_exitproc+0x8a>
 8006a0a:	6860      	ldr	r0, [r4, #4]
 8006a0c:	281f      	cmp	r0, #31
 8006a0e:	dc18      	bgt.n	8006a42 <__register_exitproc+0x4e>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	b17e      	cbz	r6, 8006a34 <__register_exitproc+0x40>
 8006a14:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006a18:	2101      	movs	r1, #1
 8006a1a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8006a1e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8006a22:	fa01 f200 	lsl.w	r2, r1, r0
 8006a26:	4317      	orrs	r7, r2
 8006a28:	2e02      	cmp	r6, #2
 8006a2a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8006a2e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8006a32:	d01e      	beq.n	8006a72 <__register_exitproc+0x7e>
 8006a34:	3002      	adds	r0, #2
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <__register_exitproc+0xa0>)
 8006a44:	b303      	cbz	r3, 8006a88 <__register_exitproc+0x94>
 8006a46:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006a4a:	f7ff f96d 	bl	8005d28 <malloc>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	b1d0      	cbz	r0, 8006a88 <__register_exitproc+0x94>
 8006a52:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8006a56:	2700      	movs	r7, #0
 8006a58:	e880 0088 	stmia.w	r0, {r3, r7}
 8006a5c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8006a60:	4638      	mov	r0, r7
 8006a62:	2301      	movs	r3, #1
 8006a64:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8006a68:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	d0e1      	beq.n	8006a34 <__register_exitproc+0x40>
 8006a70:	e7d0      	b.n	8006a14 <__register_exitproc+0x20>
 8006a72:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8006a76:	430a      	orrs	r2, r1
 8006a78:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8006a7c:	e7da      	b.n	8006a34 <__register_exitproc+0x40>
 8006a7e:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8006a82:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8006a86:	e7c0      	b.n	8006a0a <__register_exitproc+0x16>
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	08017328 	.word	0x08017328
 8006a94:	08005d29 	.word	0x08005d29

08006a98 <_fclose_r>:
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d03d      	beq.n	8006b18 <_fclose_r+0x80>
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	b108      	cbz	r0, 8006aa8 <_fclose_r+0x10>
 8006aa4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006aa6:	b37b      	cbz	r3, 8006b08 <_fclose_r+0x70>
 8006aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aac:	b90b      	cbnz	r3, 8006ab2 <_fclose_r+0x1a>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	f7fe fcfd 	bl	80054b4 <__sflush_r>
 8006aba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006abc:	4606      	mov	r6, r0
 8006abe:	b133      	cbz	r3, 8006ace <_fclose_r+0x36>
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	69e1      	ldr	r1, [r4, #28]
 8006ac4:	4798      	blx	r3
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	d41c      	bmi.n	8006b0e <_fclose_r+0x76>
 8006ad4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ad6:	b141      	cbz	r1, 8006aea <_fclose_r+0x52>
 8006ad8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006adc:	4299      	cmp	r1, r3
 8006ade:	d002      	beq.n	8006ae6 <_fclose_r+0x4e>
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f7fe fe93 	bl	800580c <_free_r>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6323      	str	r3, [r4, #48]	; 0x30
 8006aea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006aec:	b121      	cbz	r1, 8006af8 <_fclose_r+0x60>
 8006aee:	4628      	mov	r0, r5
 8006af0:	f7fe fe8c 	bl	800580c <_free_r>
 8006af4:	2300      	movs	r3, #0
 8006af6:	6463      	str	r3, [r4, #68]	; 0x44
 8006af8:	f7fe fe20 	bl	800573c <__sfp_lock_acquire>
 8006afc:	2300      	movs	r3, #0
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	f7fe fe1e 	bl	8005740 <__sfp_lock_release>
 8006b04:	4630      	mov	r0, r6
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	f7fe fe12 	bl	8005730 <__sinit>
 8006b0c:	e7cc      	b.n	8006aa8 <_fclose_r+0x10>
 8006b0e:	4628      	mov	r0, r5
 8006b10:	6921      	ldr	r1, [r4, #16]
 8006b12:	f7fe fe7b 	bl	800580c <_free_r>
 8006b16:	e7dd      	b.n	8006ad4 <_fclose_r+0x3c>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	4770      	bx	lr

08006b1c <__smakebuf_r>:
 8006b1c:	898b      	ldrh	r3, [r1, #12]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	f012 0f02 	tst.w	r2, #2
 8006b24:	d13c      	bne.n	8006ba0 <__smakebuf_r+0x84>
 8006b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b28:	460c      	mov	r4, r1
 8006b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	b091      	sub	sp, #68	; 0x44
 8006b32:	4605      	mov	r5, r0
 8006b34:	db19      	blt.n	8006b6a <__smakebuf_r+0x4e>
 8006b36:	aa01      	add	r2, sp, #4
 8006b38:	f7f9 ff2b 	bl	8000992 <_fstat_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	db12      	blt.n	8006b66 <__smakebuf_r+0x4a>
 8006b40:	9b02      	ldr	r3, [sp, #8]
 8006b42:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4a:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8006b4e:	fab7 f787 	clz	r7, r7
 8006b52:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8006b56:	d02a      	beq.n	8006bae <__smakebuf_r+0x92>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006b64:	e00b      	b.n	8006b7e <__smakebuf_r+0x62>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006b6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	bf0c      	ite	eq
 8006b76:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8006b7a:	2640      	movne	r6, #64	; 0x40
 8006b7c:	2700      	movs	r7, #0
 8006b7e:	4628      	mov	r0, r5
 8006b80:	4631      	mov	r1, r6
 8006b82:	f7ff f8d9 	bl	8005d38 <_malloc_r>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	b340      	cbz	r0, 8006bdc <__smakebuf_r+0xc0>
 8006b8a:	4a1a      	ldr	r2, [pc, #104]	; (8006bf4 <__smakebuf_r+0xd8>)
 8006b8c:	63ea      	str	r2, [r5, #60]	; 0x3c
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	6020      	str	r0, [r4, #0]
 8006b96:	6120      	str	r0, [r4, #16]
 8006b98:	6166      	str	r6, [r4, #20]
 8006b9a:	b99f      	cbnz	r7, 8006bc4 <__smakebuf_r+0xa8>
 8006b9c:	b011      	add	sp, #68	; 0x44
 8006b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba0:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	600b      	str	r3, [r1, #0]
 8006ba8:	610b      	str	r3, [r1, #16]
 8006baa:	614a      	str	r2, [r1, #20]
 8006bac:	4770      	bx	lr
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <__smakebuf_r+0xdc>)
 8006bb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d1d0      	bne.n	8006b58 <__smakebuf_r+0x3c>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8006bbc:	4333      	orrs	r3, r6
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	64e6      	str	r6, [r4, #76]	; 0x4c
 8006bc2:	e7dc      	b.n	8006b7e <__smakebuf_r+0x62>
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bca:	f7f9 fee7 	bl	800099c <_isatty_r>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0e4      	beq.n	8006b9c <__smakebuf_r+0x80>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	e7df      	b.n	8006b9c <__smakebuf_r+0x80>
 8006bdc:	059a      	lsls	r2, r3, #22
 8006bde:	d4dd      	bmi.n	8006b9c <__smakebuf_r+0x80>
 8006be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be4:	f043 0302 	orr.w	r3, r3, #2
 8006be8:	2101      	movs	r1, #1
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	6022      	str	r2, [r4, #0]
 8006bee:	6122      	str	r2, [r4, #16]
 8006bf0:	6161      	str	r1, [r4, #20]
 8006bf2:	e7d3      	b.n	8006b9c <__smakebuf_r+0x80>
 8006bf4:	08005635 	.word	0x08005635
 8006bf8:	08006861 	.word	0x08006861

08006bfc <_init>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr

08006c08 <_fini>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr
